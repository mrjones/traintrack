/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Direction', null, global);
goog.exportSymbol('proto.LineArrivals', null, global);
goog.exportSymbol('proto.StationStatus', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LineArrivals = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.LineArrivals.repeatedFields_, null);
};
goog.inherits(proto.LineArrivals, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LineArrivals.displayName = 'proto.LineArrivals';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.LineArrivals.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LineArrivals.prototype.toObject = function(opt_includeInstance) {
  return proto.LineArrivals.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LineArrivals} msg The msg instance to transform.
 * @return {!Object}
 */
proto.LineArrivals.toObject = function(includeInstance, msg) {
  var f, obj = {
    line: jspb.Message.getField(msg, 1),
    direction: jspb.Message.getField(msg, 2),
    timestampList: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LineArrivals}
 */
proto.LineArrivals.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LineArrivals;
  return proto.LineArrivals.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LineArrivals} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LineArrivals}
 */
proto.LineArrivals.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLine(value);
      break;
    case 2:
      var value = /** @type {!proto.Direction} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.addTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LineArrivals.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LineArrivals.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LineArrivals} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.LineArrivals.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!proto.Direction} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTimestampList();
  if (f.length > 0) {
    writer.writeRepeatedInt64(
      3,
      f
    );
  }
};


/**
 * optional string line = 1;
 * @return {string}
 */
proto.LineArrivals.prototype.getLine = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LineArrivals.prototype.setLine = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.LineArrivals.prototype.clearLine = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LineArrivals.prototype.hasLine = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Direction direction = 2;
 * @return {!proto.Direction}
 */
proto.LineArrivals.prototype.getDirection = function() {
  return /** @type {!proto.Direction} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.Direction} value */
proto.LineArrivals.prototype.setDirection = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.LineArrivals.prototype.clearDirection = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LineArrivals.prototype.hasDirection = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated int64 timestamp = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.LineArrivals.prototype.getTimestampList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 3));
};


/** @param {!Array.<number>} value */
proto.LineArrivals.prototype.setTimestampList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.LineArrivals.prototype.addTimestamp = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.LineArrivals.prototype.clearTimestampList = function() {
  this.setTimestampList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StationStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.StationStatus.repeatedFields_, null);
};
goog.inherits(proto.StationStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.StationStatus.displayName = 'proto.StationStatus';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.StationStatus.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StationStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.StationStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StationStatus} msg The msg instance to transform.
 * @return {!Object}
 */
proto.StationStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getField(msg, 1),
    lineList: jspb.Message.toObjectList(msg.getLineList(),
    proto.LineArrivals.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StationStatus}
 */
proto.StationStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StationStatus;
  return proto.StationStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StationStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StationStatus}
 */
proto.StationStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.LineArrivals;
      reader.readMessage(value,proto.LineArrivals.deserializeBinaryFromReader);
      msg.addLine(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StationStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StationStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StationStatus} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.StationStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLineList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.LineArrivals.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.StationStatus.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.StationStatus.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.StationStatus.prototype.clearName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StationStatus.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated LineArrivals line = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.LineArrivals>}
 */
proto.StationStatus.prototype.getLineList = function() {
  return /** @type{!Array.<!proto.LineArrivals>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.LineArrivals, 2));
};


/** @param {!Array.<!proto.LineArrivals>} value */
proto.StationStatus.prototype.setLineList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.LineArrivals=} opt_value
 * @param {number=} opt_index
 * @return {!proto.LineArrivals}
 */
proto.StationStatus.prototype.addLine = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.LineArrivals, opt_index);
};


proto.StationStatus.prototype.clearLineList = function() {
  this.setLineList([]);
};


/**
 * @enum {number}
 */
proto.Direction = {
  UPTOWN: 0,
  DOWNTOWN: 1
};

goog.object.extend(exports, proto);
