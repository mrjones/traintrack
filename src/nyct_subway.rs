// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(Clone,Default)]
pub struct TripReplacementPeriod {
    // message fields
    route_id: ::protobuf::SingularField<::std::string::String>,
    replacement_period: ::protobuf::SingularPtrField<super::gtfs_realtime::TimeRange>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for TripReplacementPeriod {}

impl TripReplacementPeriod {
    pub fn new() -> TripReplacementPeriod {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static TripReplacementPeriod {
        static mut instance: ::protobuf::lazy::Lazy<TripReplacementPeriod> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TripReplacementPeriod,
        };
        unsafe {
            instance.get(|| {
                TripReplacementPeriod {
                    route_id: ::protobuf::SingularField::none(),
                    replacement_period: ::protobuf::SingularPtrField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional string route_id = 1;

    pub fn clear_route_id(&mut self) {
        self.route_id.clear();
    }

    pub fn has_route_id(&self) -> bool {
        self.route_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_route_id(&mut self, v: ::std::string::String) {
        self.route_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_route_id(&mut self) -> &mut ::std::string::String {
        if self.route_id.is_none() {
            self.route_id.set_default();
        };
        self.route_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_route_id(&mut self) -> ::std::string::String {
        self.route_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_route_id(&self) -> &str {
        match self.route_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional .transit_realtime.TimeRange replacement_period = 2;

    pub fn clear_replacement_period(&mut self) {
        self.replacement_period.clear();
    }

    pub fn has_replacement_period(&self) -> bool {
        self.replacement_period.is_some()
    }

    // Param is passed by value, moved
    pub fn set_replacement_period(&mut self, v: super::gtfs_realtime::TimeRange) {
        self.replacement_period = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_replacement_period(&mut self) -> &mut super::gtfs_realtime::TimeRange {
        if self.replacement_period.is_none() {
            self.replacement_period.set_default();
        };
        self.replacement_period.as_mut().unwrap()
    }

    // Take field
    pub fn take_replacement_period(&mut self) -> super::gtfs_realtime::TimeRange {
        self.replacement_period.take().unwrap_or_else(|| super::gtfs_realtime::TimeRange::new())
    }

    pub fn get_replacement_period(&self) -> &super::gtfs_realtime::TimeRange {
        self.replacement_period.as_ref().unwrap_or_else(|| super::gtfs_realtime::TimeRange::default_instance())
    }
}

impl ::protobuf::Message for TripReplacementPeriod {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.route_id));
                },
                2 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.replacement_period));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.route_id {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in &self.replacement_period {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.route_id.as_ref() {
            try!(os.write_string(1, &v));
        };
        if let Some(v) = self.replacement_period.as_ref() {
            try!(os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<TripReplacementPeriod>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for TripReplacementPeriod {
    fn new() -> TripReplacementPeriod {
        TripReplacementPeriod::new()
    }

    fn descriptor_static(_: ::std::option::Option<TripReplacementPeriod>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "route_id",
                    TripReplacementPeriod::has_route_id,
                    TripReplacementPeriod::get_route_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "replacement_period",
                    TripReplacementPeriod::has_replacement_period,
                    TripReplacementPeriod::get_replacement_period,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TripReplacementPeriod>(
                    "TripReplacementPeriod",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for TripReplacementPeriod {
    fn clear(&mut self) {
        self.clear_route_id();
        self.clear_replacement_period();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for TripReplacementPeriod {
    fn eq(&self, other: &TripReplacementPeriod) -> bool {
        self.route_id == other.route_id &&
        self.replacement_period == other.replacement_period &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for TripReplacementPeriod {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct NyctFeedHeader {
    // message fields
    nyct_subway_version: ::protobuf::SingularField<::std::string::String>,
    trip_replacement_period: ::protobuf::RepeatedField<TripReplacementPeriod>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for NyctFeedHeader {}

impl NyctFeedHeader {
    pub fn new() -> NyctFeedHeader {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static NyctFeedHeader {
        static mut instance: ::protobuf::lazy::Lazy<NyctFeedHeader> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NyctFeedHeader,
        };
        unsafe {
            instance.get(|| {
                NyctFeedHeader {
                    nyct_subway_version: ::protobuf::SingularField::none(),
                    trip_replacement_period: ::protobuf::RepeatedField::new(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required string nyct_subway_version = 1;

    pub fn clear_nyct_subway_version(&mut self) {
        self.nyct_subway_version.clear();
    }

    pub fn has_nyct_subway_version(&self) -> bool {
        self.nyct_subway_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nyct_subway_version(&mut self, v: ::std::string::String) {
        self.nyct_subway_version = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nyct_subway_version(&mut self) -> &mut ::std::string::String {
        if self.nyct_subway_version.is_none() {
            self.nyct_subway_version.set_default();
        };
        self.nyct_subway_version.as_mut().unwrap()
    }

    // Take field
    pub fn take_nyct_subway_version(&mut self) -> ::std::string::String {
        self.nyct_subway_version.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_nyct_subway_version(&self) -> &str {
        match self.nyct_subway_version.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // repeated .TripReplacementPeriod trip_replacement_period = 2;

    pub fn clear_trip_replacement_period(&mut self) {
        self.trip_replacement_period.clear();
    }

    // Param is passed by value, moved
    pub fn set_trip_replacement_period(&mut self, v: ::protobuf::RepeatedField<TripReplacementPeriod>) {
        self.trip_replacement_period = v;
    }

    // Mutable pointer to the field.
    pub fn mut_trip_replacement_period(&mut self) -> &mut ::protobuf::RepeatedField<TripReplacementPeriod> {
        &mut self.trip_replacement_period
    }

    // Take field
    pub fn take_trip_replacement_period(&mut self) -> ::protobuf::RepeatedField<TripReplacementPeriod> {
        ::std::mem::replace(&mut self.trip_replacement_period, ::protobuf::RepeatedField::new())
    }

    pub fn get_trip_replacement_period(&self) -> &[TripReplacementPeriod] {
        &self.trip_replacement_period
    }
}

impl ::protobuf::Message for NyctFeedHeader {
    fn is_initialized(&self) -> bool {
        if self.nyct_subway_version.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.nyct_subway_version));
                },
                2 => {
                    try!(::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.trip_replacement_period));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.nyct_subway_version {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in &self.trip_replacement_period {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.nyct_subway_version.as_ref() {
            try!(os.write_string(1, &v));
        };
        for v in &self.trip_replacement_period {
            try!(os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<NyctFeedHeader>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for NyctFeedHeader {
    fn new() -> NyctFeedHeader {
        NyctFeedHeader::new()
    }

    fn descriptor_static(_: ::std::option::Option<NyctFeedHeader>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "nyct_subway_version",
                    NyctFeedHeader::has_nyct_subway_version,
                    NyctFeedHeader::get_nyct_subway_version,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_message_accessor(
                    "trip_replacement_period",
                    NyctFeedHeader::get_trip_replacement_period,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NyctFeedHeader>(
                    "NyctFeedHeader",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for NyctFeedHeader {
    fn clear(&mut self) {
        self.clear_nyct_subway_version();
        self.clear_trip_replacement_period();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for NyctFeedHeader {
    fn eq(&self, other: &NyctFeedHeader) -> bool {
        self.nyct_subway_version == other.nyct_subway_version &&
        self.trip_replacement_period == other.trip_replacement_period &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for NyctFeedHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct NyctTripDescriptor {
    // message fields
    train_id: ::protobuf::SingularField<::std::string::String>,
    is_assigned: ::std::option::Option<bool>,
    direction: ::std::option::Option<NyctTripDescriptor_Direction>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for NyctTripDescriptor {}

impl NyctTripDescriptor {
    pub fn new() -> NyctTripDescriptor {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static NyctTripDescriptor {
        static mut instance: ::protobuf::lazy::Lazy<NyctTripDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NyctTripDescriptor,
        };
        unsafe {
            instance.get(|| {
                NyctTripDescriptor {
                    train_id: ::protobuf::SingularField::none(),
                    is_assigned: ::std::option::Option::None,
                    direction: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional string train_id = 1;

    pub fn clear_train_id(&mut self) {
        self.train_id.clear();
    }

    pub fn has_train_id(&self) -> bool {
        self.train_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_train_id(&mut self, v: ::std::string::String) {
        self.train_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_train_id(&mut self) -> &mut ::std::string::String {
        if self.train_id.is_none() {
            self.train_id.set_default();
        };
        self.train_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_train_id(&mut self) -> ::std::string::String {
        self.train_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_train_id(&self) -> &str {
        match self.train_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional bool is_assigned = 2;

    pub fn clear_is_assigned(&mut self) {
        self.is_assigned = ::std::option::Option::None;
    }

    pub fn has_is_assigned(&self) -> bool {
        self.is_assigned.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_assigned(&mut self, v: bool) {
        self.is_assigned = ::std::option::Option::Some(v);
    }

    pub fn get_is_assigned(&self) -> bool {
        self.is_assigned.unwrap_or(false)
    }

    // optional .NyctTripDescriptor.Direction direction = 3;

    pub fn clear_direction(&mut self) {
        self.direction = ::std::option::Option::None;
    }

    pub fn has_direction(&self) -> bool {
        self.direction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_direction(&mut self, v: NyctTripDescriptor_Direction) {
        self.direction = ::std::option::Option::Some(v);
    }

    pub fn get_direction(&self) -> NyctTripDescriptor_Direction {
        self.direction.unwrap_or(NyctTripDescriptor_Direction::NORTH)
    }
}

impl ::protobuf::Message for NyctTripDescriptor {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.train_id));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_bool());
                    self.is_assigned = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_enum());
                    self.direction = ::std::option::Option::Some(tmp);
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.train_id {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        if self.is_assigned.is_some() {
            my_size += 2;
        };
        for value in &self.direction {
            my_size += ::protobuf::rt::enum_size(3, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.train_id.as_ref() {
            try!(os.write_string(1, &v));
        };
        if let Some(v) = self.is_assigned {
            try!(os.write_bool(2, v));
        };
        if let Some(v) = self.direction {
            try!(os.write_enum(3, v.value()));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<NyctTripDescriptor>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for NyctTripDescriptor {
    fn new() -> NyctTripDescriptor {
        NyctTripDescriptor::new()
    }

    fn descriptor_static(_: ::std::option::Option<NyctTripDescriptor>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "train_id",
                    NyctTripDescriptor::has_train_id,
                    NyctTripDescriptor::get_train_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor(
                    "is_assigned",
                    NyctTripDescriptor::has_is_assigned,
                    NyctTripDescriptor::get_is_assigned,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor(
                    "direction",
                    NyctTripDescriptor::has_direction,
                    NyctTripDescriptor::get_direction,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NyctTripDescriptor>(
                    "NyctTripDescriptor",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for NyctTripDescriptor {
    fn clear(&mut self) {
        self.clear_train_id();
        self.clear_is_assigned();
        self.clear_direction();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for NyctTripDescriptor {
    fn eq(&self, other: &NyctTripDescriptor) -> bool {
        self.train_id == other.train_id &&
        self.is_assigned == other.is_assigned &&
        self.direction == other.direction &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for NyctTripDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum NyctTripDescriptor_Direction {
    NORTH = 1,
    EAST = 2,
    SOUTH = 3,
    WEST = 4,
}

impl ::protobuf::ProtobufEnum for NyctTripDescriptor_Direction {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<NyctTripDescriptor_Direction> {
        match value {
            1 => ::std::option::Option::Some(NyctTripDescriptor_Direction::NORTH),
            2 => ::std::option::Option::Some(NyctTripDescriptor_Direction::EAST),
            3 => ::std::option::Option::Some(NyctTripDescriptor_Direction::SOUTH),
            4 => ::std::option::Option::Some(NyctTripDescriptor_Direction::WEST),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [NyctTripDescriptor_Direction] = &[
            NyctTripDescriptor_Direction::NORTH,
            NyctTripDescriptor_Direction::EAST,
            NyctTripDescriptor_Direction::SOUTH,
            NyctTripDescriptor_Direction::WEST,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<NyctTripDescriptor_Direction>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("NyctTripDescriptor_Direction", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for NyctTripDescriptor_Direction {
}

#[derive(Clone,Default)]
pub struct NyctStopTimeUpdate {
    // message fields
    scheduled_track: ::protobuf::SingularField<::std::string::String>,
    actual_track: ::protobuf::SingularField<::std::string::String>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for NyctStopTimeUpdate {}

impl NyctStopTimeUpdate {
    pub fn new() -> NyctStopTimeUpdate {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static NyctStopTimeUpdate {
        static mut instance: ::protobuf::lazy::Lazy<NyctStopTimeUpdate> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NyctStopTimeUpdate,
        };
        unsafe {
            instance.get(|| {
                NyctStopTimeUpdate {
                    scheduled_track: ::protobuf::SingularField::none(),
                    actual_track: ::protobuf::SingularField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional string scheduled_track = 1;

    pub fn clear_scheduled_track(&mut self) {
        self.scheduled_track.clear();
    }

    pub fn has_scheduled_track(&self) -> bool {
        self.scheduled_track.is_some()
    }

    // Param is passed by value, moved
    pub fn set_scheduled_track(&mut self, v: ::std::string::String) {
        self.scheduled_track = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scheduled_track(&mut self) -> &mut ::std::string::String {
        if self.scheduled_track.is_none() {
            self.scheduled_track.set_default();
        };
        self.scheduled_track.as_mut().unwrap()
    }

    // Take field
    pub fn take_scheduled_track(&mut self) -> ::std::string::String {
        self.scheduled_track.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_scheduled_track(&self) -> &str {
        match self.scheduled_track.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string actual_track = 2;

    pub fn clear_actual_track(&mut self) {
        self.actual_track.clear();
    }

    pub fn has_actual_track(&self) -> bool {
        self.actual_track.is_some()
    }

    // Param is passed by value, moved
    pub fn set_actual_track(&mut self, v: ::std::string::String) {
        self.actual_track = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_actual_track(&mut self) -> &mut ::std::string::String {
        if self.actual_track.is_none() {
            self.actual_track.set_default();
        };
        self.actual_track.as_mut().unwrap()
    }

    // Take field
    pub fn take_actual_track(&mut self) -> ::std::string::String {
        self.actual_track.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_actual_track(&self) -> &str {
        match self.actual_track.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
}

impl ::protobuf::Message for NyctStopTimeUpdate {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.scheduled_track));
                },
                2 => {
                    try!(::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.actual_track));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.scheduled_track {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in &self.actual_track {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.scheduled_track.as_ref() {
            try!(os.write_string(1, &v));
        };
        if let Some(v) = self.actual_track.as_ref() {
            try!(os.write_string(2, &v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<NyctStopTimeUpdate>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for NyctStopTimeUpdate {
    fn new() -> NyctStopTimeUpdate {
        NyctStopTimeUpdate::new()
    }

    fn descriptor_static(_: ::std::option::Option<NyctStopTimeUpdate>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "scheduled_track",
                    NyctStopTimeUpdate::has_scheduled_track,
                    NyctStopTimeUpdate::get_scheduled_track,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "actual_track",
                    NyctStopTimeUpdate::has_actual_track,
                    NyctStopTimeUpdate::get_actual_track,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NyctStopTimeUpdate>(
                    "NyctStopTimeUpdate",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for NyctStopTimeUpdate {
    fn clear(&mut self) {
        self.clear_scheduled_track();
        self.clear_actual_track();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for NyctStopTimeUpdate {
    fn eq(&self, other: &NyctStopTimeUpdate) -> bool {
        self.scheduled_track == other.scheduled_track &&
        self.actual_track == other.actual_track &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for NyctStopTimeUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x11, 0x6e, 0x79, 0x63, 0x74, 0x2d, 0x73, 0x75, 0x62, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x67, 0x74, 0x66, 0x73, 0x2d, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69,
    0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7e, 0x0a, 0x15, 0x54, 0x72, 0x69, 0x70,
    0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f,
    0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
    0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x12,
    0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69,
    0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
    0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65,
    0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
    0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x0e, 0x4e, 0x79, 0x63,
    0x74, 0x46, 0x65, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x6e,
    0x79, 0x63, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x77, 0x61, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
    0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x79, 0x63, 0x74, 0x53, 0x75,
    0x62, 0x77, 0x61, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x17, 0x74,
    0x72, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
    0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54,
    0x72, 0x69, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65,
    0x72, 0x69, 0x6f, 0x64, 0x52, 0x15, 0x74, 0x72, 0x69, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
    0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0xc4, 0x01, 0x0a, 0x12,
    0x4e, 0x79, 0x63, 0x74, 0x54, 0x72, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
    0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
    0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a,
    0x0b, 0x69, 0x73, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
    0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x3b,
    0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
    0x0e, 0x32, 0x1d, 0x2e, 0x4e, 0x79, 0x63, 0x74, 0x54, 0x72, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63,
    0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
    0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x09, 0x44,
    0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x4f, 0x52, 0x54,
    0x48, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x41, 0x53, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a,
    0x05, 0x53, 0x4f, 0x55, 0x54, 0x48, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x45, 0x53, 0x54,
    0x10, 0x04, 0x22, 0x60, 0x0a, 0x12, 0x4e, 0x79, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69,
    0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65,
    0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
    0x09, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63,
    0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x63,
    0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x54,
    0x72, 0x61, 0x63, 0x6b, 0x3a, 0x58, 0x0a, 0x10, 0x6e, 0x79, 0x63, 0x74, 0x5f, 0x66, 0x65, 0x65,
    0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
    0x0f, 0x2e, 0x4e, 0x79, 0x63, 0x74, 0x46, 0x65, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
    0x12, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74,
    0x69, 0x6d, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e,
    0x6e, 0x79, 0x63, 0x74, 0x46, 0x65, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x3a, 0x68,
    0x0a, 0x14, 0x6e, 0x79, 0x63, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x63,
    0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
    0x4e, 0x79, 0x63, 0x74, 0x54, 0x72, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
    0x6f, 0x72, 0x12, 0x20, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61,
    0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
    0x70, 0x74, 0x6f, 0x72, 0x52, 0x12, 0x6e, 0x79, 0x63, 0x74, 0x54, 0x72, 0x69, 0x70, 0x44, 0x65,
    0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x3a, 0x74, 0x0a, 0x15, 0x6e, 0x79, 0x63, 0x74,
    0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
    0x65, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4e, 0x79, 0x63, 0x74, 0x53,
    0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e,
    0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65,
    0x2e, 0x54, 0x72, 0x69, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x70,
    0x54, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x12, 0x6e, 0x79, 0x63, 0x74,
    0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x1d,
    0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x72, 0x61,
    0x6e, 0x73, 0x69, 0x74, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x4a, 0xe5, 0x2a,
    0x0a, 0x07, 0x12, 0x05, 0x03, 0x00, 0x86, 0x01, 0x01, 0x0a, 0x47, 0x0a, 0x01, 0x0c, 0x12, 0x03,
    0x03, 0x00, 0x12, 0x1a, 0x3d, 0x0d, 0x0a, 0x20, 0x4e, 0x59, 0x43, 0x54, 0x20, 0x53, 0x75, 0x62,
    0x77, 0x61, 0x79, 0x20, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x66,
    0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x47, 0x54, 0x46, 0x53, 0x2d, 0x72, 0x65, 0x61, 0x6c,
    0x74, 0x69, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x0d, 0x0a,
    0x0d, 0x0a, 0x0a, 0x08, 0x0a, 0x01, 0x08, 0x12, 0x03, 0x04, 0x00, 0x34, 0x0a, 0x0b, 0x0a, 0x04,
    0x08, 0xe7, 0x07, 0x00, 0x12, 0x03, 0x04, 0x00, 0x34, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07,
    0x00, 0x02, 0x12, 0x03, 0x04, 0x07, 0x13, 0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07, 0x00, 0x02,
    0x00, 0x12, 0x03, 0x04, 0x07, 0x13, 0x0a, 0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00,
    0x01, 0x12, 0x03, 0x04, 0x07, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x00, 0x07, 0x12,
    0x03, 0x04, 0x16, 0x33, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x00, 0x12, 0x03, 0x06, 0x07, 0x1c, 0x0a,
    0x0a, 0x0a, 0x02, 0x04, 0x00, 0x12, 0x04, 0x08, 0x00, 0x0e, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04,
    0x00, 0x01, 0x12, 0x03, 0x08, 0x08, 0x1d, 0x0a, 0x38, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12,
    0x03, 0x0a, 0x02, 0x1f, 0x1a, 0x2b, 0x20, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x61,
    0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x20, 0x69, 0x73,
    0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x0d,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x04, 0x12, 0x03, 0x0a, 0x02, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x05, 0x12, 0x03, 0x0a, 0x0b, 0x11, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x0a, 0x12, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x0a, 0x1d, 0x1e, 0x0a, 0x78, 0x0a, 0x04, 0x04, 0x00, 0x02,
    0x01, 0x12, 0x03, 0x0d, 0x02, 0x3d, 0x1a, 0x6b, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61,
    0x72, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6f, 0x6d, 0x69, 0x74, 0x74,
    0x65, 0x64, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x74, 0x69, 0x6d, 0x65,
    0x20, 0x69, 0x73, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x6e, 0x6f,
    0x77, 0x20, 0x2b, 0x20, 0x33, 0x30, 0x20, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x20, 0x66,
    0x6f, 0x72, 0x0d, 0x0a, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x20,
    0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x20, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
    0x6e, 0x0d, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x04, 0x12, 0x03, 0x0d, 0x02,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x06, 0x12, 0x03, 0x0d, 0x0b, 0x25, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x0d, 0x26, 0x38, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x0d, 0x3b, 0x3c, 0x0a, 0x39, 0x0a, 0x02, 0x04,
    0x01, 0x12, 0x04, 0x11, 0x00, 0x1e, 0x01, 0x1a, 0x2d, 0x20, 0x4e, 0x59, 0x43, 0x54, 0x20, 0x53,
    0x75, 0x62, 0x77, 0x61, 0x79, 0x20, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
    0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x65, 0x65, 0x64, 0x20, 0x68, 0x65,
    0x61, 0x64, 0x65, 0x72, 0x0d, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x01, 0x01, 0x12, 0x03, 0x11,
    0x08, 0x16, 0x0a, 0x52, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x00, 0x12, 0x03, 0x14, 0x02, 0x2a, 0x1a,
    0x45, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x4e, 0x59, 0x43, 0x54, 0x20, 0x53, 0x75, 0x62, 0x77, 0x61, 0x79, 0x20, 0x65, 0x78, 0x74,
    0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x0d, 0x0a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x63, 0x75,
    0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73,
    0x20, 0x31, 0x2e, 0x30, 0x0d, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x04, 0x12,
    0x03, 0x14, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x05, 0x12, 0x03, 0x14,
    0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x14, 0x12, 0x25,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x03, 0x12, 0x03, 0x14, 0x28, 0x29, 0x0a, 0x82,
    0x04, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x01, 0x12, 0x03, 0x1d, 0x02, 0x3d, 0x1a, 0xf4, 0x03, 0x20,
    0x46, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4e, 0x59, 0x43, 0x54, 0x20, 0x53, 0x75, 0x62,
    0x77, 0x61, 0x79, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x47, 0x54, 0x46, 0x53, 0x2d, 0x72, 0x65,
    0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x66, 0x65, 0x65, 0x64, 0x20, 0x72, 0x65, 0x70, 0x6c,
    0x61, 0x63, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
    0x65, 0x64, 0x0d, 0x0a, 0x20, 0x74, 0x72, 0x69, 0x70, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
    0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x2e, 0x0d, 0x0a, 0x20,
    0x54, 0x68, 0x69, 0x73, 0x20, 0x66, 0x65, 0x65, 0x64, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x66,
    0x75, 0x6c, 0x6c, 0x20, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x69, 0x74, 0x20,
    0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x72, 0x69,
    0x70, 0x73, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x0d, 0x0a, 0x20, 0x69, 0x6e,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
    0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x2e, 0x20, 0x49, 0x66,
    0x20, 0x61, 0x20, 0x74, 0x72, 0x69, 0x70, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x47, 0x54, 0x46, 0x53, 0x20, 0x69, 0x73, 0x20,
    0x6e, 0x6f, 0x74, 0x0d, 0x0a, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x47, 0x54, 0x46, 0x53, 0x2d, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65,
    0x20, 0x66, 0x65, 0x65, 0x64, 0x2c, 0x20, 0x69, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
    0x20, 0x62, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x20, 0x61,
    0x73, 0x20, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x2e, 0x0d, 0x0a, 0x20, 0x54,
    0x68, 0x65, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x70,
    0x65, 0x72, 0x69, 0x6f, 0x64, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x64, 0x69, 0x66,
    0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20,
    0x72, 0x6f, 0x75, 0x74, 0x65, 0x2c, 0x20, 0x73, 0x6f, 0x20, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69,
    0x73, 0x0d, 0x0a, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x74, 0x72, 0x69, 0x70, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x66, 0x65, 0x65, 0x64, 0x20, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x61, 0x6c, 0x6c,
    0x0d, 0x0a, 0x20, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x72, 0x69,
    0x70, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
    0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
    0x2e, 0x0d, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x04, 0x12, 0x03, 0x1d, 0x02,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x06, 0x12, 0x03, 0x1d, 0x0b, 0x20, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x01, 0x12, 0x03, 0x1d, 0x21, 0x38, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x01, 0x02, 0x01, 0x03, 0x12, 0x03, 0x1d, 0x3b, 0x3c, 0x0a, 0x09, 0x0a, 0x01, 0x07,
    0x12, 0x04, 0x20, 0x00, 0x22, 0x01, 0x0a, 0x09, 0x0a, 0x02, 0x07, 0x00, 0x12, 0x03, 0x21, 0x01,
    0x31, 0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x00, 0x02, 0x12, 0x03, 0x20, 0x07, 0x22, 0x0a, 0x0a, 0x0a,
    0x03, 0x07, 0x00, 0x04, 0x12, 0x03, 0x21, 0x01, 0x09, 0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x00, 0x06,
    0x12, 0x03, 0x21, 0x0a, 0x18, 0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x00, 0x01, 0x12, 0x03, 0x21, 0x19,
    0x29, 0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x00, 0x03, 0x12, 0x03, 0x21, 0x2c, 0x30, 0x0a, 0x3d, 0x0a,
    0x02, 0x04, 0x02, 0x12, 0x04, 0x25, 0x00, 0x5b, 0x01, 0x1a, 0x31, 0x20, 0x4e, 0x59, 0x43, 0x54,
    0x20, 0x53, 0x75, 0x62, 0x77, 0x61, 0x79, 0x20, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
    0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72, 0x69, 0x70, 0x20,
    0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x0d, 0x0a, 0x0a, 0x0a, 0x0a, 0x03,
    0x04, 0x02, 0x01, 0x12, 0x03, 0x25, 0x08, 0x1a, 0x0a, 0x9c, 0x08, 0x0a, 0x04, 0x04, 0x02, 0x02,
    0x00, 0x12, 0x03, 0x3b, 0x02, 0x1f, 0x1a, 0x8e, 0x08, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x79,
    0x63, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x20, 0x69, 0x73, 0x20, 0x6d,
    0x65, 0x61, 0x6e, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
    0x6c, 0x20, 0x75, 0x73, 0x65, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x2e, 0x20, 0x49, 0x74, 0x20, 0x70,
    0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x0d, 0x0a, 0x20, 0x65, 0x61, 0x73,
    0x79, 0x20, 0x77, 0x61, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
    0x74, 0x65, 0x64, 0x20, 0x47, 0x54, 0x46, 0x53, 0x2d, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d,
    0x65, 0x20, 0x74, 0x72, 0x69, 0x70, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
    0x72, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x4e, 0x59, 0x43, 0x54, 0x20, 0x72, 0x61, 0x69,
    0x6c, 0x0d, 0x0a, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x69,
    0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x54, 0x68,
    0x65, 0x20, 0x41, 0x54, 0x53, 0x20, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x20, 0x73, 0x79, 0x73,
    0x74, 0x65, 0x6d, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x20, 0x75, 0x6e, 0x69, 0x71,
    0x75, 0x65, 0x20, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
    0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x20, 0x49,
    0x44, 0x29, 0x20, 0x74, 0x6f, 0x0d, 0x0a, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x74, 0x72, 0x61,
    0x69, 0x6e, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74,
    0x68, 0x69, 0x6e, 0x20, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x74, 0x6f, 0x20,
    0x65, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x6c, 0x69,
    0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x0d, 0x0a, 0x20, 0x6d, 0x6f, 0x6e, 0x69,
    0x74, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e,
    0x20, 0x41, 0x6e, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74,
    0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x30, 0x36, 0x20, 0x30, 0x31, 0x32, 0x33, 0x2b, 0x20,
    0x50, 0x45, 0x4c, 0x2f, 0x42, 0x42, 0x52, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x73, 0x20, 0x64,
    0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x0d, 0x0a, 0x20, 0x61, 0x73, 0x20, 0x66, 0x6f, 0x6c, 0x6c,
    0x6f, 0x77, 0x73, 0x3a, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72,
    0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x20, 0x72, 0x65, 0x70,
    0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72, 0x69, 0x70,
    0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72,
    0x2e, 0x20, 0x30, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x20, 0x61,
    0x0d, 0x0a, 0x20, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x20, 0x72, 0x65, 0x76,
    0x65, 0x6e, 0x75, 0x65, 0x20, 0x74, 0x72, 0x69, 0x70, 0x2e, 0x20, 0x4f, 0x74, 0x68, 0x65, 0x72,
    0x20, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x20, 0x74, 0x72, 0x69, 0x70, 0x20, 0x76, 0x61,
    0x6c, 0x75, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61, 0x20,
    0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x0d, 0x0a, 0x20, 0x63, 0x68,
    0x61, 0x6e, 0x67, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x61, 0x73, 0x65,
    0x20, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
    0x65, 0x3b, 0x20, 0x5b, 0x3d, 0x20, 0x72, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5d, 0x2c, 0x20,
    0x5b, 0x2f, 0x20, 0x73, 0x6b, 0x69, 0x70, 0x20, 0x73, 0x74, 0x6f, 0x70, 0x5d, 0x2c, 0x20, 0x5b,
    0x24, 0x20, 0x74, 0x75, 0x72, 0x6e, 0x0d, 0x0a, 0x20, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5d, 0x20,
    0x61, 0x6c, 0x73, 0x6f, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73, 0x20, 0x73, 0x68,
    0x6f, 0x72, 0x74, 0x6c, 0x79, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x73, 0x65, 0x72, 0x76,
    0x69, 0x63, 0x65, 0x2e, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73, 0x65, 0x63,
    0x6f, 0x6e, 0x64, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x20, 0x36, 0x20,
    0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74,
    0x72, 0x69, 0x70, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x69, 0x2e, 0x65, 0x2e, 0x20, 0x6e, 0x75,
    0x6d, 0x62, 0x65, 0x72, 0x20, 0x36, 0x20, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x20, 0x54, 0x68, 0x65,
    0x0d, 0x0a, 0x20, 0x74, 0x68, 0x69, 0x72, 0x64, 0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20,
    0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74,
    0x69, 0x66, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x20,
    0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x20, 0x54, 0x68, 0x65,
    0x20, 0x6c, 0x61, 0x73, 0x74, 0x0d, 0x0a, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
    0x72, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x62, 0x65, 0x20, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x20, 0x22,
    0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x20, 0x6d, 0x69, 0x6e,
    0x75, 0x74, 0x65, 0x22, 0x20, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x22, 0x33, 0x30, 0x20, 0x73, 0x65,
    0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x4e, 0x6f, 0x74, 0x65, 0x3a,
    0x20, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x20, 0x77, 0x69,
    0x6c, 0x6c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x77, 0x68,
    0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x74, 0x72,
    0x69, 0x70, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x20,
    0x20, 0x54, 0x68, 0x69, 0x73, 0x0d, 0x0a, 0x20, 0x69, 0x73, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
    0x77, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x61, 0x20, 0x74, 0x68, 0x72, 0x65, 0x65, 0x20, 0x63,
    0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x20, 0x22, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
    0x20, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x20, 0x2f, 0x20, 0x22, 0x44, 0x65,
    0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0d, 0x0a, 0x20, 0x4c, 0x6f, 0x63, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0d, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x04,
    0x12, 0x03, 0x3b, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x05, 0x12, 0x03,
    0x3b, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x01, 0x12, 0x03, 0x3b, 0x12,
    0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x03, 0x12, 0x03, 0x3b, 0x1d, 0x1e, 0x0a,
    0xea, 0x05, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x01, 0x12, 0x03, 0x4a, 0x02, 0x20, 0x1a, 0xdc, 0x05,
    0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x74, 0x72, 0x69, 0x70, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62,
    0x65, 0x65, 0x6e, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
    0x61, 0x20, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x74, 0x72, 0x61, 0x69, 0x6e,
    0x2e, 0x20, 0x49, 0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
    0x74, 0x72, 0x69, 0x70, 0x20, 0x69, 0x73, 0x0d, 0x0a, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64,
    0x79, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x77, 0x61, 0x79, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x6f,
    0x73, 0x74, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x64,
    0x65, 0x70, 0x61, 0x72, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x79, 0x2e, 0x0d, 0x0a,
    0x0d, 0x0a, 0x20, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x20, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
    0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
    0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
    0x69, 0x63, 0x20, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x20, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
    0x73, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x41, 0x54, 0x53, 0x29, 0x0d, 0x0a, 0x20, 0x6f, 0x66, 0x66,
    0x69, 0x63, 0x65, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20,
    0x62, 0x79, 0x20, 0x4e, 0x59, 0x43, 0x54, 0x20, 0x52, 0x61, 0x69, 0x6c, 0x20, 0x4f, 0x70, 0x65,
    0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
    0x6f, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x20, 0x74, 0x72, 0x61,
    0x69, 0x6e, 0x0d, 0x0a, 0x20, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x20,
    0x41, 0x54, 0x53, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x22, 0x61, 0x73, 0x73,
    0x69, 0x67, 0x6e, 0x22, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x79, 0x63, 0x74, 0x5f, 0x74, 0x72,
    0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x0d, 0x0a, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
    0x74, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x20, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
    0x61, 0x6c, 0x20, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x61, 0x74, 0x20, 0x69,
    0x74, 0x73, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
    0x61, 0x6c, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x73, 0x65, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
    0x65, 0x64, 0x0d, 0x0a, 0x20, 0x74, 0x72, 0x69, 0x70, 0x73, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x69, 0x73, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20,
    0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x73, 0x65, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x54, 0x72, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e,
    0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x57, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x20, 0x74, 0x72, 0x61, 0x69,
    0x6e, 0x20, 0x69, 0x73, 0x20, 0x61, 0x74, 0x20, 0x61, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
    0x61, 0x6c, 0x20, 0x62, 0x75, 0x74, 0x20, 0x68, 0x61, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62,
    0x65, 0x65, 0x6e, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x61, 0x20, 0x77, 0x6f, 0x72, 0x6b,
    0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x0d, 0x0a,
    0x20, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x20, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69,
    0x67, 0x6e, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x73, 0x20, 0x74, 0x61, 0x67, 0x67,
    0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x73, 0x75, 0x63, 0x68, 0x2e, 0x20, 0x55, 0x6e, 0x61, 0x73,
    0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x63, 0x61,
    0x6e, 0x20, 0x62, 0x65, 0x20, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x0d, 0x0a, 0x20, 0x74, 0x6f, 0x20,
    0x61, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
    0x6f, 0x6e, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x61,
    0x20, 0x6e, 0x79, 0x63, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x20, 0x77,
    0x68, 0x65, 0x6e, 0x20, 0x61, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
    0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x0d, 0x0a, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
    0x65, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x2e, 0x0d, 0x0a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x02, 0x02, 0x01, 0x04, 0x12, 0x03, 0x4a, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02,
    0x02, 0x01, 0x05, 0x12, 0x03, 0x4a, 0x0b, 0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01,
    0x01, 0x12, 0x03, 0x4a, 0x10, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01, 0x03, 0x12,
    0x03, 0x4a, 0x1e, 0x1f, 0x0a, 0x33, 0x0a, 0x04, 0x04, 0x02, 0x04, 0x00, 0x12, 0x04, 0x4d, 0x02,
    0x52, 0x03, 0x1a, 0x25, 0x20, 0x54, 0x68, 0x65, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
    0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x20, 0x69, 0x73, 0x20,
    0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x0d, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x04,
    0x00, 0x01, 0x12, 0x03, 0x4d, 0x07, 0x10, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x02, 0x04, 0x00, 0x02,
    0x00, 0x12, 0x03, 0x4e, 0x04, 0x0e, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x00, 0x02, 0x00,
    0x01, 0x12, 0x03, 0x4e, 0x04, 0x09, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x00, 0x02, 0x00,
    0x02, 0x12, 0x03, 0x4e, 0x0c, 0x0d, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x02, 0x04, 0x00, 0x02, 0x01,
    0x12, 0x03, 0x4f, 0x04, 0x0d, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x00, 0x02, 0x01, 0x01,
    0x12, 0x03, 0x4f, 0x04, 0x08, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x00, 0x02, 0x01, 0x02,
    0x12, 0x03, 0x4f, 0x0b, 0x0c, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x02, 0x04, 0x00, 0x02, 0x02, 0x12,
    0x03, 0x50, 0x04, 0x0e, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12,
    0x03, 0x50, 0x04, 0x09, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x00, 0x02, 0x02, 0x02, 0x12,
    0x03, 0x50, 0x0c, 0x0d, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x02, 0x04, 0x00, 0x02, 0x03, 0x12, 0x03,
    0x51, 0x04, 0x0d, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x00, 0x02, 0x03, 0x01, 0x12, 0x03,
    0x51, 0x04, 0x08, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x00, 0x02, 0x03, 0x02, 0x12, 0x03,
    0x51, 0x0b, 0x0c, 0x0a, 0x9a, 0x02, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x02, 0x12, 0x03, 0x5a, 0x02,
    0x23, 0x1a, 0x8c, 0x02, 0x20, 0x55, 0x70, 0x74, 0x6f, 0x77, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20,
    0x42, 0x72, 0x6f, 0x6e, 0x78, 0x2d, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x74, 0x72, 0x61, 0x69,
    0x6e, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x4e, 0x4f,
    0x52, 0x54, 0x48, 0x2e, 0x0d, 0x0a, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x20, 0x53, 0x71, 0x75,
    0x61, 0x72, 0x65, 0x20, 0x53, 0x68, 0x75, 0x74, 0x74, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x47,
    0x72, 0x61, 0x6e, 0x64, 0x20, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x20, 0x69, 0x73, 0x20,
    0x61, 0x6c, 0x73, 0x6f, 0x20, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e,
    0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x44, 0x6f, 0x77, 0x6e, 0x74, 0x6f, 0x77, 0x6e, 0x20, 0x61, 0x6e,
    0x64, 0x20, 0x42, 0x72, 0x6f, 0x6f, 0x6b, 0x6c, 0x79, 0x6e, 0x2d, 0x62, 0x6f, 0x75, 0x6e, 0x64,
    0x20, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6d, 0x6f, 0x76, 0x69,
    0x6e, 0x67, 0x20, 0x53, 0x4f, 0x55, 0x54, 0x48, 0x2e, 0x0d, 0x0a, 0x20, 0x54, 0x69, 0x6d, 0x65,
    0x73, 0x20, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x20, 0x53, 0x68, 0x75, 0x74, 0x74, 0x6c, 0x65,
    0x20, 0x74, 0x6f, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x20, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65,
    0x20, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x62, 0x6f,
    0x75, 0x6e, 0x64, 0x2e, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x45, 0x41, 0x53, 0x54, 0x20, 0x61, 0x6e,
    0x64, 0x20, 0x57, 0x45, 0x53, 0x54, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x75,
    0x73, 0x65, 0x64, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x2e, 0x0d, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x04, 0x12, 0x03, 0x5a, 0x02, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x06, 0x12, 0x03, 0x5a, 0x0b, 0x14, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x02, 0x02, 0x02, 0x01, 0x12, 0x03, 0x5a, 0x15, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02,
    0x02, 0x02, 0x03, 0x12, 0x03, 0x5a, 0x21, 0x22, 0x0a, 0x09, 0x0a, 0x01, 0x07, 0x12, 0x04, 0x5d,
    0x00, 0x5f, 0x01, 0x0a, 0x09, 0x0a, 0x02, 0x07, 0x01, 0x12, 0x03, 0x5e, 0x02, 0x3a, 0x0a, 0x0a,
    0x0a, 0x03, 0x07, 0x01, 0x02, 0x12, 0x03, 0x5d, 0x07, 0x26, 0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x01,
    0x04, 0x12, 0x03, 0x5e, 0x02, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x01, 0x06, 0x12, 0x03, 0x5e,
    0x0b, 0x1d, 0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x01, 0x01, 0x12, 0x03, 0x5e, 0x1e, 0x32, 0x0a, 0x0a,
    0x0a, 0x03, 0x07, 0x01, 0x03, 0x12, 0x03, 0x5e, 0x35, 0x39, 0x0a, 0x3f, 0x0a, 0x02, 0x04, 0x03,
    0x12, 0x05, 0x62, 0x00, 0x82, 0x01, 0x01, 0x1a, 0x32, 0x20, 0x4e, 0x59, 0x43, 0x54, 0x20, 0x53,
    0x75, 0x62, 0x77, 0x61, 0x79, 0x20, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
    0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x6f, 0x70, 0x20, 0x74, 0x69,
    0x6d, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x0d, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04,
    0x03, 0x01, 0x12, 0x03, 0x62, 0x08, 0x1a, 0x0a, 0xa8, 0x03, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x00,
    0x12, 0x03, 0x72, 0x02, 0x26, 0x1a, 0x9a, 0x03, 0x20, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
    0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x20, 0x73, 0x74,
    0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x20, 0x74, 0x72,
    0x61, 0x63, 0x6b, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69,
    0x6e, 0x67, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4d, 0x61, 0x6e, 0x68, 0x61, 0x74,
    0x74, 0x61, 0x6e, 0x0d, 0x0a, 0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x20, 0x63, 0x6f, 0x6e, 0x66,
    0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x0d, 0x0a, 0x20, 0x31, 0x3a,
    0x20, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x6c, 0x6f, 0x63, 0x61,
    0x6c, 0x0d, 0x0a, 0x20, 0x32, 0x3a, 0x20, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e,
    0x64, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x0d, 0x0a, 0x20, 0x33, 0x3a, 0x20, 0x6e,
    0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
    0x73, 0x0d, 0x0a, 0x20, 0x34, 0x3a, 0x20, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e,
    0x64, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x49, 0x6e, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x42, 0x72, 0x6f, 0x6e, 0x78, 0x20, 0x28, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74,
    0x20, 0x44, 0x79, 0x72, 0x65, 0x20, 0x41, 0x76, 0x65, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x29, 0x0d,
    0x0a, 0x20, 0x4d, 0x3a, 0x20, 0x62, 0x69, 0x2d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
    0x6e, 0x61, 0x6c, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x20, 0x28, 0x69, 0x6e, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x41, 0x4d, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x20, 0x74,
    0x6f, 0x20, 0x4d, 0x61, 0x6e, 0x68, 0x61, 0x74, 0x74, 0x61, 0x6e, 0x2c, 0x20, 0x69, 0x6e, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x50, 0x4d, 0x0d, 0x0a, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
    0x20, 0x61, 0x77, 0x61, 0x79, 0x29, 0x2e, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x54, 0x68, 0x65, 0x20,
    0x44, 0x79, 0x72, 0x65, 0x20, 0x41, 0x76, 0x65, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x69, 0x73,
    0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x3a, 0x0d, 0x0a, 0x20, 0x31,
    0x3a, 0x20, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x0d, 0x0a, 0x20, 0x32,
    0x3a, 0x20, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x0d, 0x0a, 0x20, 0x33,
    0x3a, 0x20, 0x62, 0x69, 0x2d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
    0x0d, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x04, 0x12, 0x03, 0x72, 0x02, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x05, 0x12, 0x03, 0x72, 0x0b, 0x11, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x01, 0x12, 0x03, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x03, 0x02, 0x00, 0x03, 0x12, 0x03, 0x72, 0x24, 0x25, 0x0a, 0xe2, 0x05, 0x0a, 0x04, 0x04,
    0x03, 0x02, 0x01, 0x12, 0x04, 0x81, 0x01, 0x02, 0x23, 0x1a, 0xd3, 0x05, 0x20, 0x54, 0x68, 0x69,
    0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x20,
    0x74, 0x72, 0x61, 0x63, 0x6b, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74,
    0x72, 0x61, 0x69, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e,
    0x67, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20,
    0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x0d, 0x0a, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
    0x69, 0x6e, 0x65, 0x20, 0x69, 0x66, 0x20, 0x61, 0x20, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x20, 0x69,
    0x73, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x63, 0x63, 0x6f,
    0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x74, 0x73, 0x20, 0x63, 0x75, 0x72,
    0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x0d, 0x0a, 0x20,
    0x28, 0x70, 0x6c, 0x61, 0x6e, 0x29, 0x2e, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x54, 0x68, 0x65, 0x20,
    0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x20, 0x69, 0x73, 0x20,
    0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x73, 0x68, 0x6f, 0x72, 0x74,
    0x6c, 0x79, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72,
    0x61, 0x69, 0x6e, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x20, 0x61, 0x20, 0x73, 0x74,
    0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x0d, 0x0a, 0x20, 0x74, 0x79, 0x70, 0x69, 0x63, 0x61, 0x6c,
    0x6c, 0x79, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x69, 0x74,
    0x20, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x65, 0x76,
    0x69, 0x6f, 0x75, 0x73, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x54, 0x68,
    0x65, 0x72, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4e, 0x59, 0x43,
    0x54, 0x0d, 0x0a, 0x20, 0x66, 0x65, 0x65, 0x64, 0x20, 0x73, 0x65, 0x74, 0x73, 0x20, 0x74, 0x68,
    0x69, 0x73, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x66, 0x6f,
    0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74,
    0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69,
    0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x72, 0x69, 0x70, 0x2e, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x44,
    0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x20,
    0x61, 0x6e, 0x64, 0x20, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x72,
    0x61, 0x63, 0x6b, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c,
    0x74, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x72, 0x65,
    0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x0d, 0x0a, 0x20, 0x74, 0x72, 0x61, 0x69,
    0x6e, 0x20, 0x6f, 0x66, 0x66, 0x20, 0x69, 0x74, 0x20, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
    0x65, 0x64, 0x20, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x20, 0x20, 0x57, 0x68, 0x65, 0x6e, 0x20, 0x74,
    0x68, 0x69, 0x73, 0x20, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x73, 0x2c, 0x20, 0x70, 0x72, 0x65, 0x64,
    0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x6d, 0x61, 0x79, 0x20,
    0x62, 0x65, 0x63, 0x6f, 0x6d, 0x65, 0x0d, 0x0a, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x6c, 0x69, 0x61,
    0x62, 0x6c, 0x65, 0x20, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72,
    0x61, 0x69, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x72,
    0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x63,
    0x63, 0x6f, 0x72, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x74, 0x73, 0x0d,
    0x0a, 0x20, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x20, 0x20, 0x54, 0x68, 0x65,
    0x20, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x20, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x20, 0x66, 0x6f,
    0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x27, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e,
    0x27, 0x20, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x72, 0x65,
    0x6d, 0x6f, 0x76, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x0d, 0x0a, 0x20, 0x74, 0x72, 0x61, 0x69,
    0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x73, 0x63, 0x68, 0x65, 0x64,
    0x75, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x0d, 0x0a, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x04, 0x12, 0x04, 0x81, 0x01, 0x02, 0x0a, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x05, 0x12, 0x04, 0x81, 0x01, 0x0b, 0x11, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x03, 0x02, 0x01, 0x01, 0x12, 0x04, 0x81, 0x01, 0x12, 0x1e, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x03, 0x02, 0x01, 0x03, 0x12, 0x04, 0x81, 0x01, 0x21, 0x22, 0x0a, 0x0b, 0x0a, 0x01, 0x07,
    0x12, 0x06, 0x84, 0x01, 0x00, 0x86, 0x01, 0x01, 0x0a, 0x0a, 0x0a, 0x02, 0x07, 0x02, 0x12, 0x04,
    0x85, 0x01, 0x02, 0x3b, 0x0a, 0x0b, 0x0a, 0x03, 0x07, 0x02, 0x02, 0x12, 0x04, 0x84, 0x01, 0x07,
    0x31, 0x0a, 0x0b, 0x0a, 0x03, 0x07, 0x02, 0x04, 0x12, 0x04, 0x85, 0x01, 0x02, 0x0a, 0x0a, 0x0b,
    0x0a, 0x03, 0x07, 0x02, 0x06, 0x12, 0x04, 0x85, 0x01, 0x0b, 0x1d, 0x0a, 0x0b, 0x0a, 0x03, 0x07,
    0x02, 0x01, 0x12, 0x04, 0x85, 0x01, 0x1e, 0x33, 0x0a, 0x0b, 0x0a, 0x03, 0x07, 0x02, 0x03, 0x12,
    0x04, 0x85, 0x01, 0x36, 0x3a,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
