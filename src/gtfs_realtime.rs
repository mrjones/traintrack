// Copyright 2015 The GTFS Specifications Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file is generated by rust-protobuf 2.0.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct FeedMessage {
    // message fields
    header: ::protobuf::SingularPtrField<FeedHeader>,
    entity: ::protobuf::RepeatedField<FeedEntity>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl FeedMessage {
    pub fn new() -> FeedMessage {
        ::std::default::Default::default()
    }

    // required .transit_realtime.FeedHeader header = 1;

    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: FeedHeader) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut FeedHeader {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> FeedHeader {
        self.header.take().unwrap_or_else(|| FeedHeader::new())
    }

    pub fn get_header(&self) -> &FeedHeader {
        self.header.as_ref().unwrap_or_else(|| FeedHeader::default_instance())
    }

    // repeated .transit_realtime.FeedEntity entity = 2;

    pub fn clear_entity(&mut self) {
        self.entity.clear();
    }

    // Param is passed by value, moved
    pub fn set_entity(&mut self, v: ::protobuf::RepeatedField<FeedEntity>) {
        self.entity = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entity(&mut self) -> &mut ::protobuf::RepeatedField<FeedEntity> {
        &mut self.entity
    }

    // Take field
    pub fn take_entity(&mut self) -> ::protobuf::RepeatedField<FeedEntity> {
        ::std::mem::replace(&mut self.entity, ::protobuf::RepeatedField::new())
    }

    pub fn get_entity(&self) -> &[FeedEntity] {
        &self.entity
    }
}

impl ::protobuf::Message for FeedMessage {
    fn is_initialized(&self) -> bool {
        if self.header.is_none() {
            return false;
        }
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.entity {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entity)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.entity {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.entity {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FeedMessage {
        FeedMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FeedHeader>>(
                    "header",
                    |m: &FeedMessage| { &m.header },
                    |m: &mut FeedMessage| { &mut m.header },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FeedEntity>>(
                    "entity",
                    |m: &FeedMessage| { &m.entity },
                    |m: &mut FeedMessage| { &mut m.entity },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FeedMessage>(
                    "FeedMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FeedMessage {
        static mut instance: ::protobuf::lazy::Lazy<FeedMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FeedMessage,
        };
        unsafe {
            instance.get(FeedMessage::new)
        }
    }
}

impl ::protobuf::Clear for FeedMessage {
    fn clear(&mut self) {
        self.clear_header();
        self.clear_entity();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FeedMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FeedMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FeedHeader {
    // message fields
    gtfs_realtime_version: ::protobuf::SingularField<::std::string::String>,
    incrementality: ::std::option::Option<FeedHeader_Incrementality>,
    timestamp: ::std::option::Option<u64>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl FeedHeader {
    pub fn new() -> FeedHeader {
        ::std::default::Default::default()
    }

    // required string gtfs_realtime_version = 1;

    pub fn clear_gtfs_realtime_version(&mut self) {
        self.gtfs_realtime_version.clear();
    }

    pub fn has_gtfs_realtime_version(&self) -> bool {
        self.gtfs_realtime_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gtfs_realtime_version(&mut self, v: ::std::string::String) {
        self.gtfs_realtime_version = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gtfs_realtime_version(&mut self) -> &mut ::std::string::String {
        if self.gtfs_realtime_version.is_none() {
            self.gtfs_realtime_version.set_default();
        }
        self.gtfs_realtime_version.as_mut().unwrap()
    }

    // Take field
    pub fn take_gtfs_realtime_version(&mut self) -> ::std::string::String {
        self.gtfs_realtime_version.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_gtfs_realtime_version(&self) -> &str {
        match self.gtfs_realtime_version.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional .transit_realtime.FeedHeader.Incrementality incrementality = 2;

    pub fn clear_incrementality(&mut self) {
        self.incrementality = ::std::option::Option::None;
    }

    pub fn has_incrementality(&self) -> bool {
        self.incrementality.is_some()
    }

    // Param is passed by value, moved
    pub fn set_incrementality(&mut self, v: FeedHeader_Incrementality) {
        self.incrementality = ::std::option::Option::Some(v);
    }

    pub fn get_incrementality(&self) -> FeedHeader_Incrementality {
        self.incrementality.unwrap_or(FeedHeader_Incrementality::FULL_DATASET)
    }

    // optional uint64 timestamp = 3;

    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    pub fn get_timestamp(&self) -> u64 {
        self.timestamp.unwrap_or(0)
    }
}

impl ::protobuf::Message for FeedHeader {
    fn is_initialized(&self) -> bool {
        if self.gtfs_realtime_version.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.gtfs_realtime_version)?;
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.incrementality, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.gtfs_realtime_version.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.incrementality {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        if let Some(v) = self.timestamp {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.gtfs_realtime_version.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.incrementality {
            os.write_enum(2, v.value())?;
        }
        if let Some(v) = self.timestamp {
            os.write_uint64(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FeedHeader {
        FeedHeader::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gtfs_realtime_version",
                    |m: &FeedHeader| { &m.gtfs_realtime_version },
                    |m: &mut FeedHeader| { &mut m.gtfs_realtime_version },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<FeedHeader_Incrementality>>(
                    "incrementality",
                    |m: &FeedHeader| { &m.incrementality },
                    |m: &mut FeedHeader| { &mut m.incrementality },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "timestamp",
                    |m: &FeedHeader| { &m.timestamp },
                    |m: &mut FeedHeader| { &mut m.timestamp },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FeedHeader>(
                    "FeedHeader",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FeedHeader {
        static mut instance: ::protobuf::lazy::Lazy<FeedHeader> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FeedHeader,
        };
        unsafe {
            instance.get(FeedHeader::new)
        }
    }
}

impl ::protobuf::Clear for FeedHeader {
    fn clear(&mut self) {
        self.clear_gtfs_realtime_version();
        self.clear_incrementality();
        self.clear_timestamp();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FeedHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FeedHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum FeedHeader_Incrementality {
    FULL_DATASET = 0,
    DIFFERENTIAL = 1,
}

impl ::protobuf::ProtobufEnum for FeedHeader_Incrementality {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FeedHeader_Incrementality> {
        match value {
            0 => ::std::option::Option::Some(FeedHeader_Incrementality::FULL_DATASET),
            1 => ::std::option::Option::Some(FeedHeader_Incrementality::DIFFERENTIAL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [FeedHeader_Incrementality] = &[
            FeedHeader_Incrementality::FULL_DATASET,
            FeedHeader_Incrementality::DIFFERENTIAL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("FeedHeader_Incrementality", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for FeedHeader_Incrementality {
}

impl ::protobuf::reflect::ProtobufValue for FeedHeader_Incrementality {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FeedEntity {
    // message fields
    id: ::protobuf::SingularField<::std::string::String>,
    is_deleted: ::std::option::Option<bool>,
    trip_update: ::protobuf::SingularPtrField<TripUpdate>,
    vehicle: ::protobuf::SingularPtrField<VehiclePosition>,
    alert: ::protobuf::SingularPtrField<Alert>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl FeedEntity {
    pub fn new() -> FeedEntity {
        ::std::default::Default::default()
    }

    // required string id = 1;

    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        if self.id.is_none() {
            self.id.set_default();
        }
        self.id.as_mut().unwrap()
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        self.id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_id(&self) -> &str {
        match self.id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional bool is_deleted = 2;

    pub fn clear_is_deleted(&mut self) {
        self.is_deleted = ::std::option::Option::None;
    }

    pub fn has_is_deleted(&self) -> bool {
        self.is_deleted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_deleted(&mut self, v: bool) {
        self.is_deleted = ::std::option::Option::Some(v);
    }

    pub fn get_is_deleted(&self) -> bool {
        self.is_deleted.unwrap_or(false)
    }

    // optional .transit_realtime.TripUpdate trip_update = 3;

    pub fn clear_trip_update(&mut self) {
        self.trip_update.clear();
    }

    pub fn has_trip_update(&self) -> bool {
        self.trip_update.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trip_update(&mut self, v: TripUpdate) {
        self.trip_update = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trip_update(&mut self) -> &mut TripUpdate {
        if self.trip_update.is_none() {
            self.trip_update.set_default();
        }
        self.trip_update.as_mut().unwrap()
    }

    // Take field
    pub fn take_trip_update(&mut self) -> TripUpdate {
        self.trip_update.take().unwrap_or_else(|| TripUpdate::new())
    }

    pub fn get_trip_update(&self) -> &TripUpdate {
        self.trip_update.as_ref().unwrap_or_else(|| TripUpdate::default_instance())
    }

    // optional .transit_realtime.VehiclePosition vehicle = 4;

    pub fn clear_vehicle(&mut self) {
        self.vehicle.clear();
    }

    pub fn has_vehicle(&self) -> bool {
        self.vehicle.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vehicle(&mut self, v: VehiclePosition) {
        self.vehicle = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vehicle(&mut self) -> &mut VehiclePosition {
        if self.vehicle.is_none() {
            self.vehicle.set_default();
        }
        self.vehicle.as_mut().unwrap()
    }

    // Take field
    pub fn take_vehicle(&mut self) -> VehiclePosition {
        self.vehicle.take().unwrap_or_else(|| VehiclePosition::new())
    }

    pub fn get_vehicle(&self) -> &VehiclePosition {
        self.vehicle.as_ref().unwrap_or_else(|| VehiclePosition::default_instance())
    }

    // optional .transit_realtime.Alert alert = 5;

    pub fn clear_alert(&mut self) {
        self.alert.clear();
    }

    pub fn has_alert(&self) -> bool {
        self.alert.is_some()
    }

    // Param is passed by value, moved
    pub fn set_alert(&mut self, v: Alert) {
        self.alert = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alert(&mut self) -> &mut Alert {
        if self.alert.is_none() {
            self.alert.set_default();
        }
        self.alert.as_mut().unwrap()
    }

    // Take field
    pub fn take_alert(&mut self) -> Alert {
        self.alert.take().unwrap_or_else(|| Alert::new())
    }

    pub fn get_alert(&self) -> &Alert {
        self.alert.as_ref().unwrap_or_else(|| Alert::default_instance())
    }
}

impl ::protobuf::Message for FeedEntity {
    fn is_initialized(&self) -> bool {
        if self.id.is_none() {
            return false;
        }
        for v in &self.trip_update {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.vehicle {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.alert {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_deleted = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.trip_update)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.vehicle)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.alert)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.is_deleted {
            my_size += 2;
        }
        if let Some(ref v) = self.trip_update.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.vehicle.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.alert.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.id.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.is_deleted {
            os.write_bool(2, v)?;
        }
        if let Some(ref v) = self.trip_update.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.vehicle.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.alert.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FeedEntity {
        FeedEntity::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &FeedEntity| { &m.id },
                    |m: &mut FeedEntity| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_deleted",
                    |m: &FeedEntity| { &m.is_deleted },
                    |m: &mut FeedEntity| { &mut m.is_deleted },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TripUpdate>>(
                    "trip_update",
                    |m: &FeedEntity| { &m.trip_update },
                    |m: &mut FeedEntity| { &mut m.trip_update },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<VehiclePosition>>(
                    "vehicle",
                    |m: &FeedEntity| { &m.vehicle },
                    |m: &mut FeedEntity| { &mut m.vehicle },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Alert>>(
                    "alert",
                    |m: &FeedEntity| { &m.alert },
                    |m: &mut FeedEntity| { &mut m.alert },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FeedEntity>(
                    "FeedEntity",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FeedEntity {
        static mut instance: ::protobuf::lazy::Lazy<FeedEntity> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FeedEntity,
        };
        unsafe {
            instance.get(FeedEntity::new)
        }
    }
}

impl ::protobuf::Clear for FeedEntity {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_is_deleted();
        self.clear_trip_update();
        self.clear_vehicle();
        self.clear_alert();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FeedEntity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FeedEntity {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TripUpdate {
    // message fields
    trip: ::protobuf::SingularPtrField<TripDescriptor>,
    vehicle: ::protobuf::SingularPtrField<VehicleDescriptor>,
    stop_time_update: ::protobuf::RepeatedField<TripUpdate_StopTimeUpdate>,
    timestamp: ::std::option::Option<u64>,
    delay: ::std::option::Option<i32>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TripUpdate {
    pub fn new() -> TripUpdate {
        ::std::default::Default::default()
    }

    // required .transit_realtime.TripDescriptor trip = 1;

    pub fn clear_trip(&mut self) {
        self.trip.clear();
    }

    pub fn has_trip(&self) -> bool {
        self.trip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trip(&mut self, v: TripDescriptor) {
        self.trip = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trip(&mut self) -> &mut TripDescriptor {
        if self.trip.is_none() {
            self.trip.set_default();
        }
        self.trip.as_mut().unwrap()
    }

    // Take field
    pub fn take_trip(&mut self) -> TripDescriptor {
        self.trip.take().unwrap_or_else(|| TripDescriptor::new())
    }

    pub fn get_trip(&self) -> &TripDescriptor {
        self.trip.as_ref().unwrap_or_else(|| TripDescriptor::default_instance())
    }

    // optional .transit_realtime.VehicleDescriptor vehicle = 3;

    pub fn clear_vehicle(&mut self) {
        self.vehicle.clear();
    }

    pub fn has_vehicle(&self) -> bool {
        self.vehicle.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vehicle(&mut self, v: VehicleDescriptor) {
        self.vehicle = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vehicle(&mut self) -> &mut VehicleDescriptor {
        if self.vehicle.is_none() {
            self.vehicle.set_default();
        }
        self.vehicle.as_mut().unwrap()
    }

    // Take field
    pub fn take_vehicle(&mut self) -> VehicleDescriptor {
        self.vehicle.take().unwrap_or_else(|| VehicleDescriptor::new())
    }

    pub fn get_vehicle(&self) -> &VehicleDescriptor {
        self.vehicle.as_ref().unwrap_or_else(|| VehicleDescriptor::default_instance())
    }

    // repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;

    pub fn clear_stop_time_update(&mut self) {
        self.stop_time_update.clear();
    }

    // Param is passed by value, moved
    pub fn set_stop_time_update(&mut self, v: ::protobuf::RepeatedField<TripUpdate_StopTimeUpdate>) {
        self.stop_time_update = v;
    }

    // Mutable pointer to the field.
    pub fn mut_stop_time_update(&mut self) -> &mut ::protobuf::RepeatedField<TripUpdate_StopTimeUpdate> {
        &mut self.stop_time_update
    }

    // Take field
    pub fn take_stop_time_update(&mut self) -> ::protobuf::RepeatedField<TripUpdate_StopTimeUpdate> {
        ::std::mem::replace(&mut self.stop_time_update, ::protobuf::RepeatedField::new())
    }

    pub fn get_stop_time_update(&self) -> &[TripUpdate_StopTimeUpdate] {
        &self.stop_time_update
    }

    // optional uint64 timestamp = 4;

    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    pub fn get_timestamp(&self) -> u64 {
        self.timestamp.unwrap_or(0)
    }

    // optional int32 delay = 5;

    pub fn clear_delay(&mut self) {
        self.delay = ::std::option::Option::None;
    }

    pub fn has_delay(&self) -> bool {
        self.delay.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delay(&mut self, v: i32) {
        self.delay = ::std::option::Option::Some(v);
    }

    pub fn get_delay(&self) -> i32 {
        self.delay.unwrap_or(0)
    }
}

impl ::protobuf::Message for TripUpdate {
    fn is_initialized(&self) -> bool {
        if self.trip.is_none() {
            return false;
        }
        for v in &self.trip {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.vehicle {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.stop_time_update {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.trip)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.vehicle)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.stop_time_update)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.delay = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.trip.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.vehicle.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.stop_time_update {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.timestamp {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.delay {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.trip.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.vehicle.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.stop_time_update {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.timestamp {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.delay {
            os.write_int32(5, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TripUpdate {
        TripUpdate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TripDescriptor>>(
                    "trip",
                    |m: &TripUpdate| { &m.trip },
                    |m: &mut TripUpdate| { &mut m.trip },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<VehicleDescriptor>>(
                    "vehicle",
                    |m: &TripUpdate| { &m.vehicle },
                    |m: &mut TripUpdate| { &mut m.vehicle },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TripUpdate_StopTimeUpdate>>(
                    "stop_time_update",
                    |m: &TripUpdate| { &m.stop_time_update },
                    |m: &mut TripUpdate| { &mut m.stop_time_update },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "timestamp",
                    |m: &TripUpdate| { &m.timestamp },
                    |m: &mut TripUpdate| { &mut m.timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "delay",
                    |m: &TripUpdate| { &m.delay },
                    |m: &mut TripUpdate| { &mut m.delay },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TripUpdate>(
                    "TripUpdate",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TripUpdate {
        static mut instance: ::protobuf::lazy::Lazy<TripUpdate> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TripUpdate,
        };
        unsafe {
            instance.get(TripUpdate::new)
        }
    }
}

impl ::protobuf::Clear for TripUpdate {
    fn clear(&mut self) {
        self.clear_trip();
        self.clear_vehicle();
        self.clear_stop_time_update();
        self.clear_timestamp();
        self.clear_delay();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TripUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TripUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TripUpdate_StopTimeEvent {
    // message fields
    delay: ::std::option::Option<i32>,
    time: ::std::option::Option<i64>,
    uncertainty: ::std::option::Option<i32>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TripUpdate_StopTimeEvent {
    pub fn new() -> TripUpdate_StopTimeEvent {
        ::std::default::Default::default()
    }

    // optional int32 delay = 1;

    pub fn clear_delay(&mut self) {
        self.delay = ::std::option::Option::None;
    }

    pub fn has_delay(&self) -> bool {
        self.delay.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delay(&mut self, v: i32) {
        self.delay = ::std::option::Option::Some(v);
    }

    pub fn get_delay(&self) -> i32 {
        self.delay.unwrap_or(0)
    }

    // optional int64 time = 2;

    pub fn clear_time(&mut self) {
        self.time = ::std::option::Option::None;
    }

    pub fn has_time(&self) -> bool {
        self.time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: i64) {
        self.time = ::std::option::Option::Some(v);
    }

    pub fn get_time(&self) -> i64 {
        self.time.unwrap_or(0)
    }

    // optional int32 uncertainty = 3;

    pub fn clear_uncertainty(&mut self) {
        self.uncertainty = ::std::option::Option::None;
    }

    pub fn has_uncertainty(&self) -> bool {
        self.uncertainty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_uncertainty(&mut self, v: i32) {
        self.uncertainty = ::std::option::Option::Some(v);
    }

    pub fn get_uncertainty(&self) -> i32 {
        self.uncertainty.unwrap_or(0)
    }
}

impl ::protobuf::Message for TripUpdate_StopTimeEvent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.delay = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.time = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.uncertainty = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.delay {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.time {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.uncertainty {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.delay {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.time {
            os.write_int64(2, v)?;
        }
        if let Some(v) = self.uncertainty {
            os.write_int32(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TripUpdate_StopTimeEvent {
        TripUpdate_StopTimeEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "delay",
                    |m: &TripUpdate_StopTimeEvent| { &m.delay },
                    |m: &mut TripUpdate_StopTimeEvent| { &mut m.delay },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "time",
                    |m: &TripUpdate_StopTimeEvent| { &m.time },
                    |m: &mut TripUpdate_StopTimeEvent| { &mut m.time },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "uncertainty",
                    |m: &TripUpdate_StopTimeEvent| { &m.uncertainty },
                    |m: &mut TripUpdate_StopTimeEvent| { &mut m.uncertainty },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TripUpdate_StopTimeEvent>(
                    "TripUpdate_StopTimeEvent",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TripUpdate_StopTimeEvent {
        static mut instance: ::protobuf::lazy::Lazy<TripUpdate_StopTimeEvent> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TripUpdate_StopTimeEvent,
        };
        unsafe {
            instance.get(TripUpdate_StopTimeEvent::new)
        }
    }
}

impl ::protobuf::Clear for TripUpdate_StopTimeEvent {
    fn clear(&mut self) {
        self.clear_delay();
        self.clear_time();
        self.clear_uncertainty();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TripUpdate_StopTimeEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TripUpdate_StopTimeEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TripUpdate_StopTimeUpdate {
    // message fields
    stop_sequence: ::std::option::Option<u32>,
    stop_id: ::protobuf::SingularField<::std::string::String>,
    arrival: ::protobuf::SingularPtrField<TripUpdate_StopTimeEvent>,
    departure: ::protobuf::SingularPtrField<TripUpdate_StopTimeEvent>,
    schedule_relationship: ::std::option::Option<TripUpdate_StopTimeUpdate_ScheduleRelationship>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TripUpdate_StopTimeUpdate {
    pub fn new() -> TripUpdate_StopTimeUpdate {
        ::std::default::Default::default()
    }

    // optional uint32 stop_sequence = 1;

    pub fn clear_stop_sequence(&mut self) {
        self.stop_sequence = ::std::option::Option::None;
    }

    pub fn has_stop_sequence(&self) -> bool {
        self.stop_sequence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stop_sequence(&mut self, v: u32) {
        self.stop_sequence = ::std::option::Option::Some(v);
    }

    pub fn get_stop_sequence(&self) -> u32 {
        self.stop_sequence.unwrap_or(0)
    }

    // optional string stop_id = 4;

    pub fn clear_stop_id(&mut self) {
        self.stop_id.clear();
    }

    pub fn has_stop_id(&self) -> bool {
        self.stop_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stop_id(&mut self, v: ::std::string::String) {
        self.stop_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stop_id(&mut self) -> &mut ::std::string::String {
        if self.stop_id.is_none() {
            self.stop_id.set_default();
        }
        self.stop_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_stop_id(&mut self) -> ::std::string::String {
        self.stop_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_stop_id(&self) -> &str {
        match self.stop_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;

    pub fn clear_arrival(&mut self) {
        self.arrival.clear();
    }

    pub fn has_arrival(&self) -> bool {
        self.arrival.is_some()
    }

    // Param is passed by value, moved
    pub fn set_arrival(&mut self, v: TripUpdate_StopTimeEvent) {
        self.arrival = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_arrival(&mut self) -> &mut TripUpdate_StopTimeEvent {
        if self.arrival.is_none() {
            self.arrival.set_default();
        }
        self.arrival.as_mut().unwrap()
    }

    // Take field
    pub fn take_arrival(&mut self) -> TripUpdate_StopTimeEvent {
        self.arrival.take().unwrap_or_else(|| TripUpdate_StopTimeEvent::new())
    }

    pub fn get_arrival(&self) -> &TripUpdate_StopTimeEvent {
        self.arrival.as_ref().unwrap_or_else(|| TripUpdate_StopTimeEvent::default_instance())
    }

    // optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;

    pub fn clear_departure(&mut self) {
        self.departure.clear();
    }

    pub fn has_departure(&self) -> bool {
        self.departure.is_some()
    }

    // Param is passed by value, moved
    pub fn set_departure(&mut self, v: TripUpdate_StopTimeEvent) {
        self.departure = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_departure(&mut self) -> &mut TripUpdate_StopTimeEvent {
        if self.departure.is_none() {
            self.departure.set_default();
        }
        self.departure.as_mut().unwrap()
    }

    // Take field
    pub fn take_departure(&mut self) -> TripUpdate_StopTimeEvent {
        self.departure.take().unwrap_or_else(|| TripUpdate_StopTimeEvent::new())
    }

    pub fn get_departure(&self) -> &TripUpdate_StopTimeEvent {
        self.departure.as_ref().unwrap_or_else(|| TripUpdate_StopTimeEvent::default_instance())
    }

    // optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5;

    pub fn clear_schedule_relationship(&mut self) {
        self.schedule_relationship = ::std::option::Option::None;
    }

    pub fn has_schedule_relationship(&self) -> bool {
        self.schedule_relationship.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schedule_relationship(&mut self, v: TripUpdate_StopTimeUpdate_ScheduleRelationship) {
        self.schedule_relationship = ::std::option::Option::Some(v);
    }

    pub fn get_schedule_relationship(&self) -> TripUpdate_StopTimeUpdate_ScheduleRelationship {
        self.schedule_relationship.unwrap_or(TripUpdate_StopTimeUpdate_ScheduleRelationship::SCHEDULED)
    }
}

impl ::protobuf::Message for TripUpdate_StopTimeUpdate {
    fn is_initialized(&self) -> bool {
        for v in &self.arrival {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.departure {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.stop_sequence = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.stop_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.arrival)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.departure)?;
                },
                5 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.schedule_relationship, 5, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.stop_sequence {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.stop_id.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(ref v) = self.arrival.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.departure.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.schedule_relationship {
            my_size += ::protobuf::rt::enum_size(5, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.stop_sequence {
            os.write_uint32(1, v)?;
        }
        if let Some(ref v) = self.stop_id.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(ref v) = self.arrival.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.departure.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.schedule_relationship {
            os.write_enum(5, v.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TripUpdate_StopTimeUpdate {
        TripUpdate_StopTimeUpdate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "stop_sequence",
                    |m: &TripUpdate_StopTimeUpdate| { &m.stop_sequence },
                    |m: &mut TripUpdate_StopTimeUpdate| { &mut m.stop_sequence },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "stop_id",
                    |m: &TripUpdate_StopTimeUpdate| { &m.stop_id },
                    |m: &mut TripUpdate_StopTimeUpdate| { &mut m.stop_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TripUpdate_StopTimeEvent>>(
                    "arrival",
                    |m: &TripUpdate_StopTimeUpdate| { &m.arrival },
                    |m: &mut TripUpdate_StopTimeUpdate| { &mut m.arrival },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TripUpdate_StopTimeEvent>>(
                    "departure",
                    |m: &TripUpdate_StopTimeUpdate| { &m.departure },
                    |m: &mut TripUpdate_StopTimeUpdate| { &mut m.departure },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TripUpdate_StopTimeUpdate_ScheduleRelationship>>(
                    "schedule_relationship",
                    |m: &TripUpdate_StopTimeUpdate| { &m.schedule_relationship },
                    |m: &mut TripUpdate_StopTimeUpdate| { &mut m.schedule_relationship },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TripUpdate_StopTimeUpdate>(
                    "TripUpdate_StopTimeUpdate",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TripUpdate_StopTimeUpdate {
        static mut instance: ::protobuf::lazy::Lazy<TripUpdate_StopTimeUpdate> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TripUpdate_StopTimeUpdate,
        };
        unsafe {
            instance.get(TripUpdate_StopTimeUpdate::new)
        }
    }
}

impl ::protobuf::Clear for TripUpdate_StopTimeUpdate {
    fn clear(&mut self) {
        self.clear_stop_sequence();
        self.clear_stop_id();
        self.clear_arrival();
        self.clear_departure();
        self.clear_schedule_relationship();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TripUpdate_StopTimeUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TripUpdate_StopTimeUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TripUpdate_StopTimeUpdate_ScheduleRelationship {
    SCHEDULED = 0,
    SKIPPED = 1,
    NO_DATA = 2,
}

impl ::protobuf::ProtobufEnum for TripUpdate_StopTimeUpdate_ScheduleRelationship {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TripUpdate_StopTimeUpdate_ScheduleRelationship> {
        match value {
            0 => ::std::option::Option::Some(TripUpdate_StopTimeUpdate_ScheduleRelationship::SCHEDULED),
            1 => ::std::option::Option::Some(TripUpdate_StopTimeUpdate_ScheduleRelationship::SKIPPED),
            2 => ::std::option::Option::Some(TripUpdate_StopTimeUpdate_ScheduleRelationship::NO_DATA),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TripUpdate_StopTimeUpdate_ScheduleRelationship] = &[
            TripUpdate_StopTimeUpdate_ScheduleRelationship::SCHEDULED,
            TripUpdate_StopTimeUpdate_ScheduleRelationship::SKIPPED,
            TripUpdate_StopTimeUpdate_ScheduleRelationship::NO_DATA,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("TripUpdate_StopTimeUpdate_ScheduleRelationship", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for TripUpdate_StopTimeUpdate_ScheduleRelationship {
}

impl ::protobuf::reflect::ProtobufValue for TripUpdate_StopTimeUpdate_ScheduleRelationship {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VehiclePosition {
    // message fields
    trip: ::protobuf::SingularPtrField<TripDescriptor>,
    vehicle: ::protobuf::SingularPtrField<VehicleDescriptor>,
    position: ::protobuf::SingularPtrField<Position>,
    current_stop_sequence: ::std::option::Option<u32>,
    stop_id: ::protobuf::SingularField<::std::string::String>,
    current_status: ::std::option::Option<VehiclePosition_VehicleStopStatus>,
    timestamp: ::std::option::Option<u64>,
    congestion_level: ::std::option::Option<VehiclePosition_CongestionLevel>,
    occupancy_status: ::std::option::Option<VehiclePosition_OccupancyStatus>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl VehiclePosition {
    pub fn new() -> VehiclePosition {
        ::std::default::Default::default()
    }

    // optional .transit_realtime.TripDescriptor trip = 1;

    pub fn clear_trip(&mut self) {
        self.trip.clear();
    }

    pub fn has_trip(&self) -> bool {
        self.trip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trip(&mut self, v: TripDescriptor) {
        self.trip = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trip(&mut self) -> &mut TripDescriptor {
        if self.trip.is_none() {
            self.trip.set_default();
        }
        self.trip.as_mut().unwrap()
    }

    // Take field
    pub fn take_trip(&mut self) -> TripDescriptor {
        self.trip.take().unwrap_or_else(|| TripDescriptor::new())
    }

    pub fn get_trip(&self) -> &TripDescriptor {
        self.trip.as_ref().unwrap_or_else(|| TripDescriptor::default_instance())
    }

    // optional .transit_realtime.VehicleDescriptor vehicle = 8;

    pub fn clear_vehicle(&mut self) {
        self.vehicle.clear();
    }

    pub fn has_vehicle(&self) -> bool {
        self.vehicle.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vehicle(&mut self, v: VehicleDescriptor) {
        self.vehicle = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vehicle(&mut self) -> &mut VehicleDescriptor {
        if self.vehicle.is_none() {
            self.vehicle.set_default();
        }
        self.vehicle.as_mut().unwrap()
    }

    // Take field
    pub fn take_vehicle(&mut self) -> VehicleDescriptor {
        self.vehicle.take().unwrap_or_else(|| VehicleDescriptor::new())
    }

    pub fn get_vehicle(&self) -> &VehicleDescriptor {
        self.vehicle.as_ref().unwrap_or_else(|| VehicleDescriptor::default_instance())
    }

    // optional .transit_realtime.Position position = 2;

    pub fn clear_position(&mut self) {
        self.position.clear();
    }

    pub fn has_position(&self) -> bool {
        self.position.is_some()
    }

    // Param is passed by value, moved
    pub fn set_position(&mut self, v: Position) {
        self.position = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_position(&mut self) -> &mut Position {
        if self.position.is_none() {
            self.position.set_default();
        }
        self.position.as_mut().unwrap()
    }

    // Take field
    pub fn take_position(&mut self) -> Position {
        self.position.take().unwrap_or_else(|| Position::new())
    }

    pub fn get_position(&self) -> &Position {
        self.position.as_ref().unwrap_or_else(|| Position::default_instance())
    }

    // optional uint32 current_stop_sequence = 3;

    pub fn clear_current_stop_sequence(&mut self) {
        self.current_stop_sequence = ::std::option::Option::None;
    }

    pub fn has_current_stop_sequence(&self) -> bool {
        self.current_stop_sequence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current_stop_sequence(&mut self, v: u32) {
        self.current_stop_sequence = ::std::option::Option::Some(v);
    }

    pub fn get_current_stop_sequence(&self) -> u32 {
        self.current_stop_sequence.unwrap_or(0)
    }

    // optional string stop_id = 7;

    pub fn clear_stop_id(&mut self) {
        self.stop_id.clear();
    }

    pub fn has_stop_id(&self) -> bool {
        self.stop_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stop_id(&mut self, v: ::std::string::String) {
        self.stop_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stop_id(&mut self) -> &mut ::std::string::String {
        if self.stop_id.is_none() {
            self.stop_id.set_default();
        }
        self.stop_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_stop_id(&mut self) -> ::std::string::String {
        self.stop_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_stop_id(&self) -> &str {
        match self.stop_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4;

    pub fn clear_current_status(&mut self) {
        self.current_status = ::std::option::Option::None;
    }

    pub fn has_current_status(&self) -> bool {
        self.current_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current_status(&mut self, v: VehiclePosition_VehicleStopStatus) {
        self.current_status = ::std::option::Option::Some(v);
    }

    pub fn get_current_status(&self) -> VehiclePosition_VehicleStopStatus {
        self.current_status.unwrap_or(VehiclePosition_VehicleStopStatus::IN_TRANSIT_TO)
    }

    // optional uint64 timestamp = 5;

    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    pub fn get_timestamp(&self) -> u64 {
        self.timestamp.unwrap_or(0)
    }

    // optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;

    pub fn clear_congestion_level(&mut self) {
        self.congestion_level = ::std::option::Option::None;
    }

    pub fn has_congestion_level(&self) -> bool {
        self.congestion_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_congestion_level(&mut self, v: VehiclePosition_CongestionLevel) {
        self.congestion_level = ::std::option::Option::Some(v);
    }

    pub fn get_congestion_level(&self) -> VehiclePosition_CongestionLevel {
        self.congestion_level.unwrap_or(VehiclePosition_CongestionLevel::UNKNOWN_CONGESTION_LEVEL)
    }

    // optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;

    pub fn clear_occupancy_status(&mut self) {
        self.occupancy_status = ::std::option::Option::None;
    }

    pub fn has_occupancy_status(&self) -> bool {
        self.occupancy_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_occupancy_status(&mut self, v: VehiclePosition_OccupancyStatus) {
        self.occupancy_status = ::std::option::Option::Some(v);
    }

    pub fn get_occupancy_status(&self) -> VehiclePosition_OccupancyStatus {
        self.occupancy_status.unwrap_or(VehiclePosition_OccupancyStatus::EMPTY)
    }
}

impl ::protobuf::Message for VehiclePosition {
    fn is_initialized(&self) -> bool {
        for v in &self.trip {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.vehicle {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.position {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.trip)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.vehicle)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.position)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.current_stop_sequence = ::std::option::Option::Some(tmp);
                },
                7 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.stop_id)?;
                },
                4 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.current_status, 4, &mut self.unknown_fields)?
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.congestion_level, 6, &mut self.unknown_fields)?
                },
                9 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.occupancy_status, 9, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.trip.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.vehicle.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.position.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.current_stop_sequence {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.stop_id.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.current_status {
            my_size += ::protobuf::rt::enum_size(4, v);
        }
        if let Some(v) = self.timestamp {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.congestion_level {
            my_size += ::protobuf::rt::enum_size(6, v);
        }
        if let Some(v) = self.occupancy_status {
            my_size += ::protobuf::rt::enum_size(9, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.trip.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.vehicle.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.position.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.current_stop_sequence {
            os.write_uint32(3, v)?;
        }
        if let Some(ref v) = self.stop_id.as_ref() {
            os.write_string(7, &v)?;
        }
        if let Some(v) = self.current_status {
            os.write_enum(4, v.value())?;
        }
        if let Some(v) = self.timestamp {
            os.write_uint64(5, v)?;
        }
        if let Some(v) = self.congestion_level {
            os.write_enum(6, v.value())?;
        }
        if let Some(v) = self.occupancy_status {
            os.write_enum(9, v.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VehiclePosition {
        VehiclePosition::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TripDescriptor>>(
                    "trip",
                    |m: &VehiclePosition| { &m.trip },
                    |m: &mut VehiclePosition| { &mut m.trip },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<VehicleDescriptor>>(
                    "vehicle",
                    |m: &VehiclePosition| { &m.vehicle },
                    |m: &mut VehiclePosition| { &mut m.vehicle },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Position>>(
                    "position",
                    |m: &VehiclePosition| { &m.position },
                    |m: &mut VehiclePosition| { &mut m.position },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "current_stop_sequence",
                    |m: &VehiclePosition| { &m.current_stop_sequence },
                    |m: &mut VehiclePosition| { &mut m.current_stop_sequence },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "stop_id",
                    |m: &VehiclePosition| { &m.stop_id },
                    |m: &mut VehiclePosition| { &mut m.stop_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<VehiclePosition_VehicleStopStatus>>(
                    "current_status",
                    |m: &VehiclePosition| { &m.current_status },
                    |m: &mut VehiclePosition| { &mut m.current_status },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "timestamp",
                    |m: &VehiclePosition| { &m.timestamp },
                    |m: &mut VehiclePosition| { &mut m.timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<VehiclePosition_CongestionLevel>>(
                    "congestion_level",
                    |m: &VehiclePosition| { &m.congestion_level },
                    |m: &mut VehiclePosition| { &mut m.congestion_level },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<VehiclePosition_OccupancyStatus>>(
                    "occupancy_status",
                    |m: &VehiclePosition| { &m.occupancy_status },
                    |m: &mut VehiclePosition| { &mut m.occupancy_status },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<VehiclePosition>(
                    "VehiclePosition",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static VehiclePosition {
        static mut instance: ::protobuf::lazy::Lazy<VehiclePosition> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const VehiclePosition,
        };
        unsafe {
            instance.get(VehiclePosition::new)
        }
    }
}

impl ::protobuf::Clear for VehiclePosition {
    fn clear(&mut self) {
        self.clear_trip();
        self.clear_vehicle();
        self.clear_position();
        self.clear_current_stop_sequence();
        self.clear_stop_id();
        self.clear_current_status();
        self.clear_timestamp();
        self.clear_congestion_level();
        self.clear_occupancy_status();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VehiclePosition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VehiclePosition {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum VehiclePosition_VehicleStopStatus {
    INCOMING_AT = 0,
    STOPPED_AT = 1,
    IN_TRANSIT_TO = 2,
}

impl ::protobuf::ProtobufEnum for VehiclePosition_VehicleStopStatus {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<VehiclePosition_VehicleStopStatus> {
        match value {
            0 => ::std::option::Option::Some(VehiclePosition_VehicleStopStatus::INCOMING_AT),
            1 => ::std::option::Option::Some(VehiclePosition_VehicleStopStatus::STOPPED_AT),
            2 => ::std::option::Option::Some(VehiclePosition_VehicleStopStatus::IN_TRANSIT_TO),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [VehiclePosition_VehicleStopStatus] = &[
            VehiclePosition_VehicleStopStatus::INCOMING_AT,
            VehiclePosition_VehicleStopStatus::STOPPED_AT,
            VehiclePosition_VehicleStopStatus::IN_TRANSIT_TO,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("VehiclePosition_VehicleStopStatus", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for VehiclePosition_VehicleStopStatus {
}

impl ::protobuf::reflect::ProtobufValue for VehiclePosition_VehicleStopStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum VehiclePosition_CongestionLevel {
    UNKNOWN_CONGESTION_LEVEL = 0,
    RUNNING_SMOOTHLY = 1,
    STOP_AND_GO = 2,
    CONGESTION = 3,
    SEVERE_CONGESTION = 4,
}

impl ::protobuf::ProtobufEnum for VehiclePosition_CongestionLevel {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<VehiclePosition_CongestionLevel> {
        match value {
            0 => ::std::option::Option::Some(VehiclePosition_CongestionLevel::UNKNOWN_CONGESTION_LEVEL),
            1 => ::std::option::Option::Some(VehiclePosition_CongestionLevel::RUNNING_SMOOTHLY),
            2 => ::std::option::Option::Some(VehiclePosition_CongestionLevel::STOP_AND_GO),
            3 => ::std::option::Option::Some(VehiclePosition_CongestionLevel::CONGESTION),
            4 => ::std::option::Option::Some(VehiclePosition_CongestionLevel::SEVERE_CONGESTION),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [VehiclePosition_CongestionLevel] = &[
            VehiclePosition_CongestionLevel::UNKNOWN_CONGESTION_LEVEL,
            VehiclePosition_CongestionLevel::RUNNING_SMOOTHLY,
            VehiclePosition_CongestionLevel::STOP_AND_GO,
            VehiclePosition_CongestionLevel::CONGESTION,
            VehiclePosition_CongestionLevel::SEVERE_CONGESTION,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("VehiclePosition_CongestionLevel", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for VehiclePosition_CongestionLevel {
}

impl ::protobuf::reflect::ProtobufValue for VehiclePosition_CongestionLevel {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum VehiclePosition_OccupancyStatus {
    EMPTY = 0,
    MANY_SEATS_AVAILABLE = 1,
    FEW_SEATS_AVAILABLE = 2,
    STANDING_ROOM_ONLY = 3,
    CRUSHED_STANDING_ROOM_ONLY = 4,
    FULL = 5,
    NOT_ACCEPTING_PASSENGERS = 6,
}

impl ::protobuf::ProtobufEnum for VehiclePosition_OccupancyStatus {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<VehiclePosition_OccupancyStatus> {
        match value {
            0 => ::std::option::Option::Some(VehiclePosition_OccupancyStatus::EMPTY),
            1 => ::std::option::Option::Some(VehiclePosition_OccupancyStatus::MANY_SEATS_AVAILABLE),
            2 => ::std::option::Option::Some(VehiclePosition_OccupancyStatus::FEW_SEATS_AVAILABLE),
            3 => ::std::option::Option::Some(VehiclePosition_OccupancyStatus::STANDING_ROOM_ONLY),
            4 => ::std::option::Option::Some(VehiclePosition_OccupancyStatus::CRUSHED_STANDING_ROOM_ONLY),
            5 => ::std::option::Option::Some(VehiclePosition_OccupancyStatus::FULL),
            6 => ::std::option::Option::Some(VehiclePosition_OccupancyStatus::NOT_ACCEPTING_PASSENGERS),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [VehiclePosition_OccupancyStatus] = &[
            VehiclePosition_OccupancyStatus::EMPTY,
            VehiclePosition_OccupancyStatus::MANY_SEATS_AVAILABLE,
            VehiclePosition_OccupancyStatus::FEW_SEATS_AVAILABLE,
            VehiclePosition_OccupancyStatus::STANDING_ROOM_ONLY,
            VehiclePosition_OccupancyStatus::CRUSHED_STANDING_ROOM_ONLY,
            VehiclePosition_OccupancyStatus::FULL,
            VehiclePosition_OccupancyStatus::NOT_ACCEPTING_PASSENGERS,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("VehiclePosition_OccupancyStatus", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for VehiclePosition_OccupancyStatus {
}

impl ::protobuf::reflect::ProtobufValue for VehiclePosition_OccupancyStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Alert {
    // message fields
    active_period: ::protobuf::RepeatedField<TimeRange>,
    informed_entity: ::protobuf::RepeatedField<EntitySelector>,
    cause: ::std::option::Option<Alert_Cause>,
    effect: ::std::option::Option<Alert_Effect>,
    url: ::protobuf::SingularPtrField<TranslatedString>,
    header_text: ::protobuf::SingularPtrField<TranslatedString>,
    description_text: ::protobuf::SingularPtrField<TranslatedString>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Alert {
    pub fn new() -> Alert {
        ::std::default::Default::default()
    }

    // repeated .transit_realtime.TimeRange active_period = 1;

    pub fn clear_active_period(&mut self) {
        self.active_period.clear();
    }

    // Param is passed by value, moved
    pub fn set_active_period(&mut self, v: ::protobuf::RepeatedField<TimeRange>) {
        self.active_period = v;
    }

    // Mutable pointer to the field.
    pub fn mut_active_period(&mut self) -> &mut ::protobuf::RepeatedField<TimeRange> {
        &mut self.active_period
    }

    // Take field
    pub fn take_active_period(&mut self) -> ::protobuf::RepeatedField<TimeRange> {
        ::std::mem::replace(&mut self.active_period, ::protobuf::RepeatedField::new())
    }

    pub fn get_active_period(&self) -> &[TimeRange] {
        &self.active_period
    }

    // repeated .transit_realtime.EntitySelector informed_entity = 5;

    pub fn clear_informed_entity(&mut self) {
        self.informed_entity.clear();
    }

    // Param is passed by value, moved
    pub fn set_informed_entity(&mut self, v: ::protobuf::RepeatedField<EntitySelector>) {
        self.informed_entity = v;
    }

    // Mutable pointer to the field.
    pub fn mut_informed_entity(&mut self) -> &mut ::protobuf::RepeatedField<EntitySelector> {
        &mut self.informed_entity
    }

    // Take field
    pub fn take_informed_entity(&mut self) -> ::protobuf::RepeatedField<EntitySelector> {
        ::std::mem::replace(&mut self.informed_entity, ::protobuf::RepeatedField::new())
    }

    pub fn get_informed_entity(&self) -> &[EntitySelector] {
        &self.informed_entity
    }

    // optional .transit_realtime.Alert.Cause cause = 6;

    pub fn clear_cause(&mut self) {
        self.cause = ::std::option::Option::None;
    }

    pub fn has_cause(&self) -> bool {
        self.cause.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cause(&mut self, v: Alert_Cause) {
        self.cause = ::std::option::Option::Some(v);
    }

    pub fn get_cause(&self) -> Alert_Cause {
        self.cause.unwrap_or(Alert_Cause::UNKNOWN_CAUSE)
    }

    // optional .transit_realtime.Alert.Effect effect = 7;

    pub fn clear_effect(&mut self) {
        self.effect = ::std::option::Option::None;
    }

    pub fn has_effect(&self) -> bool {
        self.effect.is_some()
    }

    // Param is passed by value, moved
    pub fn set_effect(&mut self, v: Alert_Effect) {
        self.effect = ::std::option::Option::Some(v);
    }

    pub fn get_effect(&self) -> Alert_Effect {
        self.effect.unwrap_or(Alert_Effect::UNKNOWN_EFFECT)
    }

    // optional .transit_realtime.TranslatedString url = 8;

    pub fn clear_url(&mut self) {
        self.url.clear();
    }

    pub fn has_url(&self) -> bool {
        self.url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: TranslatedString) {
        self.url = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut TranslatedString {
        if self.url.is_none() {
            self.url.set_default();
        }
        self.url.as_mut().unwrap()
    }

    // Take field
    pub fn take_url(&mut self) -> TranslatedString {
        self.url.take().unwrap_or_else(|| TranslatedString::new())
    }

    pub fn get_url(&self) -> &TranslatedString {
        self.url.as_ref().unwrap_or_else(|| TranslatedString::default_instance())
    }

    // optional .transit_realtime.TranslatedString header_text = 10;

    pub fn clear_header_text(&mut self) {
        self.header_text.clear();
    }

    pub fn has_header_text(&self) -> bool {
        self.header_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header_text(&mut self, v: TranslatedString) {
        self.header_text = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header_text(&mut self) -> &mut TranslatedString {
        if self.header_text.is_none() {
            self.header_text.set_default();
        }
        self.header_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_header_text(&mut self) -> TranslatedString {
        self.header_text.take().unwrap_or_else(|| TranslatedString::new())
    }

    pub fn get_header_text(&self) -> &TranslatedString {
        self.header_text.as_ref().unwrap_or_else(|| TranslatedString::default_instance())
    }

    // optional .transit_realtime.TranslatedString description_text = 11;

    pub fn clear_description_text(&mut self) {
        self.description_text.clear();
    }

    pub fn has_description_text(&self) -> bool {
        self.description_text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_description_text(&mut self, v: TranslatedString) {
        self.description_text = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description_text(&mut self) -> &mut TranslatedString {
        if self.description_text.is_none() {
            self.description_text.set_default();
        }
        self.description_text.as_mut().unwrap()
    }

    // Take field
    pub fn take_description_text(&mut self) -> TranslatedString {
        self.description_text.take().unwrap_or_else(|| TranslatedString::new())
    }

    pub fn get_description_text(&self) -> &TranslatedString {
        self.description_text.as_ref().unwrap_or_else(|| TranslatedString::default_instance())
    }
}

impl ::protobuf::Message for Alert {
    fn is_initialized(&self) -> bool {
        for v in &self.active_period {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.informed_entity {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.url {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.header_text {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.description_text {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.active_period)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.informed_entity)?;
                },
                6 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.cause, 6, &mut self.unknown_fields)?
                },
                7 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.effect, 7, &mut self.unknown_fields)?
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.url)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header_text)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.description_text)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.active_period {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.informed_entity {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.cause {
            my_size += ::protobuf::rt::enum_size(6, v);
        }
        if let Some(v) = self.effect {
            my_size += ::protobuf::rt::enum_size(7, v);
        }
        if let Some(ref v) = self.url.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.header_text.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.description_text.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.active_period {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.informed_entity {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.cause {
            os.write_enum(6, v.value())?;
        }
        if let Some(v) = self.effect {
            os.write_enum(7, v.value())?;
        }
        if let Some(ref v) = self.url.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.header_text.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.description_text.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Alert {
        Alert::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TimeRange>>(
                    "active_period",
                    |m: &Alert| { &m.active_period },
                    |m: &mut Alert| { &mut m.active_period },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EntitySelector>>(
                    "informed_entity",
                    |m: &Alert| { &m.informed_entity },
                    |m: &mut Alert| { &mut m.informed_entity },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Alert_Cause>>(
                    "cause",
                    |m: &Alert| { &m.cause },
                    |m: &mut Alert| { &mut m.cause },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Alert_Effect>>(
                    "effect",
                    |m: &Alert| { &m.effect },
                    |m: &mut Alert| { &mut m.effect },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TranslatedString>>(
                    "url",
                    |m: &Alert| { &m.url },
                    |m: &mut Alert| { &mut m.url },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TranslatedString>>(
                    "header_text",
                    |m: &Alert| { &m.header_text },
                    |m: &mut Alert| { &mut m.header_text },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TranslatedString>>(
                    "description_text",
                    |m: &Alert| { &m.description_text },
                    |m: &mut Alert| { &mut m.description_text },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Alert>(
                    "Alert",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Alert {
        static mut instance: ::protobuf::lazy::Lazy<Alert> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Alert,
        };
        unsafe {
            instance.get(Alert::new)
        }
    }
}

impl ::protobuf::Clear for Alert {
    fn clear(&mut self) {
        self.clear_active_period();
        self.clear_informed_entity();
        self.clear_cause();
        self.clear_effect();
        self.clear_url();
        self.clear_header_text();
        self.clear_description_text();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Alert {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Alert {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Alert_Cause {
    UNKNOWN_CAUSE = 1,
    OTHER_CAUSE = 2,
    TECHNICAL_PROBLEM = 3,
    STRIKE = 4,
    DEMONSTRATION = 5,
    ACCIDENT = 6,
    HOLIDAY = 7,
    WEATHER = 8,
    MAINTENANCE = 9,
    CONSTRUCTION = 10,
    POLICE_ACTIVITY = 11,
    MEDICAL_EMERGENCY = 12,
}

impl ::protobuf::ProtobufEnum for Alert_Cause {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Alert_Cause> {
        match value {
            1 => ::std::option::Option::Some(Alert_Cause::UNKNOWN_CAUSE),
            2 => ::std::option::Option::Some(Alert_Cause::OTHER_CAUSE),
            3 => ::std::option::Option::Some(Alert_Cause::TECHNICAL_PROBLEM),
            4 => ::std::option::Option::Some(Alert_Cause::STRIKE),
            5 => ::std::option::Option::Some(Alert_Cause::DEMONSTRATION),
            6 => ::std::option::Option::Some(Alert_Cause::ACCIDENT),
            7 => ::std::option::Option::Some(Alert_Cause::HOLIDAY),
            8 => ::std::option::Option::Some(Alert_Cause::WEATHER),
            9 => ::std::option::Option::Some(Alert_Cause::MAINTENANCE),
            10 => ::std::option::Option::Some(Alert_Cause::CONSTRUCTION),
            11 => ::std::option::Option::Some(Alert_Cause::POLICE_ACTIVITY),
            12 => ::std::option::Option::Some(Alert_Cause::MEDICAL_EMERGENCY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Alert_Cause] = &[
            Alert_Cause::UNKNOWN_CAUSE,
            Alert_Cause::OTHER_CAUSE,
            Alert_Cause::TECHNICAL_PROBLEM,
            Alert_Cause::STRIKE,
            Alert_Cause::DEMONSTRATION,
            Alert_Cause::ACCIDENT,
            Alert_Cause::HOLIDAY,
            Alert_Cause::WEATHER,
            Alert_Cause::MAINTENANCE,
            Alert_Cause::CONSTRUCTION,
            Alert_Cause::POLICE_ACTIVITY,
            Alert_Cause::MEDICAL_EMERGENCY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Alert_Cause", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Alert_Cause {
}

impl ::protobuf::reflect::ProtobufValue for Alert_Cause {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Alert_Effect {
    NO_SERVICE = 1,
    REDUCED_SERVICE = 2,
    SIGNIFICANT_DELAYS = 3,
    DETOUR = 4,
    ADDITIONAL_SERVICE = 5,
    MODIFIED_SERVICE = 6,
    OTHER_EFFECT = 7,
    UNKNOWN_EFFECT = 8,
    STOP_MOVED = 9,
}

impl ::protobuf::ProtobufEnum for Alert_Effect {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Alert_Effect> {
        match value {
            1 => ::std::option::Option::Some(Alert_Effect::NO_SERVICE),
            2 => ::std::option::Option::Some(Alert_Effect::REDUCED_SERVICE),
            3 => ::std::option::Option::Some(Alert_Effect::SIGNIFICANT_DELAYS),
            4 => ::std::option::Option::Some(Alert_Effect::DETOUR),
            5 => ::std::option::Option::Some(Alert_Effect::ADDITIONAL_SERVICE),
            6 => ::std::option::Option::Some(Alert_Effect::MODIFIED_SERVICE),
            7 => ::std::option::Option::Some(Alert_Effect::OTHER_EFFECT),
            8 => ::std::option::Option::Some(Alert_Effect::UNKNOWN_EFFECT),
            9 => ::std::option::Option::Some(Alert_Effect::STOP_MOVED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Alert_Effect] = &[
            Alert_Effect::NO_SERVICE,
            Alert_Effect::REDUCED_SERVICE,
            Alert_Effect::SIGNIFICANT_DELAYS,
            Alert_Effect::DETOUR,
            Alert_Effect::ADDITIONAL_SERVICE,
            Alert_Effect::MODIFIED_SERVICE,
            Alert_Effect::OTHER_EFFECT,
            Alert_Effect::UNKNOWN_EFFECT,
            Alert_Effect::STOP_MOVED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Alert_Effect", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Alert_Effect {
}

impl ::protobuf::reflect::ProtobufValue for Alert_Effect {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TimeRange {
    // message fields
    start: ::std::option::Option<u64>,
    end: ::std::option::Option<u64>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TimeRange {
    pub fn new() -> TimeRange {
        ::std::default::Default::default()
    }

    // optional uint64 start = 1;

    pub fn clear_start(&mut self) {
        self.start = ::std::option::Option::None;
    }

    pub fn has_start(&self) -> bool {
        self.start.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start(&mut self, v: u64) {
        self.start = ::std::option::Option::Some(v);
    }

    pub fn get_start(&self) -> u64 {
        self.start.unwrap_or(0)
    }

    // optional uint64 end = 2;

    pub fn clear_end(&mut self) {
        self.end = ::std::option::Option::None;
    }

    pub fn has_end(&self) -> bool {
        self.end.is_some()
    }

    // Param is passed by value, moved
    pub fn set_end(&mut self, v: u64) {
        self.end = ::std::option::Option::Some(v);
    }

    pub fn get_end(&self) -> u64 {
        self.end.unwrap_or(0)
    }
}

impl ::protobuf::Message for TimeRange {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.start = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.end = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.start {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.end {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.start {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.end {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TimeRange {
        TimeRange::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "start",
                    |m: &TimeRange| { &m.start },
                    |m: &mut TimeRange| { &mut m.start },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "end",
                    |m: &TimeRange| { &m.end },
                    |m: &mut TimeRange| { &mut m.end },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TimeRange>(
                    "TimeRange",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TimeRange {
        static mut instance: ::protobuf::lazy::Lazy<TimeRange> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TimeRange,
        };
        unsafe {
            instance.get(TimeRange::new)
        }
    }
}

impl ::protobuf::Clear for TimeRange {
    fn clear(&mut self) {
        self.clear_start();
        self.clear_end();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TimeRange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TimeRange {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Position {
    // message fields
    latitude: ::std::option::Option<f32>,
    longitude: ::std::option::Option<f32>,
    bearing: ::std::option::Option<f32>,
    odometer: ::std::option::Option<f64>,
    speed: ::std::option::Option<f32>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Position {
    pub fn new() -> Position {
        ::std::default::Default::default()
    }

    // required float latitude = 1;

    pub fn clear_latitude(&mut self) {
        self.latitude = ::std::option::Option::None;
    }

    pub fn has_latitude(&self) -> bool {
        self.latitude.is_some()
    }

    // Param is passed by value, moved
    pub fn set_latitude(&mut self, v: f32) {
        self.latitude = ::std::option::Option::Some(v);
    }

    pub fn get_latitude(&self) -> f32 {
        self.latitude.unwrap_or(0.)
    }

    // required float longitude = 2;

    pub fn clear_longitude(&mut self) {
        self.longitude = ::std::option::Option::None;
    }

    pub fn has_longitude(&self) -> bool {
        self.longitude.is_some()
    }

    // Param is passed by value, moved
    pub fn set_longitude(&mut self, v: f32) {
        self.longitude = ::std::option::Option::Some(v);
    }

    pub fn get_longitude(&self) -> f32 {
        self.longitude.unwrap_or(0.)
    }

    // optional float bearing = 3;

    pub fn clear_bearing(&mut self) {
        self.bearing = ::std::option::Option::None;
    }

    pub fn has_bearing(&self) -> bool {
        self.bearing.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bearing(&mut self, v: f32) {
        self.bearing = ::std::option::Option::Some(v);
    }

    pub fn get_bearing(&self) -> f32 {
        self.bearing.unwrap_or(0.)
    }

    // optional double odometer = 4;

    pub fn clear_odometer(&mut self) {
        self.odometer = ::std::option::Option::None;
    }

    pub fn has_odometer(&self) -> bool {
        self.odometer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_odometer(&mut self, v: f64) {
        self.odometer = ::std::option::Option::Some(v);
    }

    pub fn get_odometer(&self) -> f64 {
        self.odometer.unwrap_or(0.)
    }

    // optional float speed = 5;

    pub fn clear_speed(&mut self) {
        self.speed = ::std::option::Option::None;
    }

    pub fn has_speed(&self) -> bool {
        self.speed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_speed(&mut self, v: f32) {
        self.speed = ::std::option::Option::Some(v);
    }

    pub fn get_speed(&self) -> f32 {
        self.speed.unwrap_or(0.)
    }
}

impl ::protobuf::Message for Position {
    fn is_initialized(&self) -> bool {
        if self.latitude.is_none() {
            return false;
        }
        if self.longitude.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.latitude = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.longitude = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.bearing = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.odometer = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.speed = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.latitude {
            my_size += 5;
        }
        if let Some(v) = self.longitude {
            my_size += 5;
        }
        if let Some(v) = self.bearing {
            my_size += 5;
        }
        if let Some(v) = self.odometer {
            my_size += 9;
        }
        if let Some(v) = self.speed {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.latitude {
            os.write_float(1, v)?;
        }
        if let Some(v) = self.longitude {
            os.write_float(2, v)?;
        }
        if let Some(v) = self.bearing {
            os.write_float(3, v)?;
        }
        if let Some(v) = self.odometer {
            os.write_double(4, v)?;
        }
        if let Some(v) = self.speed {
            os.write_float(5, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Position {
        Position::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "latitude",
                    |m: &Position| { &m.latitude },
                    |m: &mut Position| { &mut m.latitude },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "longitude",
                    |m: &Position| { &m.longitude },
                    |m: &mut Position| { &mut m.longitude },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "bearing",
                    |m: &Position| { &m.bearing },
                    |m: &mut Position| { &mut m.bearing },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "odometer",
                    |m: &Position| { &m.odometer },
                    |m: &mut Position| { &mut m.odometer },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "speed",
                    |m: &Position| { &m.speed },
                    |m: &mut Position| { &mut m.speed },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Position>(
                    "Position",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Position {
        static mut instance: ::protobuf::lazy::Lazy<Position> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Position,
        };
        unsafe {
            instance.get(Position::new)
        }
    }
}

impl ::protobuf::Clear for Position {
    fn clear(&mut self) {
        self.clear_latitude();
        self.clear_longitude();
        self.clear_bearing();
        self.clear_odometer();
        self.clear_speed();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Position {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Position {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TripDescriptor {
    // message fields
    trip_id: ::protobuf::SingularField<::std::string::String>,
    route_id: ::protobuf::SingularField<::std::string::String>,
    direction_id: ::std::option::Option<u32>,
    start_time: ::protobuf::SingularField<::std::string::String>,
    start_date: ::protobuf::SingularField<::std::string::String>,
    schedule_relationship: ::std::option::Option<TripDescriptor_ScheduleRelationship>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TripDescriptor {
    pub fn new() -> TripDescriptor {
        ::std::default::Default::default()
    }

    // optional string trip_id = 1;

    pub fn clear_trip_id(&mut self) {
        self.trip_id.clear();
    }

    pub fn has_trip_id(&self) -> bool {
        self.trip_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trip_id(&mut self, v: ::std::string::String) {
        self.trip_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trip_id(&mut self) -> &mut ::std::string::String {
        if self.trip_id.is_none() {
            self.trip_id.set_default();
        }
        self.trip_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_trip_id(&mut self) -> ::std::string::String {
        self.trip_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_trip_id(&self) -> &str {
        match self.trip_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string route_id = 5;

    pub fn clear_route_id(&mut self) {
        self.route_id.clear();
    }

    pub fn has_route_id(&self) -> bool {
        self.route_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_route_id(&mut self, v: ::std::string::String) {
        self.route_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_route_id(&mut self) -> &mut ::std::string::String {
        if self.route_id.is_none() {
            self.route_id.set_default();
        }
        self.route_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_route_id(&mut self) -> ::std::string::String {
        self.route_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_route_id(&self) -> &str {
        match self.route_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional uint32 direction_id = 6;

    pub fn clear_direction_id(&mut self) {
        self.direction_id = ::std::option::Option::None;
    }

    pub fn has_direction_id(&self) -> bool {
        self.direction_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_direction_id(&mut self, v: u32) {
        self.direction_id = ::std::option::Option::Some(v);
    }

    pub fn get_direction_id(&self) -> u32 {
        self.direction_id.unwrap_or(0)
    }

    // optional string start_time = 2;

    pub fn clear_start_time(&mut self) {
        self.start_time.clear();
    }

    pub fn has_start_time(&self) -> bool {
        self.start_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_time(&mut self, v: ::std::string::String) {
        self.start_time = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_time(&mut self) -> &mut ::std::string::String {
        if self.start_time.is_none() {
            self.start_time.set_default();
        }
        self.start_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_start_time(&mut self) -> ::std::string::String {
        self.start_time.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_start_time(&self) -> &str {
        match self.start_time.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string start_date = 3;

    pub fn clear_start_date(&mut self) {
        self.start_date.clear();
    }

    pub fn has_start_date(&self) -> bool {
        self.start_date.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_date(&mut self, v: ::std::string::String) {
        self.start_date = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_date(&mut self) -> &mut ::std::string::String {
        if self.start_date.is_none() {
            self.start_date.set_default();
        }
        self.start_date.as_mut().unwrap()
    }

    // Take field
    pub fn take_start_date(&mut self) -> ::std::string::String {
        self.start_date.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_start_date(&self) -> &str {
        match self.start_date.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;

    pub fn clear_schedule_relationship(&mut self) {
        self.schedule_relationship = ::std::option::Option::None;
    }

    pub fn has_schedule_relationship(&self) -> bool {
        self.schedule_relationship.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schedule_relationship(&mut self, v: TripDescriptor_ScheduleRelationship) {
        self.schedule_relationship = ::std::option::Option::Some(v);
    }

    pub fn get_schedule_relationship(&self) -> TripDescriptor_ScheduleRelationship {
        self.schedule_relationship.unwrap_or(TripDescriptor_ScheduleRelationship::SCHEDULED)
    }
}

impl ::protobuf::Message for TripDescriptor {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.trip_id)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.route_id)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.direction_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.start_time)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.start_date)?;
                },
                4 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.schedule_relationship, 4, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.trip_id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.route_id.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.direction_id {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.start_time.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.start_date.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.schedule_relationship {
            my_size += ::protobuf::rt::enum_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.trip_id.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.route_id.as_ref() {
            os.write_string(5, &v)?;
        }
        if let Some(v) = self.direction_id {
            os.write_uint32(6, v)?;
        }
        if let Some(ref v) = self.start_time.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.start_date.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(v) = self.schedule_relationship {
            os.write_enum(4, v.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TripDescriptor {
        TripDescriptor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "trip_id",
                    |m: &TripDescriptor| { &m.trip_id },
                    |m: &mut TripDescriptor| { &mut m.trip_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "route_id",
                    |m: &TripDescriptor| { &m.route_id },
                    |m: &mut TripDescriptor| { &mut m.route_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "direction_id",
                    |m: &TripDescriptor| { &m.direction_id },
                    |m: &mut TripDescriptor| { &mut m.direction_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "start_time",
                    |m: &TripDescriptor| { &m.start_time },
                    |m: &mut TripDescriptor| { &mut m.start_time },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "start_date",
                    |m: &TripDescriptor| { &m.start_date },
                    |m: &mut TripDescriptor| { &mut m.start_date },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TripDescriptor_ScheduleRelationship>>(
                    "schedule_relationship",
                    |m: &TripDescriptor| { &m.schedule_relationship },
                    |m: &mut TripDescriptor| { &mut m.schedule_relationship },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TripDescriptor>(
                    "TripDescriptor",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TripDescriptor {
        static mut instance: ::protobuf::lazy::Lazy<TripDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TripDescriptor,
        };
        unsafe {
            instance.get(TripDescriptor::new)
        }
    }
}

impl ::protobuf::Clear for TripDescriptor {
    fn clear(&mut self) {
        self.clear_trip_id();
        self.clear_route_id();
        self.clear_direction_id();
        self.clear_start_time();
        self.clear_start_date();
        self.clear_schedule_relationship();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TripDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TripDescriptor {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TripDescriptor_ScheduleRelationship {
    SCHEDULED = 0,
    ADDED = 1,
    UNSCHEDULED = 2,
    CANCELED = 3,
}

impl ::protobuf::ProtobufEnum for TripDescriptor_ScheduleRelationship {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TripDescriptor_ScheduleRelationship> {
        match value {
            0 => ::std::option::Option::Some(TripDescriptor_ScheduleRelationship::SCHEDULED),
            1 => ::std::option::Option::Some(TripDescriptor_ScheduleRelationship::ADDED),
            2 => ::std::option::Option::Some(TripDescriptor_ScheduleRelationship::UNSCHEDULED),
            3 => ::std::option::Option::Some(TripDescriptor_ScheduleRelationship::CANCELED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TripDescriptor_ScheduleRelationship] = &[
            TripDescriptor_ScheduleRelationship::SCHEDULED,
            TripDescriptor_ScheduleRelationship::ADDED,
            TripDescriptor_ScheduleRelationship::UNSCHEDULED,
            TripDescriptor_ScheduleRelationship::CANCELED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("TripDescriptor_ScheduleRelationship", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for TripDescriptor_ScheduleRelationship {
}

impl ::protobuf::reflect::ProtobufValue for TripDescriptor_ScheduleRelationship {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VehicleDescriptor {
    // message fields
    id: ::protobuf::SingularField<::std::string::String>,
    label: ::protobuf::SingularField<::std::string::String>,
    license_plate: ::protobuf::SingularField<::std::string::String>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl VehicleDescriptor {
    pub fn new() -> VehicleDescriptor {
        ::std::default::Default::default()
    }

    // optional string id = 1;

    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        if self.id.is_none() {
            self.id.set_default();
        }
        self.id.as_mut().unwrap()
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        self.id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_id(&self) -> &str {
        match self.id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string label = 2;

    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    pub fn has_label(&self) -> bool {
        self.label.is_some()
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        if self.label.is_none() {
            self.label.set_default();
        }
        self.label.as_mut().unwrap()
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        self.label.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_label(&self) -> &str {
        match self.label.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string license_plate = 3;

    pub fn clear_license_plate(&mut self) {
        self.license_plate.clear();
    }

    pub fn has_license_plate(&self) -> bool {
        self.license_plate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_license_plate(&mut self, v: ::std::string::String) {
        self.license_plate = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_license_plate(&mut self) -> &mut ::std::string::String {
        if self.license_plate.is_none() {
            self.license_plate.set_default();
        }
        self.license_plate.as_mut().unwrap()
    }

    // Take field
    pub fn take_license_plate(&mut self) -> ::std::string::String {
        self.license_plate.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_license_plate(&self) -> &str {
        match self.license_plate.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
}

impl ::protobuf::Message for VehicleDescriptor {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.label)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.license_plate)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.label.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.license_plate.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.id.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.label.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.license_plate.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VehicleDescriptor {
        VehicleDescriptor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &VehicleDescriptor| { &m.id },
                    |m: &mut VehicleDescriptor| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "label",
                    |m: &VehicleDescriptor| { &m.label },
                    |m: &mut VehicleDescriptor| { &mut m.label },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "license_plate",
                    |m: &VehicleDescriptor| { &m.license_plate },
                    |m: &mut VehicleDescriptor| { &mut m.license_plate },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<VehicleDescriptor>(
                    "VehicleDescriptor",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static VehicleDescriptor {
        static mut instance: ::protobuf::lazy::Lazy<VehicleDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const VehicleDescriptor,
        };
        unsafe {
            instance.get(VehicleDescriptor::new)
        }
    }
}

impl ::protobuf::Clear for VehicleDescriptor {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_label();
        self.clear_license_plate();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VehicleDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VehicleDescriptor {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EntitySelector {
    // message fields
    agency_id: ::protobuf::SingularField<::std::string::String>,
    route_id: ::protobuf::SingularField<::std::string::String>,
    route_type: ::std::option::Option<i32>,
    trip: ::protobuf::SingularPtrField<TripDescriptor>,
    stop_id: ::protobuf::SingularField<::std::string::String>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl EntitySelector {
    pub fn new() -> EntitySelector {
        ::std::default::Default::default()
    }

    // optional string agency_id = 1;

    pub fn clear_agency_id(&mut self) {
        self.agency_id.clear();
    }

    pub fn has_agency_id(&self) -> bool {
        self.agency_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_agency_id(&mut self, v: ::std::string::String) {
        self.agency_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_agency_id(&mut self) -> &mut ::std::string::String {
        if self.agency_id.is_none() {
            self.agency_id.set_default();
        }
        self.agency_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_agency_id(&mut self) -> ::std::string::String {
        self.agency_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_agency_id(&self) -> &str {
        match self.agency_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string route_id = 2;

    pub fn clear_route_id(&mut self) {
        self.route_id.clear();
    }

    pub fn has_route_id(&self) -> bool {
        self.route_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_route_id(&mut self, v: ::std::string::String) {
        self.route_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_route_id(&mut self) -> &mut ::std::string::String {
        if self.route_id.is_none() {
            self.route_id.set_default();
        }
        self.route_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_route_id(&mut self) -> ::std::string::String {
        self.route_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_route_id(&self) -> &str {
        match self.route_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional int32 route_type = 3;

    pub fn clear_route_type(&mut self) {
        self.route_type = ::std::option::Option::None;
    }

    pub fn has_route_type(&self) -> bool {
        self.route_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_route_type(&mut self, v: i32) {
        self.route_type = ::std::option::Option::Some(v);
    }

    pub fn get_route_type(&self) -> i32 {
        self.route_type.unwrap_or(0)
    }

    // optional .transit_realtime.TripDescriptor trip = 4;

    pub fn clear_trip(&mut self) {
        self.trip.clear();
    }

    pub fn has_trip(&self) -> bool {
        self.trip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trip(&mut self, v: TripDescriptor) {
        self.trip = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trip(&mut self) -> &mut TripDescriptor {
        if self.trip.is_none() {
            self.trip.set_default();
        }
        self.trip.as_mut().unwrap()
    }

    // Take field
    pub fn take_trip(&mut self) -> TripDescriptor {
        self.trip.take().unwrap_or_else(|| TripDescriptor::new())
    }

    pub fn get_trip(&self) -> &TripDescriptor {
        self.trip.as_ref().unwrap_or_else(|| TripDescriptor::default_instance())
    }

    // optional string stop_id = 5;

    pub fn clear_stop_id(&mut self) {
        self.stop_id.clear();
    }

    pub fn has_stop_id(&self) -> bool {
        self.stop_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stop_id(&mut self, v: ::std::string::String) {
        self.stop_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stop_id(&mut self) -> &mut ::std::string::String {
        if self.stop_id.is_none() {
            self.stop_id.set_default();
        }
        self.stop_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_stop_id(&mut self) -> ::std::string::String {
        self.stop_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_stop_id(&self) -> &str {
        match self.stop_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
}

impl ::protobuf::Message for EntitySelector {
    fn is_initialized(&self) -> bool {
        for v in &self.trip {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.agency_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.route_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.route_type = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.trip)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.stop_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.agency_id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.route_id.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.route_type {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.trip.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.stop_id.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.agency_id.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.route_id.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.route_type {
            os.write_int32(3, v)?;
        }
        if let Some(ref v) = self.trip.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.stop_id.as_ref() {
            os.write_string(5, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EntitySelector {
        EntitySelector::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "agency_id",
                    |m: &EntitySelector| { &m.agency_id },
                    |m: &mut EntitySelector| { &mut m.agency_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "route_id",
                    |m: &EntitySelector| { &m.route_id },
                    |m: &mut EntitySelector| { &mut m.route_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "route_type",
                    |m: &EntitySelector| { &m.route_type },
                    |m: &mut EntitySelector| { &mut m.route_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TripDescriptor>>(
                    "trip",
                    |m: &EntitySelector| { &m.trip },
                    |m: &mut EntitySelector| { &mut m.trip },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "stop_id",
                    |m: &EntitySelector| { &m.stop_id },
                    |m: &mut EntitySelector| { &mut m.stop_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EntitySelector>(
                    "EntitySelector",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EntitySelector {
        static mut instance: ::protobuf::lazy::Lazy<EntitySelector> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EntitySelector,
        };
        unsafe {
            instance.get(EntitySelector::new)
        }
    }
}

impl ::protobuf::Clear for EntitySelector {
    fn clear(&mut self) {
        self.clear_agency_id();
        self.clear_route_id();
        self.clear_route_type();
        self.clear_trip();
        self.clear_stop_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EntitySelector {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EntitySelector {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TranslatedString {
    // message fields
    translation: ::protobuf::RepeatedField<TranslatedString_Translation>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TranslatedString {
    pub fn new() -> TranslatedString {
        ::std::default::Default::default()
    }

    // repeated .transit_realtime.TranslatedString.Translation translation = 1;

    pub fn clear_translation(&mut self) {
        self.translation.clear();
    }

    // Param is passed by value, moved
    pub fn set_translation(&mut self, v: ::protobuf::RepeatedField<TranslatedString_Translation>) {
        self.translation = v;
    }

    // Mutable pointer to the field.
    pub fn mut_translation(&mut self) -> &mut ::protobuf::RepeatedField<TranslatedString_Translation> {
        &mut self.translation
    }

    // Take field
    pub fn take_translation(&mut self) -> ::protobuf::RepeatedField<TranslatedString_Translation> {
        ::std::mem::replace(&mut self.translation, ::protobuf::RepeatedField::new())
    }

    pub fn get_translation(&self) -> &[TranslatedString_Translation] {
        &self.translation
    }
}

impl ::protobuf::Message for TranslatedString {
    fn is_initialized(&self) -> bool {
        for v in &self.translation {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.translation)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.translation {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.translation {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TranslatedString {
        TranslatedString::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TranslatedString_Translation>>(
                    "translation",
                    |m: &TranslatedString| { &m.translation },
                    |m: &mut TranslatedString| { &mut m.translation },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TranslatedString>(
                    "TranslatedString",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TranslatedString {
        static mut instance: ::protobuf::lazy::Lazy<TranslatedString> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TranslatedString,
        };
        unsafe {
            instance.get(TranslatedString::new)
        }
    }
}

impl ::protobuf::Clear for TranslatedString {
    fn clear(&mut self) {
        self.clear_translation();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TranslatedString {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TranslatedString {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TranslatedString_Translation {
    // message fields
    text: ::protobuf::SingularField<::std::string::String>,
    language: ::protobuf::SingularField<::std::string::String>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl TranslatedString_Translation {
    pub fn new() -> TranslatedString_Translation {
        ::std::default::Default::default()
    }

    // required string text = 1;

    pub fn clear_text(&mut self) {
        self.text.clear();
    }

    pub fn has_text(&self) -> bool {
        self.text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.text = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        if self.text.is_none() {
            self.text.set_default();
        }
        self.text.as_mut().unwrap()
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        self.text.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_text(&self) -> &str {
        match self.text.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string language = 2;

    pub fn clear_language(&mut self) {
        self.language.clear();
    }

    pub fn has_language(&self) -> bool {
        self.language.is_some()
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: ::std::string::String) {
        self.language = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_language(&mut self) -> &mut ::std::string::String {
        if self.language.is_none() {
            self.language.set_default();
        }
        self.language.as_mut().unwrap()
    }

    // Take field
    pub fn take_language(&mut self) -> ::std::string::String {
        self.language.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_language(&self) -> &str {
        match self.language.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
}

impl ::protobuf::Message for TranslatedString_Translation {
    fn is_initialized(&self) -> bool {
        if self.text.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.text)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.language)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.text.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.language.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.text.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.language.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TranslatedString_Translation {
        TranslatedString_Translation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "text",
                    |m: &TranslatedString_Translation| { &m.text },
                    |m: &mut TranslatedString_Translation| { &mut m.text },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "language",
                    |m: &TranslatedString_Translation| { &m.language },
                    |m: &mut TranslatedString_Translation| { &mut m.language },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TranslatedString_Translation>(
                    "TranslatedString_Translation",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TranslatedString_Translation {
        static mut instance: ::protobuf::lazy::Lazy<TranslatedString_Translation> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TranslatedString_Translation,
        };
        unsafe {
            instance.get(TranslatedString_Translation::new)
        }
    }
}

impl ::protobuf::Clear for TranslatedString_Translation {
    fn clear(&mut self) {
        self.clear_text();
        self.clear_language();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TranslatedString_Translation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TranslatedString_Translation {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13gtfs-realtime.proto\x12\x10transit_realtime\"\x81\x01\n\x0bFeedMes\
    sage\x124\n\x06header\x18\x01\x20\x02(\x0b2\x1c.transit_realtime.FeedHea\
    derR\x06header\x124\n\x06entity\x18\x02\x20\x03(\x0b2\x1c.transit_realti\
    me.FeedEntityR\x06entity*\x06\x08\xe8\x07\x10\xd0\x0f\"\xff\x01\n\nFeedH\
    eader\x122\n\x15gtfs_realtime_version\x18\x01\x20\x02(\tR\x13gtfsRealtim\
    eVersion\x12a\n\x0eincrementality\x18\x02\x20\x01(\x0e2+.transit_realtim\
    e.FeedHeader.Incrementality:\x0cFULL_DATASETR\x0eincrementality\x12\x1c\
    \n\ttimestamp\x18\x03\x20\x01(\x04R\ttimestamp\"4\n\x0eIncrementality\
    \x12\x10\n\x0cFULL_DATASET\x10\0\x12\x10\n\x0cDIFFERENTIAL\x10\x01*\x06\
    \x08\xe8\x07\x10\xd0\x0f\"\xf5\x01\n\nFeedEntity\x12\x0e\n\x02id\x18\x01\
    \x20\x02(\tR\x02id\x12$\n\nis_deleted\x18\x02\x20\x01(\x08:\x05falseR\ti\
    sDeleted\x12=\n\x0btrip_update\x18\x03\x20\x01(\x0b2\x1c.transit_realtim\
    e.TripUpdateR\ntripUpdate\x12;\n\x07vehicle\x18\x04\x20\x01(\x0b2!.trans\
    it_realtime.VehiclePositionR\x07vehicle\x12-\n\x05alert\x18\x05\x20\x01(\
    \x0b2\x17.transit_realtime.AlertR\x05alert*\x06\x08\xe8\x07\x10\xd0\x0f\
    \"\xa6\x06\n\nTripUpdate\x124\n\x04trip\x18\x01\x20\x02(\x0b2\x20.transi\
    t_realtime.TripDescriptorR\x04trip\x12=\n\x07vehicle\x18\x03\x20\x01(\
    \x0b2#.transit_realtime.VehicleDescriptorR\x07vehicle\x12U\n\x10stop_tim\
    e_update\x18\x02\x20\x03(\x0b2+.transit_realtime.TripUpdate.StopTimeUpda\
    teR\x0estopTimeUpdate\x12\x1c\n\ttimestamp\x18\x04\x20\x01(\x04R\ttimest\
    amp\x12\x14\n\x05delay\x18\x05\x20\x01(\x05R\x05delay\x1ac\n\rStopTimeEv\
    ent\x12\x14\n\x05delay\x18\x01\x20\x01(\x05R\x05delay\x12\x12\n\x04time\
    \x18\x02\x20\x01(\x03R\x04time\x12\x20\n\x0buncertainty\x18\x03\x20\x01(\
    \x05R\x0buncertainty*\x06\x08\xe8\x07\x10\xd0\x0f\x1a\xaa\x03\n\x0eStopT\
    imeUpdate\x12#\n\rstop_sequence\x18\x01\x20\x01(\rR\x0cstopSequence\x12\
    \x17\n\x07stop_id\x18\x04\x20\x01(\tR\x06stopId\x12D\n\x07arrival\x18\
    \x02\x20\x01(\x0b2*.transit_realtime.TripUpdate.StopTimeEventR\x07arriva\
    l\x12H\n\tdeparture\x18\x03\x20\x01(\x0b2*.transit_realtime.TripUpdate.S\
    topTimeEventR\tdeparture\x12\x80\x01\n\x15schedule_relationship\x18\x05\
    \x20\x01(\x0e2@.transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelat\
    ionship:\tSCHEDULEDR\x14scheduleRelationship\"?\n\x14ScheduleRelationshi\
    p\x12\r\n\tSCHEDULED\x10\0\x12\x0b\n\x07SKIPPED\x10\x01\x12\x0b\n\x07NO_\
    DATA\x10\x02*\x06\x08\xe8\x07\x10\xd0\x0f*\x06\x08\xe8\x07\x10\xd0\x0f\"\
    \xd2\x07\n\x0fVehiclePosition\x124\n\x04trip\x18\x01\x20\x01(\x0b2\x20.t\
    ransit_realtime.TripDescriptorR\x04trip\x12=\n\x07vehicle\x18\x08\x20\
    \x01(\x0b2#.transit_realtime.VehicleDescriptorR\x07vehicle\x126\n\x08pos\
    ition\x18\x02\x20\x01(\x0b2\x1a.transit_realtime.PositionR\x08position\
    \x122\n\x15current_stop_sequence\x18\x03\x20\x01(\rR\x13currentStopSeque\
    nce\x12\x17\n\x07stop_id\x18\x07\x20\x01(\tR\x06stopId\x12i\n\x0ecurrent\
    _status\x18\x04\x20\x01(\x0e23.transit_realtime.VehiclePosition.VehicleS\
    topStatus:\rIN_TRANSIT_TOR\rcurrentStatus\x12\x1c\n\ttimestamp\x18\x05\
    \x20\x01(\x04R\ttimestamp\x12\\\n\x10congestion_level\x18\x06\x20\x01(\
    \x0e21.transit_realtime.VehiclePosition.CongestionLevelR\x0fcongestionLe\
    vel\x12\\\n\x10occupancy_status\x18\t\x20\x01(\x0e21.transit_realtime.Ve\
    hiclePosition.OccupancyStatusR\x0foccupancyStatus\"G\n\x11VehicleStopSta\
    tus\x12\x0f\n\x0bINCOMING_AT\x10\0\x12\x0e\n\nSTOPPED_AT\x10\x01\x12\x11\
    \n\rIN_TRANSIT_TO\x10\x02\"}\n\x0fCongestionLevel\x12\x1c\n\x18UNKNOWN_C\
    ONGESTION_LEVEL\x10\0\x12\x14\n\x10RUNNING_SMOOTHLY\x10\x01\x12\x0f\n\
    \x0bSTOP_AND_GO\x10\x02\x12\x0e\n\nCONGESTION\x10\x03\x12\x15\n\x11SEVER\
    E_CONGESTION\x10\x04\"\xaf\x01\n\x0fOccupancyStatus\x12\t\n\x05EMPTY\x10\
    \0\x12\x18\n\x14MANY_SEATS_AVAILABLE\x10\x01\x12\x17\n\x13FEW_SEATS_AVAI\
    LABLE\x10\x02\x12\x16\n\x12STANDING_ROOM_ONLY\x10\x03\x12\x1e\n\x1aCRUSH\
    ED_STANDING_ROOM_ONLY\x10\x04\x12\x08\n\x04FULL\x10\x05\x12\x1c\n\x18NOT\
    _ACCEPTING_PASSENGERS\x10\x06*\x06\x08\xe8\x07\x10\xd0\x0f\"\x85\x07\n\
    \x05Alert\x12@\n\ractive_period\x18\x01\x20\x03(\x0b2\x1b.transit_realti\
    me.TimeRangeR\x0cactivePeriod\x12I\n\x0finformed_entity\x18\x05\x20\x03(\
    \x0b2\x20.transit_realtime.EntitySelectorR\x0einformedEntity\x12B\n\x05c\
    ause\x18\x06\x20\x01(\x0e2\x1d.transit_realtime.Alert.Cause:\rUNKNOWN_CA\
    USER\x05cause\x12F\n\x06effect\x18\x07\x20\x01(\x0e2\x1e.transit_realtim\
    e.Alert.Effect:\x0eUNKNOWN_EFFECTR\x06effect\x124\n\x03url\x18\x08\x20\
    \x01(\x0b2\".transit_realtime.TranslatedStringR\x03url\x12C\n\x0bheader_\
    text\x18\n\x20\x01(\x0b2\".transit_realtime.TranslatedStringR\nheaderTex\
    t\x12M\n\x10description_text\x18\x0b\x20\x01(\x0b2\".transit_realtime.Tr\
    anslatedStringR\x0fdescriptionText\"\xd8\x01\n\x05Cause\x12\x11\n\rUNKNO\
    WN_CAUSE\x10\x01\x12\x0f\n\x0bOTHER_CAUSE\x10\x02\x12\x15\n\x11TECHNICAL\
    _PROBLEM\x10\x03\x12\n\n\x06STRIKE\x10\x04\x12\x11\n\rDEMONSTRATION\x10\
    \x05\x12\x0c\n\x08ACCIDENT\x10\x06\x12\x0b\n\x07HOLIDAY\x10\x07\x12\x0b\
    \n\x07WEATHER\x10\x08\x12\x0f\n\x0bMAINTENANCE\x10\t\x12\x10\n\x0cCONSTR\
    UCTION\x10\n\x12\x13\n\x0fPOLICE_ACTIVITY\x10\x0b\x12\x15\n\x11MEDICAL_E\
    MERGENCY\x10\x0c\"\xb5\x01\n\x06Effect\x12\x0e\n\nNO_SERVICE\x10\x01\x12\
    \x13\n\x0fREDUCED_SERVICE\x10\x02\x12\x16\n\x12SIGNIFICANT_DELAYS\x10\
    \x03\x12\n\n\x06DETOUR\x10\x04\x12\x16\n\x12ADDITIONAL_SERVICE\x10\x05\
    \x12\x14\n\x10MODIFIED_SERVICE\x10\x06\x12\x10\n\x0cOTHER_EFFECT\x10\x07\
    \x12\x12\n\x0eUNKNOWN_EFFECT\x10\x08\x12\x0e\n\nSTOP_MOVED\x10\t*\x06\
    \x08\xe8\x07\x10\xd0\x0f\";\n\tTimeRange\x12\x14\n\x05start\x18\x01\x20\
    \x01(\x04R\x05start\x12\x10\n\x03end\x18\x02\x20\x01(\x04R\x03end*\x06\
    \x08\xe8\x07\x10\xd0\x0f\"\x98\x01\n\x08Position\x12\x1a\n\x08latitude\
    \x18\x01\x20\x02(\x02R\x08latitude\x12\x1c\n\tlongitude\x18\x02\x20\x02(\
    \x02R\tlongitude\x12\x18\n\x07bearing\x18\x03\x20\x01(\x02R\x07bearing\
    \x12\x1a\n\x08odometer\x18\x04\x20\x01(\x01R\x08odometer\x12\x14\n\x05sp\
    eed\x18\x05\x20\x01(\x02R\x05speed*\x06\x08\xe8\x07\x10\xd0\x0f\"\xea\
    \x02\n\x0eTripDescriptor\x12\x17\n\x07trip_id\x18\x01\x20\x01(\tR\x06tri\
    pId\x12\x19\n\x08route_id\x18\x05\x20\x01(\tR\x07routeId\x12!\n\x0cdirec\
    tion_id\x18\x06\x20\x01(\rR\x0bdirectionId\x12\x1d\n\nstart_time\x18\x02\
    \x20\x01(\tR\tstartTime\x12\x1d\n\nstart_date\x18\x03\x20\x01(\tR\tstart\
    Date\x12j\n\x15schedule_relationship\x18\x04\x20\x01(\x0e25.transit_real\
    time.TripDescriptor.ScheduleRelationshipR\x14scheduleRelationship\"O\n\
    \x14ScheduleRelationship\x12\r\n\tSCHEDULED\x10\0\x12\t\n\x05ADDED\x10\
    \x01\x12\x0f\n\x0bUNSCHEDULED\x10\x02\x12\x0c\n\x08CANCELED\x10\x03*\x06\
    \x08\xe8\x07\x10\xd0\x0f\"f\n\x11VehicleDescriptor\x12\x0e\n\x02id\x18\
    \x01\x20\x01(\tR\x02id\x12\x14\n\x05label\x18\x02\x20\x01(\tR\x05label\
    \x12#\n\rlicense_plate\x18\x03\x20\x01(\tR\x0clicensePlate*\x06\x08\xe8\
    \x07\x10\xd0\x0f\"\xbe\x01\n\x0eEntitySelector\x12\x1b\n\tagency_id\x18\
    \x01\x20\x01(\tR\x08agencyId\x12\x19\n\x08route_id\x18\x02\x20\x01(\tR\
    \x07routeId\x12\x1d\n\nroute_type\x18\x03\x20\x01(\x05R\trouteType\x124\
    \n\x04trip\x18\x04\x20\x01(\x0b2\x20.transit_realtime.TripDescriptorR\
    \x04trip\x12\x17\n\x07stop_id\x18\x05\x20\x01(\tR\x06stopId*\x06\x08\xe8\
    \x07\x10\xd0\x0f\"\xb3\x01\n\x10TranslatedString\x12P\n\x0btranslation\
    \x18\x01\x20\x03(\x0b2..transit_realtime.TranslatedString.TranslationR\
    \x0btranslation\x1aE\n\x0bTranslation\x12\x12\n\x04text\x18\x01\x20\x02(\
    \tR\x04text\x12\x1a\n\x08language\x18\x02\x20\x01(\tR\x08language*\x06\
    \x08\xe8\x07\x10\xd0\x0f*\x06\x08\xe8\x07\x10\xd0\x0fB\x1d\n\x1bcom.goog\
    le.transit.realtimeJ\xbb\xea\x01\n\x07\x12\x05\x18\0\xff\x04\x01\n\xc6\
    \x07\n\x01\x0c\x12\x03\x18\0\x122\xc7\x04\x20Copyright\x202015\x20The\
    \x20GTFS\x20Specifications\x20Authors.\n\n\x20Licensed\x20under\x20the\
    \x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20y\
    ou\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\
    \x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\
    \x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/li\
    censes/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\
    \x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20distributed\
    \x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20\
    IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20A\
    NY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\x20Li\
    cense\x20for\x20the\x20specific\x20language\x20governing\x20permissions\
    \x20and\n\x20limitations\x20under\x20the\x20License.\n2\xf1\x02\x20Proto\
    col\x20definition\x20file\x20for\x20GTFS-realtime.\n\n\x20GTFS-realtime\
    \x20lets\x20transit\x20agencies\x20provide\x20consumers\x20with\x20realt\
    ime\n\x20information\x20about\x20disruptions\x20to\x20their\x20service\
    \x20(stations\x20closed,\x20lines\x20not\n\x20operating,\x20important\
    \x20delays\x20etc),\x20location\x20of\x20their\x20vehicles\x20and\x20exp\
    ected\n\x20arrival\x20times.\n\n\x20This\x20protocol\x20is\x20published\
    \x20at:\n\x20https://developers.google.com/transit/gtfs-realtime/\n\n\
    \x08\n\x01\x08\x12\x03\x19\04\n\x0b\n\x04\x08\xe7\x07\0\x12\x03\x19\04\n\
    \x0c\n\x05\x08\xe7\x07\0\x02\x12\x03\x19\x07\x13\n\r\n\x06\x08\xe7\x07\0\
    \x02\0\x12\x03\x19\x07\x13\n\x0e\n\x07\x08\xe7\x07\0\x02\0\x01\x12\x03\
    \x19\x07\x13\n\x0c\n\x05\x08\xe7\x07\0\x07\x12\x03\x19\x163\n\x08\n\x01\
    \x02\x12\x03\x1a\x08\x18\n\xc8\x04\n\x02\x04\0\x12\x04'\03\x01\x1a\xbb\
    \x04\x20The\x20contents\x20of\x20a\x20feed\x20message.\n\x20A\x20feed\
    \x20is\x20a\x20continuous\x20stream\x20of\x20feed\x20messages.\x20Each\
    \x20message\x20in\x20the\x20stream\x20is\n\x20obtained\x20as\x20a\x20res\
    ponse\x20to\x20an\x20appropriate\x20HTTP\x20GET\x20request.\n\x20A\x20re\
    altime\x20feed\x20is\x20always\x20defined\x20with\x20relation\x20to\x20a\
    n\x20existing\x20GTFS\x20feed.\n\x20All\x20the\x20entity\x20ids\x20are\
    \x20resolved\x20with\x20respect\x20to\x20the\x20GTFS\x20feed.\n\n\x20A\
    \x20feed\x20depends\x20on\x20some\x20external\x20configuration:\n\x20-\
    \x20The\x20corresponding\x20GTFS\x20feed.\n\x20-\x20Feed\x20application\
    \x20(updates,\x20positions\x20or\x20alerts).\x20A\x20feed\x20should\x20c\
    ontain\x20only\n\x20\x20\x20items\x20of\x20one\x20specified\x20applicati\
    on;\x20all\x20the\x20other\x20entities\x20will\x20be\x20ignored.\n\x20-\
    \x20Polling\x20frequency\n\n\n\n\x03\x04\0\x01\x12\x03'\x08\x13\n9\n\x04\
    \x04\0\x02\0\x12\x03*\x02!\x1a,\x20Metadata\x20about\x20this\x20feed\x20\
    and\x20feed\x20message.\n\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03*\x02\n\n\
    \x0c\n\x05\x04\0\x02\0\x06\x12\x03*\x0b\x15\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03*\x16\x1c\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03*\x1f\x20\n$\n\x04\
    \x04\0\x02\x01\x12\x03-\x02!\x1a\x17\x20Contents\x20of\x20the\x20feed.\n\
    \n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03-\x02\n\n\x0c\n\x05\x04\0\x02\x01\
    \x06\x12\x03-\x0b\x15\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03-\x16\x1c\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03-\x1f\x20\n\xb8\x01\n\x03\x04\0\x05\
    \x12\x032\x02\x1a\x1a\xab\x01\x20The\x20extensions\x20namespace\x20allow\
    s\x203rd-party\x20developers\x20to\x20extend\x20the\n\x20GTFS-realtime\
    \x20specification\x20in\x20order\x20to\x20add\x20and\x20evaluate\x20new\
    \x20features\x20and\n\x20modifications\x20to\x20the\x20spec.\n\n\x0b\n\
    \x04\x04\0\x05\0\x12\x032\r\x19\n\x0c\n\x05\x04\0\x05\0\x01\x12\x032\r\
    \x11\n\x0c\n\x05\x04\0\x05\0\x02\x12\x032\x15\x19\n?\n\x02\x04\x01\x12\
    \x046\0O\x01\x1a3\x20Metadata\x20about\x20a\x20feed,\x20included\x20in\
    \x20feed\x20messages.\n\n\n\n\x03\x04\x01\x01\x12\x036\x08\x12\nN\n\x04\
    \x04\x01\x02\0\x12\x039\x02,\x1aA\x20Version\x20of\x20the\x20feed\x20spe\
    cification.\n\x20The\x20current\x20version\x20is\x201.0.\n\n\x0c\n\x05\
    \x04\x01\x02\0\x04\x12\x039\x02\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x039\
    \x0b\x11\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x039\x12'\n\x0c\n\x05\x04\x01\
    \x02\0\x03\x12\x039*+\n\xef\x02\n\x04\x04\x01\x04\0\x12\x04@\x02C\x03\
    \x1a\xe0\x02\x20Determines\x20whether\x20the\x20current\x20fetch\x20is\
    \x20incremental.\x20\x20Currently,\n\x20DIFFERENTIAL\x20mode\x20is\x20un\
    supported\x20and\x20behavior\x20is\x20unspecified\x20for\x20feeds\n\x20t\
    hat\x20use\x20this\x20mode.\x20\x20There\x20are\x20discussions\x20on\x20\
    the\x20GTFS-realtime\x20mailing\n\x20list\x20around\x20fully\x20specifyi\
    ng\x20the\x20behavior\x20of\x20DIFFERENTIAL\x20mode\x20and\x20the\n\x20d\
    ocumentation\x20will\x20be\x20updated\x20when\x20those\x20discussions\
    \x20are\x20finalized.\n\n\x0c\n\x05\x04\x01\x04\0\x01\x12\x03@\x07\x15\n\
    \r\n\x06\x04\x01\x04\0\x02\0\x12\x03A\x04\x15\n\x0e\n\x07\x04\x01\x04\0\
    \x02\0\x01\x12\x03A\x04\x10\n\x0e\n\x07\x04\x01\x04\0\x02\0\x02\x12\x03A\
    \x13\x14\n\r\n\x06\x04\x01\x04\0\x02\x01\x12\x03B\x04\x15\n\x0e\n\x07\
    \x04\x01\x04\0\x02\x01\x01\x12\x03B\x04\x10\n\x0e\n\x07\x04\x01\x04\0\
    \x02\x01\x02\x12\x03B\x13\x14\n\x0b\n\x04\x04\x01\x02\x01\x12\x03D\x02F\
    \n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03D\x02\n\n\x0c\n\x05\x04\x01\x02\
    \x01\x06\x12\x03D\x0b\x19\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03D\x1a(\
    \n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03D+,\n\x0c\n\x05\x04\x01\x02\x01\
    \x08\x12\x03D-E\n\x0c\n\x05\x04\x01\x02\x01\x07\x12\x03D8D\n\xc4\x01\n\
    \x04\x04\x01\x02\x02\x12\x03I\x02\x20\x1a\xb6\x01\x20This\x20timestamp\
    \x20identifies\x20the\x20moment\x20when\x20the\x20content\x20of\x20this\
    \x20feed\x20has\x20been\n\x20created\x20(in\x20server\x20time).\x20In\
    \x20POSIX\x20time\x20(i.e.,\x20number\x20of\x20seconds\x20since\n\x20Jan\
    uary\x201st\x201970\x2000:00:00\x20UTC).\n\n\x0c\n\x05\x04\x01\x02\x02\
    \x04\x12\x03I\x02\n\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03I\x0b\x11\n\
    \x0c\n\x05\x04\x01\x02\x02\x01\x12\x03I\x12\x1b\n\x0c\n\x05\x04\x01\x02\
    \x02\x03\x12\x03I\x1e\x1f\n\xb8\x01\n\x03\x04\x01\x05\x12\x03N\x02\x1a\
    \x1a\xab\x01\x20The\x20extensions\x20namespace\x20allows\x203rd-party\
    \x20developers\x20to\x20extend\x20the\n\x20GTFS-realtime\x20specificatio\
    n\x20in\x20order\x20to\x20add\x20and\x20evaluate\x20new\x20features\x20a\
    nd\n\x20modifications\x20to\x20the\x20spec.\n\n\x0b\n\x04\x04\x01\x05\0\
    \x12\x03N\r\x19\n\x0c\n\x05\x04\x01\x05\0\x01\x12\x03N\r\x11\n\x0c\n\x05\
    \x04\x01\x05\0\x02\x12\x03N\x15\x19\nH\n\x02\x04\x02\x12\x04R\0k\x01\x1a\
    <\x20A\x20definition\x20(or\x20update)\x20of\x20an\x20entity\x20in\x20th\
    e\x20transit\x20feed.\n\n\n\n\x03\x04\x02\x01\x12\x03R\x08\x12\n\xfa\x03\
    \n\x04\x04\x02\x02\0\x12\x03[\x02\x19\x1a\xec\x03\x20The\x20ids\x20are\
    \x20used\x20only\x20to\x20provide\x20incrementality\x20support.\x20The\
    \x20id\x20should\x20be\n\x20unique\x20within\x20a\x20FeedMessage.\x20Con\
    sequent\x20FeedMessages\x20may\x20contain\n\x20FeedEntities\x20with\x20t\
    he\x20same\x20id.\x20In\x20case\x20of\x20a\x20DIFFERENTIAL\x20update\x20\
    the\x20new\n\x20FeedEntity\x20with\x20some\x20id\x20will\x20replace\x20t\
    he\x20old\x20FeedEntity\x20with\x20the\x20same\x20id\n\x20(or\x20delete\
    \x20it\x20-\x20see\x20is_deleted\x20below).\n\x20The\x20actual\x20GTFS\
    \x20entities\x20(e.g.\x20stations,\x20routes,\x20trips)\x20referenced\
    \x20by\x20the\n\x20feed\x20must\x20be\x20specified\x20by\x20explicit\x20\
    selectors\x20(see\x20EntitySelector\x20below\x20for\n\x20more\x20info).\
    \n\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03[\x02\n\n\x0c\n\x05\x04\x02\x02\
    \0\x05\x12\x03[\x0b\x11\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03[\x12\x14\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x03[\x17\x18\n\\\n\x04\x04\x02\x02\x01\
    \x12\x03_\x021\x1aO\x20Whether\x20this\x20entity\x20is\x20to\x20be\x20de\
    leted.\x20Relevant\x20only\x20for\x20incremental\n\x20fetches.\n\n\x0c\n\
    \x05\x04\x02\x02\x01\x04\x12\x03_\x02\n\n\x0c\n\x05\x04\x02\x02\x01\x05\
    \x12\x03_\x0b\x0f\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03_\x10\x1a\n\x0c\
    \n\x05\x04\x02\x02\x01\x03\x12\x03_\x1d\x1e\n\x0c\n\x05\x04\x02\x02\x01\
    \x08\x12\x03_\x1f0\n\x0c\n\x05\x04\x02\x02\x01\x07\x12\x03_*/\n\x87\x01\
    \n\x04\x04\x02\x02\x02\x12\x03c\x02&\x1az\x20Data\x20about\x20the\x20ent\
    ity\x20itself.\x20Exactly\x20one\x20of\x20the\x20following\x20fields\x20\
    must\x20be\n\x20present\x20(unless\x20the\x20entity\x20is\x20being\x20de\
    leted).\n\n\x0c\n\x05\x04\x02\x02\x02\x04\x12\x03c\x02\n\n\x0c\n\x05\x04\
    \x02\x02\x02\x06\x12\x03c\x0b\x15\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\
    \x03c\x16!\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03c$%\n\x0b\n\x04\x04\
    \x02\x02\x03\x12\x03d\x02'\n\x0c\n\x05\x04\x02\x02\x03\x04\x12\x03d\x02\
    \n\n\x0c\n\x05\x04\x02\x02\x03\x06\x12\x03d\x0b\x1a\n\x0c\n\x05\x04\x02\
    \x02\x03\x01\x12\x03d\x1b\"\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03d%&\n\
    \x0b\n\x04\x04\x02\x02\x04\x12\x03e\x02\x1b\n\x0c\n\x05\x04\x02\x02\x04\
    \x04\x12\x03e\x02\n\n\x0c\n\x05\x04\x02\x02\x04\x06\x12\x03e\x0b\x10\n\
    \x0c\n\x05\x04\x02\x02\x04\x01\x12\x03e\x11\x16\n\x0c\n\x05\x04\x02\x02\
    \x04\x03\x12\x03e\x19\x1a\n\xb8\x01\n\x03\x04\x02\x05\x12\x03j\x02\x1a\
    \x1a\xab\x01\x20The\x20extensions\x20namespace\x20allows\x203rd-party\
    \x20developers\x20to\x20extend\x20the\n\x20GTFS-realtime\x20specificatio\
    n\x20in\x20order\x20to\x20add\x20and\x20evaluate\x20new\x20features\x20a\
    nd\n\x20modifications\x20to\x20the\x20spec.\n\n\x0b\n\x04\x04\x02\x05\0\
    \x12\x03j\r\x19\n\x0c\n\x05\x04\x02\x05\0\x01\x12\x03j\r\x11\n\x0c\n\x05\
    \x04\x02\x05\0\x02\x12\x03j\x15\x19\n\xef\x0c\n\x02\x04\x03\x12\x06\x8b\
    \x01\0\x99\x02\x01\x1a\xc0\x0c\x20Realtime\x20update\x20of\x20the\x20pro\
    gress\x20of\x20a\x20vehicle\x20along\x20a\x20trip.\n\x20Depending\x20on\
    \x20the\x20value\x20of\x20ScheduleRelationship,\x20a\x20TripUpdate\x20ca\
    n\x20specify:\n\x20-\x20A\x20trip\x20that\x20proceeds\x20along\x20the\
    \x20schedule.\n\x20-\x20A\x20trip\x20that\x20proceeds\x20along\x20a\x20r\
    oute\x20but\x20has\x20no\x20fixed\x20schedule.\n\x20-\x20A\x20trip\x20th\
    at\x20have\x20been\x20added\x20or\x20removed\x20with\x20regard\x20to\x20\
    schedule.\n\n\x20The\x20updates\x20can\x20be\x20for\x20future,\x20predic\
    ted\x20arrival/departure\x20events,\x20or\x20for\n\x20past\x20events\x20\
    that\x20already\x20occurred.\n\x20Normally,\x20updates\x20should\x20get\
    \x20more\x20precise\x20and\x20more\x20certain\x20(see\n\x20uncertainty\
    \x20below)\x20as\x20the\x20events\x20gets\x20closer\x20to\x20current\x20\
    time.\n\x20Even\x20if\x20that\x20is\x20not\x20possible,\x20the\x20inform\
    ation\x20for\x20past\x20events\x20should\x20be\n\x20precise\x20and\x20ce\
    rtain.\x20In\x20particular,\x20if\x20an\x20update\x20points\x20to\x20tim\
    e\x20in\x20the\x20past\n\x20but\x20its\x20update's\x20uncertainty\x20is\
    \x20not\x200,\x20the\x20client\x20should\x20conclude\x20that\x20the\n\
    \x20update\x20is\x20a\x20(wrong)\x20prediction\x20and\x20that\x20the\x20\
    trip\x20has\x20not\x20completed\x20yet.\n\n\x20Note\x20that\x20the\x20up\
    date\x20can\x20describe\x20a\x20trip\x20that\x20is\x20already\x20complet\
    ed.\n\x20To\x20this\x20end,\x20it\x20is\x20enough\x20to\x20provide\x20an\
    \x20update\x20for\x20the\x20last\x20stop\x20of\x20the\x20trip.\n\x20If\
    \x20the\x20time\x20of\x20that\x20is\x20in\x20the\x20past,\x20the\x20clie\
    nt\x20will\x20conclude\x20from\x20that\x20that\n\x20the\x20whole\x20trip\
    \x20is\x20in\x20the\x20past\x20(it\x20is\x20possible,\x20although\x20inc\
    onsequential,\x20to\n\x20also\x20provide\x20updates\x20for\x20preceding\
    \x20stops).\n\x20This\x20option\x20is\x20most\x20relevant\x20for\x20a\
    \x20trip\x20that\x20has\x20completed\x20ahead\x20of\x20schedule,\n\x20bu\
    t\x20according\x20to\x20the\x20schedule,\x20the\x20trip\x20is\x20still\
    \x20proceeding\x20at\x20the\x20current\n\x20time.\x20Removing\x20the\x20\
    updates\x20for\x20this\x20trip\x20could\x20make\x20the\x20client\x20assu\
    me\n\x20that\x20the\x20trip\x20is\x20still\x20proceeding.\n\x20Note\x20t\
    hat\x20the\x20feed\x20provider\x20is\x20allowed,\x20but\x20not\x20requir\
    ed,\x20to\x20purge\x20past\n\x20updates\x20-\x20this\x20is\x20one\x20cas\
    e\x20where\x20this\x20would\x20be\x20practically\x20useful.\n2\x1e\n\x20\
    Entities\x20used\x20in\x20the\x20feed.\n\n\n\x0b\n\x03\x04\x03\x01\x12\
    \x04\x8b\x01\x08\x12\n\x96\x02\n\x04\x04\x03\x02\0\x12\x04\x90\x01\x02#\
    \x1a\x87\x02\x20The\x20Trip\x20that\x20this\x20message\x20applies\x20to.\
    \x20There\x20can\x20be\x20at\x20most\x20one\n\x20TripUpdate\x20entity\
    \x20for\x20each\x20actual\x20trip\x20instance.\n\x20If\x20there\x20is\
    \x20none,\x20that\x20means\x20there\x20is\x20no\x20prediction\x20informa\
    tion\x20available.\n\x20It\x20does\x20*not*\x20mean\x20that\x20the\x20tr\
    ip\x20is\x20progressing\x20according\x20to\x20schedule.\n\n\r\n\x05\x04\
    \x03\x02\0\x04\x12\x04\x90\x01\x02\n\n\r\n\x05\x04\x03\x02\0\x06\x12\x04\
    \x90\x01\x0b\x19\n\r\n\x05\x04\x03\x02\0\x01\x12\x04\x90\x01\x1a\x1e\n\r\
    \n\x05\x04\x03\x02\0\x03\x12\x04\x90\x01!\"\nP\n\x04\x04\x03\x02\x01\x12\
    \x04\x93\x01\x02)\x1aB\x20Additional\x20information\x20on\x20the\x20vehi\
    cle\x20that\x20is\x20serving\x20this\x20trip.\n\n\r\n\x05\x04\x03\x02\
    \x01\x04\x12\x04\x93\x01\x02\n\n\r\n\x05\x04\x03\x02\x01\x06\x12\x04\x93\
    \x01\x0b\x1c\n\r\n\x05\x04\x03\x02\x01\x01\x12\x04\x93\x01\x1d$\n\r\n\
    \x05\x04\x03\x02\x01\x03\x12\x04\x93\x01'(\n\xb3\x06\n\x04\x04\x03\x03\0\
    \x12\x06\xa4\x01\x02\xb9\x01\x03\x1a\xa2\x06\x20Timing\x20information\
    \x20for\x20a\x20single\x20predicted\x20event\x20(either\x20arrival\x20or\
    \n\x20departure).\n\x20Timing\x20consists\x20of\x20delay\x20and/or\x20es\
    timated\x20time,\x20and\x20uncertainty.\n\x20-\x20delay\x20should\x20be\
    \x20used\x20when\x20the\x20prediction\x20is\x20given\x20relative\x20to\
    \x20some\n\x20\x20\x20existing\x20schedule\x20in\x20GTFS.\n\x20-\x20time\
    \x20should\x20be\x20given\x20whether\x20there\x20is\x20a\x20predicted\
    \x20schedule\x20or\x20not.\x20If\n\x20\x20\x20both\x20time\x20and\x20del\
    ay\x20are\x20specified,\x20time\x20will\x20take\x20precedence\n\x20\x20\
    \x20(although\x20normally,\x20time,\x20if\x20given\x20for\x20a\x20schedu\
    led\x20trip,\x20should\x20be\n\x20\x20\x20equal\x20to\x20scheduled\x20ti\
    me\x20in\x20GTFS\x20+\x20delay).\n\n\x20Uncertainty\x20applies\x20equall\
    y\x20to\x20both\x20time\x20and\x20delay.\n\x20The\x20uncertainty\x20roug\
    hly\x20specifies\x20the\x20expected\x20error\x20in\x20true\x20delay\x20(\
    but\n\x20note,\x20we\x20don't\x20yet\x20define\x20its\x20precise\x20stat\
    istical\x20meaning).\x20It's\x20possible\n\x20for\x20the\x20uncertainty\
    \x20to\x20be\x200,\x20for\x20example\x20for\x20trains\x20that\x20are\x20\
    driven\x20under\n\x20computer\x20timing\x20control.\n\n\r\n\x05\x04\x03\
    \x03\0\x01\x12\x04\xa4\x01\n\x17\n\xcd\x01\n\x06\x04\x03\x03\0\x02\0\x12\
    \x04\xa8\x01\x04\x1d\x1a\xbc\x01\x20Delay\x20(in\x20seconds)\x20can\x20b\
    e\x20positive\x20(meaning\x20that\x20the\x20vehicle\x20is\x20late)\x20or\
    \n\x20negative\x20(meaning\x20that\x20the\x20vehicle\x20is\x20ahead\x20o\
    f\x20schedule).\x20Delay\x20of\x200\n\x20means\x20that\x20the\x20vehicle\
    \x20is\x20exactly\x20on\x20time.\n\n\x0f\n\x07\x04\x03\x03\0\x02\0\x04\
    \x12\x04\xa8\x01\x04\x0c\n\x0f\n\x07\x04\x03\x03\0\x02\0\x05\x12\x04\xa8\
    \x01\r\x12\n\x0f\n\x07\x04\x03\x03\0\x02\0\x01\x12\x04\xa8\x01\x13\x18\n\
    \x0f\n\x07\x04\x03\x03\0\x02\0\x03\x12\x04\xa8\x01\x1b\x1c\nw\n\x06\x04\
    \x03\x03\0\x02\x01\x12\x04\xad\x01\x04\x1c\x1ag\x20Event\x20as\x20absolu\
    te\x20time.\n\x20In\x20Unix\x20time\x20(i.e.,\x20number\x20of\x20seconds\
    \x20since\x20January\x201st\x201970\x2000:00:00\n\x20UTC).\n\n\x0f\n\x07\
    \x04\x03\x03\0\x02\x01\x04\x12\x04\xad\x01\x04\x0c\n\x0f\n\x07\x04\x03\
    \x03\0\x02\x01\x05\x12\x04\xad\x01\r\x12\n\x0f\n\x07\x04\x03\x03\0\x02\
    \x01\x01\x12\x04\xad\x01\x13\x17\n\x0f\n\x07\x04\x03\x03\0\x02\x01\x03\
    \x12\x04\xad\x01\x1a\x1b\n\x9e\x02\n\x06\x04\x03\x03\0\x02\x02\x12\x04\
    \xb3\x01\x04#\x1a\x8d\x02\x20If\x20uncertainty\x20is\x20omitted,\x20it\
    \x20is\x20interpreted\x20as\x20unknown.\n\x20If\x20the\x20prediction\x20\
    is\x20unknown\x20or\x20too\x20uncertain,\x20the\x20delay\x20(or\x20time)\
    \x20field\n\x20should\x20be\x20empty.\x20In\x20such\x20case,\x20the\x20u\
    ncertainty\x20field\x20is\x20ignored.\n\x20To\x20specify\x20a\x20complet\
    ely\x20certain\x20prediction,\x20set\x20its\x20uncertainty\x20to\x200.\n\
    \n\x0f\n\x07\x04\x03\x03\0\x02\x02\x04\x12\x04\xb3\x01\x04\x0c\n\x0f\n\
    \x07\x04\x03\x03\0\x02\x02\x05\x12\x04\xb3\x01\r\x12\n\x0f\n\x07\x04\x03\
    \x03\0\x02\x02\x01\x12\x04\xb3\x01\x13\x1e\n\x0f\n\x07\x04\x03\x03\0\x02\
    \x02\x03\x12\x04\xb3\x01!\"\n\xbb\x01\n\x05\x04\x03\x03\0\x05\x12\x04\
    \xb8\x01\x04\x1c\x1a\xab\x01\x20The\x20extensions\x20namespace\x20allows\
    \x203rd-party\x20developers\x20to\x20extend\x20the\n\x20GTFS-realtime\
    \x20specification\x20in\x20order\x20to\x20add\x20and\x20evaluate\x20new\
    \x20features\n\x20and\x20modifications\x20to\x20the\x20spec.\n\n\x0e\n\
    \x06\x04\x03\x03\0\x05\0\x12\x04\xb8\x01\x0f\x1b\n\x0f\n\x07\x04\x03\x03\
    \0\x05\0\x01\x12\x04\xb8\x01\x0f\x13\n\x0f\n\x07\x04\x03\x03\0\x05\0\x02\
    \x12\x04\xb8\x01\x17\x1b\n\xab\x03\n\x04\x04\x03\x03\x01\x12\x06\xbe\x01\
    \x02\xe6\x01\x03\x1a\xd1\x01\x20Realtime\x20update\x20for\x20arrival\x20\
    and/or\x20departure\x20events\x20for\x20a\x20given\x20stop\x20on\x20a\n\
    \x20trip.\x20Updates\x20can\x20be\x20supplied\x20for\x20both\x20past\x20\
    and\x20future\x20events.\n\x20The\x20producer\x20is\x20allowed,\x20altho\
    ugh\x20not\x20required,\x20to\x20drop\x20past\x20events.\n\"\xc6\x01\x20\
    The\x20update\x20is\x20linked\x20to\x20a\x20specific\x20stop\x20either\
    \x20through\x20stop_sequence\x20or\n\x20stop_id,\x20so\x20one\x20of\x20t\
    he\x20fields\x20below\x20must\x20necessarily\x20be\x20set.\n\x20See\x20t\
    he\x20documentation\x20in\x20TripDescriptor\x20for\x20more\x20informatio\
    n.\n\n\r\n\x05\x04\x03\x03\x01\x01\x12\x04\xbe\x01\n\x18\nW\n\x06\x04\
    \x03\x03\x01\x02\0\x12\x04\xc4\x01\x04&\x1aG\x20Must\x20be\x20the\x20sam\
    e\x20as\x20in\x20stop_times.txt\x20in\x20the\x20corresponding\x20GTFS\
    \x20feed.\n\n\x0f\n\x07\x04\x03\x03\x01\x02\0\x04\x12\x04\xc4\x01\x04\
    \x0c\n\x0f\n\x07\x04\x03\x03\x01\x02\0\x05\x12\x04\xc4\x01\r\x13\n\x0f\n\
    \x07\x04\x03\x03\x01\x02\0\x01\x12\x04\xc4\x01\x14!\n\x0f\n\x07\x04\x03\
    \x03\x01\x02\0\x03\x12\x04\xc4\x01$%\nR\n\x06\x04\x03\x03\x01\x02\x01\
    \x12\x04\xc6\x01\x04\x20\x1aB\x20Must\x20be\x20the\x20same\x20as\x20in\
    \x20stops.txt\x20in\x20the\x20corresponding\x20GTFS\x20feed.\n\n\x0f\n\
    \x07\x04\x03\x03\x01\x02\x01\x04\x12\x04\xc6\x01\x04\x0c\n\x0f\n\x07\x04\
    \x03\x03\x01\x02\x01\x05\x12\x04\xc6\x01\r\x13\n\x0f\n\x07\x04\x03\x03\
    \x01\x02\x01\x01\x12\x04\xc6\x01\x14\x1b\n\x0f\n\x07\x04\x03\x03\x01\x02\
    \x01\x03\x12\x04\xc6\x01\x1e\x1f\n\x0e\n\x06\x04\x03\x03\x01\x02\x02\x12\
    \x04\xc8\x01\x04'\n\x0f\n\x07\x04\x03\x03\x01\x02\x02\x04\x12\x04\xc8\
    \x01\x04\x0c\n\x0f\n\x07\x04\x03\x03\x01\x02\x02\x06\x12\x04\xc8\x01\r\
    \x1a\n\x0f\n\x07\x04\x03\x03\x01\x02\x02\x01\x12\x04\xc8\x01\x1b\"\n\x0f\
    \n\x07\x04\x03\x03\x01\x02\x02\x03\x12\x04\xc8\x01%&\n\x0e\n\x06\x04\x03\
    \x03\x01\x02\x03\x12\x04\xc9\x01\x04)\n\x0f\n\x07\x04\x03\x03\x01\x02\
    \x03\x04\x12\x04\xc9\x01\x04\x0c\n\x0f\n\x07\x04\x03\x03\x01\x02\x03\x06\
    \x12\x04\xc9\x01\r\x1a\n\x0f\n\x07\x04\x03\x03\x01\x02\x03\x01\x12\x04\
    \xc9\x01\x1b$\n\x0f\n\x07\x04\x03\x03\x01\x02\x03\x03\x12\x04\xc9\x01'(\
    \nO\n\x06\x04\x03\x03\x01\x04\0\x12\x06\xcc\x01\x04\xde\x01\x05\x1a=\x20\
    The\x20relation\x20between\x20this\x20StopTime\x20and\x20the\x20static\
    \x20schedule.\n\n\x0f\n\x07\x04\x03\x03\x01\x04\0\x01\x12\x04\xcc\x01\t\
    \x1d\n\xbe\x02\n\x08\x04\x03\x03\x01\x04\0\x02\0\x12\x04\xd2\x01\x06\x14\
    \x1a\xab\x02\x20The\x20vehicle\x20is\x20proceeding\x20in\x20accordance\
    \x20with\x20its\x20static\x20schedule\x20of\n\x20stops,\x20although\x20n\
    ot\x20necessarily\x20according\x20to\x20the\x20times\x20of\x20the\x20sch\
    edule.\n\x20At\x20least\x20one\x20of\x20arrival\x20and\x20departure\x20m\
    ust\x20be\x20provided.\x20If\x20the\x20schedule\n\x20for\x20this\x20stop\
    \x20contains\x20both\x20arrival\x20and\x20departure\x20times\x20then\x20\
    so\x20must\n\x20this\x20update.\n\n\x11\n\t\x04\x03\x03\x01\x04\0\x02\0\
    \x01\x12\x04\xd2\x01\x06\x0f\n\x11\n\t\x04\x03\x03\x01\x04\0\x02\0\x02\
    \x12\x04\xd2\x01\x12\x13\n{\n\x08\x04\x03\x03\x01\x04\0\x02\x01\x12\x04\
    \xd6\x01\x06\x12\x1ai\x20The\x20stop\x20is\x20skipped,\x20i.e.,\x20the\
    \x20vehicle\x20will\x20not\x20stop\x20at\x20this\x20stop.\n\x20Arrival\
    \x20and\x20departure\x20are\x20optional.\n\n\x11\n\t\x04\x03\x03\x01\x04\
    \0\x02\x01\x01\x12\x04\xd6\x01\x06\r\n\x11\n\t\x04\x03\x03\x01\x04\0\x02\
    \x01\x02\x12\x04\xd6\x01\x10\x11\n\xdc\x02\n\x08\x04\x03\x03\x01\x04\0\
    \x02\x02\x12\x04\xdd\x01\x06\x12\x1a\xc9\x02\x20No\x20data\x20is\x20give\
    n\x20for\x20this\x20stop.\x20The\x20main\x20intention\x20for\x20this\x20\
    value\x20is\x20to\n\x20give\x20the\x20predictions\x20only\x20for\x20part\
    \x20of\x20a\x20trip,\x20i.e.,\x20if\x20the\x20last\x20update\n\x20for\
    \x20a\x20trip\x20has\x20a\x20NO_DATA\x20specifier,\x20then\x20StopTimes\
    \x20for\x20the\x20rest\x20of\x20the\n\x20stops\x20in\x20the\x20trip\x20a\
    re\x20considered\x20to\x20be\x20unspecified\x20as\x20well.\n\x20Neither\
    \x20arrival\x20nor\x20departure\x20should\x20be\x20supplied.\n\n\x11\n\t\
    \x04\x03\x03\x01\x04\0\x02\x02\x01\x12\x04\xdd\x01\x06\r\n\x11\n\t\x04\
    \x03\x03\x01\x04\0\x02\x02\x02\x12\x04\xdd\x01\x10\x11\n\x10\n\x06\x04\
    \x03\x03\x01\x02\x04\x12\x06\xdf\x01\x04\xe0\x01\x1e\n\x0f\n\x07\x04\x03\
    \x03\x01\x02\x04\x04\x12\x04\xdf\x01\x04\x0c\n\x0f\n\x07\x04\x03\x03\x01\
    \x02\x04\x06\x12\x04\xdf\x01\r!\n\x0f\n\x07\x04\x03\x03\x01\x02\x04\x01\
    \x12\x04\xdf\x01\"7\n\x0f\n\x07\x04\x03\x03\x01\x02\x04\x03\x12\x04\xdf\
    \x01:;\n\x0f\n\x07\x04\x03\x03\x01\x02\x04\x08\x12\x04\xe0\x01\x08\x1d\n\
    \x0f\n\x07\x04\x03\x03\x01\x02\x04\x07\x12\x04\xe0\x01\x13\x1c\n\xbb\x01\
    \n\x05\x04\x03\x03\x01\x05\x12\x04\xe5\x01\x04\x1c\x1a\xab\x01\x20The\
    \x20extensions\x20namespace\x20allows\x203rd-party\x20developers\x20to\
    \x20extend\x20the\n\x20GTFS-realtime\x20specification\x20in\x20order\x20\
    to\x20add\x20and\x20evaluate\x20new\x20features\n\x20and\x20modification\
    s\x20to\x20the\x20spec.\n\n\x0e\n\x06\x04\x03\x03\x01\x05\0\x12\x04\xe5\
    \x01\x0f\x1b\n\x0f\n\x07\x04\x03\x03\x01\x05\0\x01\x12\x04\xe5\x01\x0f\
    \x13\n\x0f\n\x07\x04\x03\x03\x01\x05\0\x02\x12\x04\xe5\x01\x17\x1b\n\xbd\
    \x06\n\x04\x04\x03\x02\x02\x12\x04\xfb\x01\x02/\x1a\xae\x06\x20Updates\
    \x20to\x20StopTimes\x20for\x20the\x20trip\x20(both\x20future,\x20i.e.,\
    \x20predictions,\x20and\x20in\n\x20some\x20cases,\x20past\x20ones,\x20i.\
    e.,\x20those\x20that\x20already\x20happened).\n\x20The\x20updates\x20mus\
    t\x20be\x20sorted\x20by\x20stop_sequence,\x20and\x20apply\x20for\x20all\
    \x20the\n\x20following\x20stops\x20of\x20the\x20trip\x20up\x20to\x20the\
    \x20next\x20specified\x20one.\n\n\x20Example\x201:\n\x20For\x20a\x20trip\
    \x20with\x2020\x20stops,\x20a\x20StopTimeUpdate\x20with\x20arrival\x20de\
    lay\x20and\x20departure\n\x20delay\x20of\x200\x20for\x20stop_sequence\
    \x20of\x20the\x20current\x20stop\x20means\x20that\x20the\x20trip\x20is\n\
    \x20exactly\x20on\x20time.\n\n\x20Example\x202:\n\x20For\x20the\x20same\
    \x20trip\x20instance,\x203\x20StopTimeUpdates\x20are\x20provided:\n\x20-\
    \x20delay\x20of\x205\x20min\x20for\x20stop_sequence\x203\n\x20-\x20delay\
    \x20of\x201\x20min\x20for\x20stop_sequence\x208\n\x20-\x20delay\x20of\
    \x20unspecified\x20duration\x20for\x20stop_sequence\x2010\n\x20This\x20w\
    ill\x20be\x20interpreted\x20as:\n\x20-\x20stop_sequences\x203,4,5,6,7\
    \x20have\x20delay\x20of\x205\x20min.\n\x20-\x20stop_sequences\x208,9\x20\
    have\x20delay\x20of\x201\x20min.\n\x20-\x20stop_sequences\x2010,...\x20h\
    ave\x20unknown\x20delay.\n\n\r\n\x05\x04\x03\x02\x02\x04\x12\x04\xfb\x01\
    \x02\n\n\r\n\x05\x04\x03\x02\x02\x06\x12\x04\xfb\x01\x0b\x19\n\r\n\x05\
    \x04\x03\x02\x02\x01\x12\x04\xfb\x01\x1a*\n\r\n\x05\x04\x03\x02\x02\x03\
    \x12\x04\xfb\x01-.\n\xa1\x01\n\x04\x04\x03\x02\x03\x12\x04\xff\x01\x02\
    \x20\x1a\x92\x01\x20Moment\x20at\x20which\x20the\x20vehicle's\x20real-ti\
    me\x20progress\x20was\x20measured.\x20In\x20POSIX\n\x20time\x20(i.e.,\
    \x20the\x20number\x20of\x20seconds\x20since\x20January\x201st\x201970\
    \x2000:00:00\x20UTC).\n\n\r\n\x05\x04\x03\x02\x03\x04\x12\x04\xff\x01\
    \x02\n\n\r\n\x05\x04\x03\x02\x03\x05\x12\x04\xff\x01\x0b\x11\n\r\n\x05\
    \x04\x03\x02\x03\x01\x12\x04\xff\x01\x12\x1b\n\r\n\x05\x04\x03\x02\x03\
    \x03\x12\x04\xff\x01\x1e\x1f\n\xdd\x06\n\x04\x04\x03\x02\x04\x12\x04\x93\
    \x02\x02\x1b\x1a\xce\x06\x20The\x20current\x20schedule\x20deviation\x20f\
    or\x20the\x20trip.\x20\x20Delay\x20should\x20only\x20be\n\x20specified\
    \x20when\x20the\x20prediction\x20is\x20given\x20relative\x20to\x20some\
    \x20existing\x20schedule\n\x20in\x20GTFS.\n\n\x20Delay\x20(in\x20seconds\
    )\x20can\x20be\x20positive\x20(meaning\x20that\x20the\x20vehicle\x20is\
    \x20late)\x20or\n\x20negative\x20(meaning\x20that\x20the\x20vehicle\x20i\
    s\x20ahead\x20of\x20schedule).\x20Delay\x20of\x200\n\x20means\x20that\
    \x20the\x20vehicle\x20is\x20exactly\x20on\x20time.\n\n\x20Delay\x20infor\
    mation\x20in\x20StopTimeUpdates\x20take\x20precedent\x20of\x20trip-level\
    \x20delay\n\x20information,\x20such\x20that\x20trip-level\x20delay\x20is\
    \x20only\x20propagated\x20until\x20the\x20next\n\x20stop\x20along\x20the\
    \x20trip\x20with\x20a\x20StopTimeUpdate\x20delay\x20value\x20specified.\
    \n\n\x20Feed\x20providers\x20are\x20strongly\x20encouraged\x20to\x20prov\
    ide\x20a\x20TripUpdate.timestamp\n\x20value\x20indicating\x20when\x20the\
    \x20delay\x20value\x20was\x20last\x20updated,\x20in\x20order\x20to\n\x20\
    evaluate\x20the\x20freshness\x20of\x20the\x20data.\n\n\x20NOTE:\x20This\
    \x20field\x20is\x20still\x20experimental,\x20and\x20subject\x20to\x20cha\
    nge.\x20It\x20may\x20be\n\x20formally\x20adopted\x20in\x20the\x20future.\
    \n\n\r\n\x05\x04\x03\x02\x04\x04\x12\x04\x93\x02\x02\n\n\r\n\x05\x04\x03\
    \x02\x04\x05\x12\x04\x93\x02\x0b\x10\n\r\n\x05\x04\x03\x02\x04\x01\x12\
    \x04\x93\x02\x11\x16\n\r\n\x05\x04\x03\x02\x04\x03\x12\x04\x93\x02\x19\
    \x1a\n\xb9\x01\n\x03\x04\x03\x05\x12\x04\x98\x02\x02\x1a\x1a\xab\x01\x20\
    The\x20extensions\x20namespace\x20allows\x203rd-party\x20developers\x20t\
    o\x20extend\x20the\n\x20GTFS-realtime\x20specification\x20in\x20order\
    \x20to\x20add\x20and\x20evaluate\x20new\x20features\x20and\n\x20modifica\
    tions\x20to\x20the\x20spec.\n\n\x0c\n\x04\x04\x03\x05\0\x12\x04\x98\x02\
    \r\x19\n\r\n\x05\x04\x03\x05\0\x01\x12\x04\x98\x02\r\x11\n\r\n\x05\x04\
    \x03\x05\0\x02\x12\x04\x98\x02\x15\x19\nE\n\x02\x04\x04\x12\x06\x9c\x02\
    \0\xf7\x02\x01\x1a7\x20Realtime\x20positioning\x20information\x20for\x20\
    a\x20given\x20vehicle.\n\n\x0b\n\x03\x04\x04\x01\x12\x04\x9c\x02\x08\x17\
    \n\x92\x01\n\x04\x04\x04\x02\0\x12\x04\xa0\x02\x02#\x1a\x83\x01\x20The\
    \x20Trip\x20that\x20this\x20vehicle\x20is\x20serving.\n\x20Can\x20be\x20\
    empty\x20or\x20partial\x20if\x20the\x20vehicle\x20can\x20not\x20be\x20id\
    entified\x20with\x20a\x20given\n\x20trip\x20instance.\n\n\r\n\x05\x04\
    \x04\x02\0\x04\x12\x04\xa0\x02\x02\n\n\r\n\x05\x04\x04\x02\0\x06\x12\x04\
    \xa0\x02\x0b\x19\n\r\n\x05\x04\x04\x02\0\x01\x12\x04\xa0\x02\x1a\x1e\n\r\
    \n\x05\x04\x04\x02\0\x03\x12\x04\xa0\x02!\"\nP\n\x04\x04\x04\x02\x01\x12\
    \x04\xa3\x02\x02)\x1aB\x20Additional\x20information\x20on\x20the\x20vehi\
    cle\x20that\x20is\x20serving\x20this\x20trip.\n\n\r\n\x05\x04\x04\x02\
    \x01\x04\x12\x04\xa3\x02\x02\n\n\r\n\x05\x04\x04\x02\x01\x06\x12\x04\xa3\
    \x02\x0b\x1c\n\r\n\x05\x04\x04\x02\x01\x01\x12\x04\xa3\x02\x1d$\n\r\n\
    \x05\x04\x04\x02\x01\x03\x12\x04\xa3\x02'(\n1\n\x04\x04\x04\x02\x02\x12\
    \x04\xa6\x02\x02!\x1a#\x20Current\x20position\x20of\x20this\x20vehicle.\
    \n\n\r\n\x05\x04\x04\x02\x02\x04\x12\x04\xa6\x02\x02\n\n\r\n\x05\x04\x04\
    \x02\x02\x06\x12\x04\xa6\x02\x0b\x13\n\r\n\x05\x04\x04\x02\x02\x01\x12\
    \x04\xa6\x02\x14\x1c\n\r\n\x05\x04\x04\x02\x02\x03\x12\x04\xa6\x02\x1f\
    \x20\n\xe0\x01\n\x04\x04\x04\x02\x03\x12\x04\xac\x02\x02,\x1a\xd1\x01\
    \x20The\x20stop\x20sequence\x20index\x20of\x20the\x20current\x20stop.\
    \x20The\x20meaning\x20of\n\x20current_stop_sequence\x20(i.e.,\x20the\x20\
    stop\x20that\x20it\x20refers\x20to)\x20is\x20determined\x20by\n\x20curre\
    nt_status.\n\x20If\x20current_status\x20is\x20missing\x20IN_TRANSIT_TO\
    \x20is\x20assumed.\n\n\r\n\x05\x04\x04\x02\x03\x04\x12\x04\xac\x02\x02\n\
    \n\r\n\x05\x04\x04\x02\x03\x05\x12\x04\xac\x02\x0b\x11\n\r\n\x05\x04\x04\
    \x02\x03\x01\x12\x04\xac\x02\x12'\n\r\n\x05\x04\x04\x02\x03\x03\x12\x04\
    \xac\x02*+\nx\n\x04\x04\x04\x02\x04\x12\x04\xaf\x02\x02\x1e\x1aj\x20Iden\
    tifies\x20the\x20current\x20stop.\x20The\x20value\x20must\x20be\x20the\
    \x20same\x20as\x20in\x20stops.txt\x20in\n\x20the\x20corresponding\x20GTF\
    S\x20feed.\n\n\r\n\x05\x04\x04\x02\x04\x04\x12\x04\xaf\x02\x02\n\n\r\n\
    \x05\x04\x04\x02\x04\x05\x12\x04\xaf\x02\x0b\x11\n\r\n\x05\x04\x04\x02\
    \x04\x01\x12\x04\xaf\x02\x12\x19\n\r\n\x05\x04\x04\x02\x04\x03\x12\x04\
    \xaf\x02\x1c\x1d\n\x0e\n\x04\x04\x04\x04\0\x12\x06\xb1\x02\x02\xbb\x02\
    \x03\n\r\n\x05\x04\x04\x04\0\x01\x12\x04\xb1\x02\x07\x18\n}\n\x06\x04\
    \x04\x04\0\x02\0\x12\x04\xb4\x02\x04\x14\x1am\x20The\x20vehicle\x20is\
    \x20just\x20about\x20to\x20arrive\x20at\x20the\x20stop\x20(on\x20a\x20st\
    op\n\x20display,\x20the\x20vehicle\x20symbol\x20typically\x20flashes).\n\
    \n\x0f\n\x07\x04\x04\x04\0\x02\0\x01\x12\x04\xb4\x02\x04\x0f\n\x0f\n\x07\
    \x04\x04\x04\0\x02\0\x02\x12\x04\xb4\x02\x12\x13\n6\n\x06\x04\x04\x04\0\
    \x02\x01\x12\x04\xb7\x02\x04\x13\x1a&\x20The\x20vehicle\x20is\x20standin\
    g\x20at\x20the\x20stop.\n\n\x0f\n\x07\x04\x04\x04\0\x02\x01\x01\x12\x04\
    \xb7\x02\x04\x0e\n\x0f\n\x07\x04\x04\x04\0\x02\x01\x02\x12\x04\xb7\x02\
    \x11\x12\nN\n\x06\x04\x04\x04\0\x02\x02\x12\x04\xba\x02\x04\x16\x1a>\x20\
    The\x20vehicle\x20has\x20departed\x20and\x20is\x20in\x20transit\x20to\
    \x20the\x20next\x20stop.\n\n\x0f\n\x07\x04\x04\x04\0\x02\x02\x01\x12\x04\
    \xba\x02\x04\x11\n\x0f\n\x07\x04\x04\x04\0\x02\x02\x02\x12\x04\xba\x02\
    \x14\x15\n\x7f\n\x04\x04\x04\x02\x05\x12\x04\xbe\x02\x02J\x1aq\x20The\
    \x20exact\x20status\x20of\x20the\x20vehicle\x20with\x20respect\x20to\x20\
    the\x20current\x20stop.\n\x20Ignored\x20if\x20current_stop_sequence\x20i\
    s\x20missing.\n\n\r\n\x05\x04\x04\x02\x05\x04\x12\x04\xbe\x02\x02\n\n\r\
    \n\x05\x04\x04\x02\x05\x06\x12\x04\xbe\x02\x0b\x1c\n\r\n\x05\x04\x04\x02\
    \x05\x01\x12\x04\xbe\x02\x1d+\n\r\n\x05\x04\x04\x02\x05\x03\x12\x04\xbe\
    \x02./\n\r\n\x05\x04\x04\x02\x05\x08\x12\x04\xbe\x020I\n\r\n\x05\x04\x04\
    \x02\x05\x07\x12\x04\xbe\x02;H\n\x93\x01\n\x04\x04\x04\x02\x06\x12\x04\
    \xc2\x02\x02\x20\x1a\x84\x01\x20Moment\x20at\x20which\x20the\x20vehicle'\
    s\x20position\x20was\x20measured.\x20In\x20POSIX\x20time\n\x20(i.e.,\x20\
    number\x20of\x20seconds\x20since\x20January\x201st\x201970\x2000:00:00\
    \x20UTC).\n\n\r\n\x05\x04\x04\x02\x06\x04\x12\x04\xc2\x02\x02\n\n\r\n\
    \x05\x04\x04\x02\x06\x05\x12\x04\xc2\x02\x0b\x11\n\r\n\x05\x04\x04\x02\
    \x06\x01\x12\x04\xc2\x02\x12\x1b\n\r\n\x05\x04\x04\x02\x06\x03\x12\x04\
    \xc2\x02\x1e\x1f\nB\n\x04\x04\x04\x04\x01\x12\x06\xc5\x02\x02\xcb\x02\
    \x03\x1a2\x20Congestion\x20level\x20that\x20is\x20affecting\x20this\x20v\
    ehicle.\n\n\r\n\x05\x04\x04\x04\x01\x01\x12\x04\xc5\x02\x07\x16\n\x0e\n\
    \x06\x04\x04\x04\x01\x02\0\x12\x04\xc6\x02\x04!\n\x0f\n\x07\x04\x04\x04\
    \x01\x02\0\x01\x12\x04\xc6\x02\x04\x1c\n\x0f\n\x07\x04\x04\x04\x01\x02\0\
    \x02\x12\x04\xc6\x02\x1f\x20\n\x0e\n\x06\x04\x04\x04\x01\x02\x01\x12\x04\
    \xc7\x02\x04\x19\n\x0f\n\x07\x04\x04\x04\x01\x02\x01\x01\x12\x04\xc7\x02\
    \x04\x14\n\x0f\n\x07\x04\x04\x04\x01\x02\x01\x02\x12\x04\xc7\x02\x17\x18\
    \n\x0e\n\x06\x04\x04\x04\x01\x02\x02\x12\x04\xc8\x02\x04\x14\n\x0f\n\x07\
    \x04\x04\x04\x01\x02\x02\x01\x12\x04\xc8\x02\x04\x0f\n\x0f\n\x07\x04\x04\
    \x04\x01\x02\x02\x02\x12\x04\xc8\x02\x12\x13\n\x0e\n\x06\x04\x04\x04\x01\
    \x02\x03\x12\x04\xc9\x02\x04\x13\n\x0f\n\x07\x04\x04\x04\x01\x02\x03\x01\
    \x12\x04\xc9\x02\x04\x0e\n\x0f\n\x07\x04\x04\x04\x01\x02\x03\x02\x12\x04\
    \xc9\x02\x11\x12\n,\n\x06\x04\x04\x04\x01\x02\x04\x12\x04\xca\x02\x04\
    \x1a\"\x1c\x20People\x20leaving\x20their\x20cars.\n\n\x0f\n\x07\x04\x04\
    \x04\x01\x02\x04\x01\x12\x04\xca\x02\x04\x15\n\x0f\n\x07\x04\x04\x04\x01\
    \x02\x04\x02\x12\x04\xca\x02\x18\x19\n\x0c\n\x04\x04\x04\x02\x07\x12\x04\
    \xcc\x02\x020\n\r\n\x05\x04\x04\x02\x07\x04\x12\x04\xcc\x02\x02\n\n\r\n\
    \x05\x04\x04\x02\x07\x06\x12\x04\xcc\x02\x0b\x1a\n\r\n\x05\x04\x04\x02\
    \x07\x01\x12\x04\xcc\x02\x1b+\n\r\n\x05\x04\x04\x02\x07\x03\x12\x04\xcc\
    \x02./\n\xa9\x01\n\x04\x04\x04\x04\x02\x12\x06\xd1\x02\x02\xf0\x02\x03\
    \x1a\x98\x01\x20The\x20degree\x20of\x20passenger\x20occupancy\x20of\x20t\
    he\x20vehicle.\x20This\x20field\x20is\x20still\n\x20experimental,\x20and\
    \x20subject\x20to\x20change.\x20It\x20may\x20be\x20formally\x20adopted\
    \x20in\x20the\n\x20future.\n\n\r\n\x05\x04\x04\x04\x02\x01\x12\x04\xd1\
    \x02\x07\x16\n\x8d\x01\n\x06\x04\x04\x04\x02\x02\0\x12\x04\xd4\x02\x04\
    \x0e\x1a}\x20The\x20vehicle\x20is\x20considered\x20empty\x20by\x20most\
    \x20measures,\x20and\x20has\x20few\x20or\x20no\n\x20passengers\x20onboar\
    d,\x20but\x20is\x20still\x20accepting\x20passengers.\n\n\x0f\n\x07\x04\
    \x04\x04\x02\x02\0\x01\x12\x04\xd4\x02\x04\t\n\x0f\n\x07\x04\x04\x04\x02\
    \x02\0\x02\x12\x04\xd4\x02\x0c\r\n\x83\x02\n\x06\x04\x04\x04\x02\x02\x01\
    \x12\x04\xda\x02\x04\x1d\x1a\xf2\x01\x20The\x20vehicle\x20has\x20a\x20re\
    latively\x20large\x20percentage\x20of\x20seats\x20available.\n\x20What\
    \x20percentage\x20of\x20free\x20seats\x20out\x20of\x20the\x20total\x20se\
    ats\x20available\x20is\x20to\x20be\n\x20considered\x20large\x20enough\
    \x20to\x20fall\x20into\x20this\x20category\x20is\x20determined\x20at\x20\
    the\n\x20discretion\x20of\x20the\x20producer.\n\n\x0f\n\x07\x04\x04\x04\
    \x02\x02\x01\x01\x12\x04\xda\x02\x04\x18\n\x0f\n\x07\x04\x04\x04\x02\x02\
    \x01\x02\x12\x04\xda\x02\x1b\x1c\n\x88\x02\n\x06\x04\x04\x04\x02\x02\x02\
    \x12\x04\xe0\x02\x04\x1c\x1a\xf7\x01\x20The\x20vehicle\x20has\x20a\x20re\
    latively\x20small\x20percentage\x20of\x20seats\x20available.\n\x20What\
    \x20percentage\x20of\x20free\x20seats\x20out\x20of\x20the\x20total\x20se\
    ats\x20available\x20is\x20to\x20be\n\x20considered\x20small\x20enough\
    \x20to\x20fall\x20into\x20this\x20category\x20is\x20determined\x20at\x20\
    the\n\x20discretion\x20of\x20the\x20feed\x20producer.\n\n\x0f\n\x07\x04\
    \x04\x04\x02\x02\x02\x01\x12\x04\xe0\x02\x04\x17\n\x0f\n\x07\x04\x04\x04\
    \x02\x02\x02\x02\x12\x04\xe0\x02\x1a\x1b\nQ\n\x06\x04\x04\x04\x02\x02\
    \x03\x12\x04\xe3\x02\x04\x1b\x1aA\x20The\x20vehicle\x20can\x20currently\
    \x20accommodate\x20only\x20standing\x20passengers.\n\n\x0f\n\x07\x04\x04\
    \x04\x02\x02\x03\x01\x12\x04\xe3\x02\x04\x16\n\x0f\n\x07\x04\x04\x04\x02\
    \x02\x03\x02\x12\x04\xe3\x02\x19\x1a\nq\n\x06\x04\x04\x04\x02\x02\x04\
    \x12\x04\xe7\x02\x04#\x1aa\x20The\x20vehicle\x20can\x20currently\x20acco\
    mmodate\x20only\x20standing\x20passengers\n\x20and\x20has\x20limited\x20\
    space\x20for\x20them.\n\n\x0f\n\x07\x04\x04\x04\x02\x02\x04\x01\x12\x04\
    \xe7\x02\x04\x1e\n\x0f\n\x07\x04\x04\x04\x02\x02\x04\x02\x12\x04\xe7\x02\
    !\"\nr\n\x06\x04\x04\x04\x02\x02\x05\x12\x04\xeb\x02\x04\r\x1ab\x20The\
    \x20vehicle\x20is\x20considered\x20full\x20by\x20most\x20measures,\x20bu\
    t\x20may\x20still\x20be\n\x20allowing\x20passengers\x20to\x20board.\n\n\
    \x0f\n\x07\x04\x04\x04\x02\x02\x05\x01\x12\x04\xeb\x02\x04\x08\n\x0f\n\
    \x07\x04\x04\x04\x02\x02\x05\x02\x12\x04\xeb\x02\x0b\x0c\nE\n\x06\x04\
    \x04\x04\x02\x02\x06\x12\x04\xee\x02\x04!\x1a5\x20The\x20vehicle\x20is\
    \x20not\x20accepting\x20additional\x20passengers.\n\n\x0f\n\x07\x04\x04\
    \x04\x02\x02\x06\x01\x12\x04\xee\x02\x04\x1c\n\x0f\n\x07\x04\x04\x04\x02\
    \x02\x06\x02\x12\x04\xee\x02\x1f\x20\n\x0c\n\x04\x04\x04\x02\x08\x12\x04\
    \xf1\x02\x020\n\r\n\x05\x04\x04\x02\x08\x04\x12\x04\xf1\x02\x02\n\n\r\n\
    \x05\x04\x04\x02\x08\x06\x12\x04\xf1\x02\x0b\x1a\n\r\n\x05\x04\x04\x02\
    \x08\x01\x12\x04\xf1\x02\x1b+\n\r\n\x05\x04\x04\x02\x08\x03\x12\x04\xf1\
    \x02./\n\xb9\x01\n\x03\x04\x04\x05\x12\x04\xf6\x02\x02\x1a\x1a\xab\x01\
    \x20The\x20extensions\x20namespace\x20allows\x203rd-party\x20developers\
    \x20to\x20extend\x20the\n\x20GTFS-realtime\x20specification\x20in\x20ord\
    er\x20to\x20add\x20and\x20evaluate\x20new\x20features\x20and\n\x20modifi\
    cations\x20to\x20the\x20spec.\n\n\x0c\n\x04\x04\x04\x05\0\x12\x04\xf6\
    \x02\r\x19\n\r\n\x05\x04\x04\x05\0\x01\x12\x04\xf6\x02\r\x11\n\r\n\x05\
    \x04\x04\x05\0\x02\x12\x04\xf6\x02\x15\x19\nY\n\x02\x04\x05\x12\x06\xfa\
    \x02\0\xb5\x03\x01\x1aK\x20An\x20alert,\x20indicating\x20some\x20sort\
    \x20of\x20incident\x20in\x20the\x20public\x20transit\x20network.\n\n\x0b\
    \n\x03\x04\x05\x01\x12\x04\xfa\x02\x08\r\n\xd4\x01\n\x04\x04\x05\x02\0\
    \x12\x04\xfe\x02\x02'\x1a\xc5\x01\x20Time\x20when\x20the\x20alert\x20sho\
    uld\x20be\x20shown\x20to\x20the\x20user.\x20If\x20missing,\x20the\n\x20a\
    lert\x20will\x20be\x20shown\x20as\x20long\x20as\x20it\x20appears\x20in\
    \x20the\x20feed.\n\x20If\x20multiple\x20ranges\x20are\x20given,\x20the\
    \x20alert\x20will\x20be\x20shown\x20during\x20all\x20of\x20them.\n\n\r\n\
    \x05\x04\x05\x02\0\x04\x12\x04\xfe\x02\x02\n\n\r\n\x05\x04\x05\x02\0\x06\
    \x12\x04\xfe\x02\x0b\x14\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\xfe\x02\x15\
    \"\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\xfe\x02%&\nD\n\x04\x04\x05\x02\
    \x01\x12\x04\x81\x03\x02.\x1a6\x20Entities\x20whose\x20users\x20we\x20sh\
    ould\x20notify\x20of\x20this\x20alert.\n\n\r\n\x05\x04\x05\x02\x01\x04\
    \x12\x04\x81\x03\x02\n\n\r\n\x05\x04\x05\x02\x01\x06\x12\x04\x81\x03\x0b\
    \x19\n\r\n\x05\x04\x05\x02\x01\x01\x12\x04\x81\x03\x1a)\n\r\n\x05\x04\
    \x05\x02\x01\x03\x12\x04\x81\x03,-\n&\n\x04\x04\x05\x04\0\x12\x06\x84\
    \x03\x02\x91\x03\x03\x1a\x16\x20Cause\x20of\x20this\x20alert.\n\n\r\n\
    \x05\x04\x05\x04\0\x01\x12\x04\x84\x03\x07\x0c\n\x0e\n\x06\x04\x05\x04\0\
    \x02\0\x12\x04\x85\x03\x04\x16\n\x0f\n\x07\x04\x05\x04\0\x02\0\x01\x12\
    \x04\x85\x03\x04\x11\n\x0f\n\x07\x04\x05\x04\0\x02\0\x02\x12\x04\x85\x03\
    \x14\x15\n,\n\x06\x04\x05\x04\0\x02\x01\x12\x04\x86\x03\x04\x14\"\x1c\
    \x20Not\x20machine-representable.\n\n\x0f\n\x07\x04\x05\x04\0\x02\x01\
    \x01\x12\x04\x86\x03\x04\x0f\n\x0f\n\x07\x04\x05\x04\0\x02\x01\x02\x12\
    \x04\x86\x03\x12\x13\n\x0e\n\x06\x04\x05\x04\0\x02\x02\x12\x04\x87\x03\
    \x04\x1a\n\x0f\n\x07\x04\x05\x04\0\x02\x02\x01\x12\x04\x87\x03\x04\x15\n\
    \x0f\n\x07\x04\x05\x04\0\x02\x02\x02\x12\x04\x87\x03\x18\x19\nB\n\x06\
    \x04\x05\x04\0\x02\x03\x12\x04\x88\x03\x04\x0f\"2\x20Public\x20transit\
    \x20agency\x20employees\x20stopped\x20working.\n\n\x0f\n\x07\x04\x05\x04\
    \0\x02\x03\x01\x12\x04\x88\x03\x04\n\n\x0f\n\x07\x04\x05\x04\0\x02\x03\
    \x02\x12\x04\x88\x03\r\x0e\n2\n\x06\x04\x05\x04\0\x02\x04\x12\x04\x89\
    \x03\x04\x16\"\"\x20People\x20are\x20blocking\x20the\x20streets.\n\n\x0f\
    \n\x07\x04\x05\x04\0\x02\x04\x01\x12\x04\x89\x03\x04\x11\n\x0f\n\x07\x04\
    \x05\x04\0\x02\x04\x02\x12\x04\x89\x03\x14\x15\n\x0e\n\x06\x04\x05\x04\0\
    \x02\x05\x12\x04\x8a\x03\x04\x11\n\x0f\n\x07\x04\x05\x04\0\x02\x05\x01\
    \x12\x04\x8a\x03\x04\x0c\n\x0f\n\x07\x04\x05\x04\0\x02\x05\x02\x12\x04\
    \x8a\x03\x0f\x10\n\x0e\n\x06\x04\x05\x04\0\x02\x06\x12\x04\x8b\x03\x04\
    \x10\n\x0f\n\x07\x04\x05\x04\0\x02\x06\x01\x12\x04\x8b\x03\x04\x0b\n\x0f\
    \n\x07\x04\x05\x04\0\x02\x06\x02\x12\x04\x8b\x03\x0e\x0f\n\x0e\n\x06\x04\
    \x05\x04\0\x02\x07\x12\x04\x8c\x03\x04\x10\n\x0f\n\x07\x04\x05\x04\0\x02\
    \x07\x01\x12\x04\x8c\x03\x04\x0b\n\x0f\n\x07\x04\x05\x04\0\x02\x07\x02\
    \x12\x04\x8c\x03\x0e\x0f\n\x0e\n\x06\x04\x05\x04\0\x02\x08\x12\x04\x8d\
    \x03\x04\x14\n\x0f\n\x07\x04\x05\x04\0\x02\x08\x01\x12\x04\x8d\x03\x04\
    \x0f\n\x0f\n\x07\x04\x05\x04\0\x02\x08\x02\x12\x04\x8d\x03\x12\x13\n\x0e\
    \n\x06\x04\x05\x04\0\x02\t\x12\x04\x8e\x03\x04\x16\n\x0f\n\x07\x04\x05\
    \x04\0\x02\t\x01\x12\x04\x8e\x03\x04\x10\n\x0f\n\x07\x04\x05\x04\0\x02\t\
    \x02\x12\x04\x8e\x03\x13\x15\n\x0e\n\x06\x04\x05\x04\0\x02\n\x12\x04\x8f\
    \x03\x04\x19\n\x0f\n\x07\x04\x05\x04\0\x02\n\x01\x12\x04\x8f\x03\x04\x13\
    \n\x0f\n\x07\x04\x05\x04\0\x02\n\x02\x12\x04\x8f\x03\x16\x18\n\x0e\n\x06\
    \x04\x05\x04\0\x02\x0b\x12\x04\x90\x03\x04\x1b\n\x0f\n\x07\x04\x05\x04\0\
    \x02\x0b\x01\x12\x04\x90\x03\x04\x15\n\x0f\n\x07\x04\x05\x04\0\x02\x0b\
    \x02\x12\x04\x90\x03\x18\x1a\n\x0c\n\x04\x04\x05\x02\x02\x12\x04\x92\x03\
    \x025\n\r\n\x05\x04\x05\x02\x02\x04\x12\x04\x92\x03\x02\n\n\r\n\x05\x04\
    \x05\x02\x02\x06\x12\x04\x92\x03\x0b\x10\n\r\n\x05\x04\x05\x02\x02\x01\
    \x12\x04\x92\x03\x11\x16\n\r\n\x05\x04\x05\x02\x02\x03\x12\x04\x92\x03\
    \x19\x1a\n\r\n\x05\x04\x05\x02\x02\x08\x12\x04\x92\x03\x1b4\n\r\n\x05\
    \x04\x05\x02\x02\x07\x12\x04\x92\x03&3\nL\n\x04\x04\x05\x04\x01\x12\x06\
    \x95\x03\x02\xa4\x03\x03\x1a<\x20What\x20is\x20the\x20effect\x20of\x20th\
    is\x20problem\x20on\x20the\x20affected\x20entity.\n\n\r\n\x05\x04\x05\
    \x04\x01\x01\x12\x04\x95\x03\x07\r\n\x0e\n\x06\x04\x05\x04\x01\x02\0\x12\
    \x04\x96\x03\x04\x13\n\x0f\n\x07\x04\x05\x04\x01\x02\0\x01\x12\x04\x96\
    \x03\x04\x0e\n\x0f\n\x07\x04\x05\x04\x01\x02\0\x02\x12\x04\x96\x03\x11\
    \x12\n\x0e\n\x06\x04\x05\x04\x01\x02\x01\x12\x04\x97\x03\x04\x18\n\x0f\n\
    \x07\x04\x05\x04\x01\x02\x01\x01\x12\x04\x97\x03\x04\x13\n\x0f\n\x07\x04\
    \x05\x04\x01\x02\x01\x02\x12\x04\x97\x03\x16\x17\n\xaf\x01\n\x06\x04\x05\
    \x04\x01\x02\x02\x12\x04\x9c\x03\x04\x1b\x1a\x9e\x01\x20We\x20don't\x20c\
    are\x20about\x20INsignificant\x20delays:\x20they\x20are\x20hard\x20to\
    \x20detect,\x20have\n\x20little\x20impact\x20on\x20the\x20user,\x20and\
    \x20would\x20clutter\x20the\x20results\x20as\x20they\x20are\x20too\n\x20\
    frequent.\n\n\x0f\n\x07\x04\x05\x04\x01\x02\x02\x01\x12\x04\x9c\x03\x04\
    \x16\n\x0f\n\x07\x04\x05\x04\x01\x02\x02\x02\x12\x04\x9c\x03\x19\x1a\n\
    \x0e\n\x06\x04\x05\x04\x01\x02\x03\x12\x04\x9e\x03\x04\x0f\n\x0f\n\x07\
    \x04\x05\x04\x01\x02\x03\x01\x12\x04\x9e\x03\x04\n\n\x0f\n\x07\x04\x05\
    \x04\x01\x02\x03\x02\x12\x04\x9e\x03\r\x0e\n\x0e\n\x06\x04\x05\x04\x01\
    \x02\x04\x12\x04\x9f\x03\x04\x1b\n\x0f\n\x07\x04\x05\x04\x01\x02\x04\x01\
    \x12\x04\x9f\x03\x04\x16\n\x0f\n\x07\x04\x05\x04\x01\x02\x04\x02\x12\x04\
    \x9f\x03\x19\x1a\n\x0e\n\x06\x04\x05\x04\x01\x02\x05\x12\x04\xa0\x03\x04\
    \x19\n\x0f\n\x07\x04\x05\x04\x01\x02\x05\x01\x12\x04\xa0\x03\x04\x14\n\
    \x0f\n\x07\x04\x05\x04\x01\x02\x05\x02\x12\x04\xa0\x03\x17\x18\n\x0e\n\
    \x06\x04\x05\x04\x01\x02\x06\x12\x04\xa1\x03\x04\x15\n\x0f\n\x07\x04\x05\
    \x04\x01\x02\x06\x01\x12\x04\xa1\x03\x04\x10\n\x0f\n\x07\x04\x05\x04\x01\
    \x02\x06\x02\x12\x04\xa1\x03\x13\x14\n\x0e\n\x06\x04\x05\x04\x01\x02\x07\
    \x12\x04\xa2\x03\x04\x17\n\x0f\n\x07\x04\x05\x04\x01\x02\x07\x01\x12\x04\
    \xa2\x03\x04\x12\n\x0f\n\x07\x04\x05\x04\x01\x02\x07\x02\x12\x04\xa2\x03\
    \x15\x16\n\x0e\n\x06\x04\x05\x04\x01\x02\x08\x12\x04\xa3\x03\x04\x13\n\
    \x0f\n\x07\x04\x05\x04\x01\x02\x08\x01\x12\x04\xa3\x03\x04\x0e\n\x0f\n\
    \x07\x04\x05\x04\x01\x02\x08\x02\x12\x04\xa3\x03\x11\x12\n\x0c\n\x04\x04\
    \x05\x02\x03\x12\x04\xa5\x03\x028\n\r\n\x05\x04\x05\x02\x03\x04\x12\x04\
    \xa5\x03\x02\n\n\r\n\x05\x04\x05\x02\x03\x06\x12\x04\xa5\x03\x0b\x11\n\r\
    \n\x05\x04\x05\x02\x03\x01\x12\x04\xa5\x03\x12\x18\n\r\n\x05\x04\x05\x02\
    \x03\x03\x12\x04\xa5\x03\x1b\x1c\n\r\n\x05\x04\x05\x02\x03\x08\x12\x04\
    \xa5\x03\x1d7\n\r\n\x05\x04\x05\x02\x03\x07\x12\x04\xa5\x03(6\nN\n\x04\
    \x04\x05\x02\x04\x12\x04\xa8\x03\x02$\x1a@\x20The\x20URL\x20which\x20pro\
    vides\x20additional\x20information\x20about\x20the\x20alert.\n\n\r\n\x05\
    \x04\x05\x02\x04\x04\x12\x04\xa8\x03\x02\n\n\r\n\x05\x04\x05\x02\x04\x06\
    \x12\x04\xa8\x03\x0b\x1b\n\r\n\x05\x04\x05\x02\x04\x01\x12\x04\xa8\x03\
    \x1c\x1f\n\r\n\x05\x04\x05\x02\x04\x03\x12\x04\xa8\x03\"#\nW\n\x04\x04\
    \x05\x02\x05\x12\x04\xab\x03\x02-\x1aI\x20Alert\x20header.\x20Contains\
    \x20a\x20short\x20summary\x20of\x20the\x20alert\x20text\x20as\x20plain-t\
    ext.\n\n\r\n\x05\x04\x05\x02\x05\x04\x12\x04\xab\x03\x02\n\n\r\n\x05\x04\
    \x05\x02\x05\x06\x12\x04\xab\x03\x0b\x1b\n\r\n\x05\x04\x05\x02\x05\x01\
    \x12\x04\xab\x03\x1c'\n\r\n\x05\x04\x05\x02\x05\x03\x12\x04\xab\x03*,\n\
    \x8f\x01\n\x04\x04\x05\x02\x06\x12\x04\xaf\x03\x022\x1a\x80\x01\x20Full\
    \x20description\x20for\x20the\x20alert\x20as\x20plain-text.\x20The\x20in\
    formation\x20in\x20the\n\x20description\x20should\x20add\x20to\x20the\
    \x20information\x20of\x20the\x20header.\n\n\r\n\x05\x04\x05\x02\x06\x04\
    \x12\x04\xaf\x03\x02\n\n\r\n\x05\x04\x05\x02\x06\x06\x12\x04\xaf\x03\x0b\
    \x1b\n\r\n\x05\x04\x05\x02\x06\x01\x12\x04\xaf\x03\x1c,\n\r\n\x05\x04\
    \x05\x02\x06\x03\x12\x04\xaf\x03/1\n\xb9\x01\n\x03\x04\x05\x05\x12\x04\
    \xb4\x03\x02\x1a\x1a\xab\x01\x20The\x20extensions\x20namespace\x20allows\
    \x203rd-party\x20developers\x20to\x20extend\x20the\n\x20GTFS-realtime\
    \x20specification\x20in\x20order\x20to\x20add\x20and\x20evaluate\x20new\
    \x20features\n\x20and\x20modifications\x20to\x20the\x20spec.\n\n\x0c\n\
    \x04\x04\x05\x05\0\x12\x04\xb4\x03\r\x19\n\r\n\x05\x04\x05\x05\0\x01\x12\
    \x04\xb4\x03\r\x11\n\r\n\x05\x04\x05\x05\0\x02\x12\x04\xb4\x03\x15\x19\n\
    \xc9\x01\n\x02\x04\x06\x12\x06\xbd\x03\0\xcc\x03\x01\x1a\x8f\x01\x20A\
    \x20time\x20interval.\x20The\x20interval\x20is\x20considered\x20active\
    \x20at\x20time\x20't'\x20if\x20't'\x20is\n\x20greater\x20than\x20or\x20e\
    qual\x20to\x20the\x20start\x20time\x20and\x20less\x20than\x20the\x20end\
    \x20time.\n2)\n\x20Low\x20level\x20data\x20structures\x20used\x20above.\
    \n\n\n\x0b\n\x03\x04\x06\x01\x12\x04\xbd\x03\x08\x11\n\x9e\x01\n\x04\x04\
    \x06\x02\0\x12\x04\xc1\x03\x02\x1c\x1a\x8f\x01\x20Start\x20time,\x20in\
    \x20POSIX\x20time\x20(i.e.,\x20number\x20of\x20seconds\x20since\x20Janua\
    ry\x201st\x201970\n\x2000:00:00\x20UTC).\n\x20If\x20missing,\x20the\x20i\
    nterval\x20starts\x20at\x20minus\x20infinity.\n\n\r\n\x05\x04\x06\x02\0\
    \x04\x12\x04\xc1\x03\x02\n\n\r\n\x05\x04\x06\x02\0\x05\x12\x04\xc1\x03\
    \x0b\x11\n\r\n\x05\x04\x06\x02\0\x01\x12\x04\xc1\x03\x12\x17\n\r\n\x05\
    \x04\x06\x02\0\x03\x12\x04\xc1\x03\x1a\x1b\n\x99\x01\n\x04\x04\x06\x02\
    \x01\x12\x04\xc6\x03\x02\x1a\x1a\x8a\x01\x20End\x20time,\x20in\x20POSIX\
    \x20time\x20(i.e.,\x20number\x20of\x20seconds\x20since\x20January\x201st\
    \x201970\n\x2000:00:00\x20UTC).\n\x20If\x20missing,\x20the\x20interval\
    \x20ends\x20at\x20plus\x20infinity.\n\n\r\n\x05\x04\x06\x02\x01\x04\x12\
    \x04\xc6\x03\x02\n\n\r\n\x05\x04\x06\x02\x01\x05\x12\x04\xc6\x03\x0b\x11\
    \n\r\n\x05\x04\x06\x02\x01\x01\x12\x04\xc6\x03\x12\x15\n\r\n\x05\x04\x06\
    \x02\x01\x03\x12\x04\xc6\x03\x18\x19\n\xb9\x01\n\x03\x04\x06\x05\x12\x04\
    \xcb\x03\x02\x1a\x1a\xab\x01\x20The\x20extensions\x20namespace\x20allows\
    \x203rd-party\x20developers\x20to\x20extend\x20the\n\x20GTFS-realtime\
    \x20specification\x20in\x20order\x20to\x20add\x20and\x20evaluate\x20new\
    \x20features\x20and\n\x20modifications\x20to\x20the\x20spec.\n\n\x0c\n\
    \x04\x04\x06\x05\0\x12\x04\xcb\x03\r\x19\n\r\n\x05\x04\x06\x05\0\x01\x12\
    \x04\xcb\x03\r\x11\n\r\n\x05\x04\x06\x05\0\x02\x12\x04\xcb\x03\x15\x19\n\
    \x1b\n\x02\x04\x07\x12\x06\xcf\x03\0\xe6\x03\x01\x1a\r\x20A\x20position.\
    \n\n\x0b\n\x03\x04\x07\x01\x12\x04\xcf\x03\x08\x10\n?\n\x04\x04\x07\x02\
    \0\x12\x04\xd1\x03\x02\x1e\x1a1\x20Degrees\x20North,\x20in\x20the\x20WGS\
    -84\x20coordinate\x20system.\n\n\r\n\x05\x04\x07\x02\0\x04\x12\x04\xd1\
    \x03\x02\n\n\r\n\x05\x04\x07\x02\0\x05\x12\x04\xd1\x03\x0b\x10\n\r\n\x05\
    \x04\x07\x02\0\x01\x12\x04\xd1\x03\x11\x19\n\r\n\x05\x04\x07\x02\0\x03\
    \x12\x04\xd1\x03\x1c\x1d\n>\n\x04\x04\x07\x02\x01\x12\x04\xd4\x03\x02\
    \x1f\x1a0\x20Degrees\x20East,\x20in\x20the\x20WGS-84\x20coordinate\x20sy\
    stem.\n\n\r\n\x05\x04\x07\x02\x01\x04\x12\x04\xd4\x03\x02\n\n\r\n\x05\
    \x04\x07\x02\x01\x05\x12\x04\xd4\x03\x0b\x10\n\r\n\x05\x04\x07\x02\x01\
    \x01\x12\x04\xd4\x03\x11\x1a\n\r\n\x05\x04\x07\x02\x01\x03\x12\x04\xd4\
    \x03\x1d\x1e\n\xba\x02\n\x04\x04\x07\x02\x02\x12\x04\xdb\x03\x02\x1d\x1a\
    \xab\x02\x20Bearing,\x20in\x20degrees,\x20clockwise\x20from\x20North,\
    \x20i.e.,\x200\x20is\x20North\x20and\x2090\x20is\x20East.\n\x20This\x20c\
    an\x20be\x20the\x20compass\x20bearing,\x20or\x20the\x20direction\x20towa\
    rds\x20the\x20next\x20stop\n\x20or\x20intermediate\x20location.\n\x20Thi\
    s\x20should\x20not\x20be\x20direction\x20deduced\x20from\x20the\x20seque\
    nce\x20of\x20previous\n\x20positions,\x20which\x20can\x20be\x20computed\
    \x20from\x20previous\x20data.\n\n\r\n\x05\x04\x07\x02\x02\x04\x12\x04\
    \xdb\x03\x02\n\n\r\n\x05\x04\x07\x02\x02\x05\x12\x04\xdb\x03\x0b\x10\n\r\
    \n\x05\x04\x07\x02\x02\x01\x12\x04\xdb\x03\x11\x18\n\r\n\x05\x04\x07\x02\
    \x02\x03\x12\x04\xdb\x03\x1b\x1c\n*\n\x04\x04\x07\x02\x03\x12\x04\xde\
    \x03\x02\x1f\x1a\x1c\x20Odometer\x20value,\x20in\x20meters.\n\n\r\n\x05\
    \x04\x07\x02\x03\x04\x12\x04\xde\x03\x02\n\n\r\n\x05\x04\x07\x02\x03\x05\
    \x12\x04\xde\x03\x0b\x11\n\r\n\x05\x04\x07\x02\x03\x01\x12\x04\xde\x03\
    \x12\x1a\n\r\n\x05\x04\x07\x02\x03\x03\x12\x04\xde\x03\x1d\x1e\nN\n\x04\
    \x04\x07\x02\x04\x12\x04\xe0\x03\x02\x1b\x1a@\x20Momentary\x20speed\x20m\
    easured\x20by\x20the\x20vehicle,\x20in\x20meters\x20per\x20second.\n\n\r\
    \n\x05\x04\x07\x02\x04\x04\x12\x04\xe0\x03\x02\n\n\r\n\x05\x04\x07\x02\
    \x04\x05\x12\x04\xe0\x03\x0b\x10\n\r\n\x05\x04\x07\x02\x04\x01\x12\x04\
    \xe0\x03\x11\x16\n\r\n\x05\x04\x07\x02\x04\x03\x12\x04\xe0\x03\x19\x1a\n\
    \xb9\x01\n\x03\x04\x07\x05\x12\x04\xe5\x03\x02\x1a\x1a\xab\x01\x20The\
    \x20extensions\x20namespace\x20allows\x203rd-party\x20developers\x20to\
    \x20extend\x20the\n\x20GTFS-realtime\x20specification\x20in\x20order\x20\
    to\x20add\x20and\x20evaluate\x20new\x20features\x20and\n\x20modification\
    s\x20to\x20the\x20spec.\n\n\x0c\n\x04\x04\x07\x05\0\x12\x04\xe5\x03\r\
    \x19\n\r\n\x05\x04\x07\x05\0\x01\x12\x04\xe5\x03\r\x11\n\r\n\x05\x04\x07\
    \x05\0\x02\x12\x04\xe5\x03\x15\x19\n\xd0\x04\n\x02\x04\x08\x12\x06\xf1\
    \x03\0\xb7\x04\x01\x1a\xc1\x04\x20A\x20descriptor\x20that\x20identifies\
    \x20an\x20instance\x20of\x20a\x20GTFS\x20trip,\x20or\x20all\x20instances\
    \x20of\n\x20a\x20trip\x20along\x20a\x20route.\n\x20-\x20To\x20specify\
    \x20a\x20single\x20trip\x20instance,\x20the\x20trip_id\x20(and\x20if\x20\
    necessary,\n\x20\x20\x20start_time)\x20is\x20set.\x20If\x20route_id\x20i\
    s\x20also\x20set,\x20then\x20it\x20should\x20be\x20same\x20as\x20one\n\
    \x20\x20\x20that\x20the\x20given\x20trip\x20corresponds\x20to.\n\x20-\
    \x20To\x20specify\x20all\x20the\x20trips\x20along\x20a\x20given\x20route\
    ,\x20only\x20the\x20route_id\x20should\x20be\n\x20\x20\x20set.\x20Note\
    \x20that\x20if\x20the\x20trip_id\x20is\x20not\x20known,\x20then\x20stop\
    \x20sequence\x20ids\x20in\n\x20\x20\x20TripUpdate\x20are\x20not\x20suffi\
    cient,\x20and\x20stop_ids\x20must\x20be\x20provided\x20as\x20well.\x20In\
    \n\x20\x20\x20addition,\x20absolute\x20arrival/departure\x20times\x20mus\
    t\x20be\x20provided.\n\n\x0b\n\x03\x04\x08\x01\x12\x04\xf1\x03\x08\x16\n\
    \xf0\x01\n\x04\x04\x08\x02\0\x12\x04\xf6\x03\x02\x1e\x1a\xe1\x01\x20The\
    \x20trip_id\x20from\x20the\x20GTFS\x20feed\x20that\x20this\x20selector\
    \x20refers\x20to.\n\x20For\x20non\x20frequency-based\x20trips,\x20this\
    \x20field\x20is\x20enough\x20to\x20uniquely\x20identify\n\x20the\x20trip\
    .\x20For\x20frequency-based\x20trip,\x20start_time\x20and\x20start_date\
    \x20might\x20also\x20be\n\x20necessary.\n\n\r\n\x05\x04\x08\x02\0\x04\
    \x12\x04\xf6\x03\x02\n\n\r\n\x05\x04\x08\x02\0\x05\x12\x04\xf6\x03\x0b\
    \x11\n\r\n\x05\x04\x08\x02\0\x01\x12\x04\xf6\x03\x12\x19\n\r\n\x05\x04\
    \x08\x02\0\x03\x12\x04\xf6\x03\x1c\x1d\nH\n\x04\x04\x08\x02\x01\x12\x04\
    \xf9\x03\x02\x1f\x1a:\x20The\x20route_id\x20from\x20the\x20GTFS\x20that\
    \x20this\x20selector\x20refers\x20to.\n\n\r\n\x05\x04\x08\x02\x01\x04\
    \x12\x04\xf9\x03\x02\n\n\r\n\x05\x04\x08\x02\x01\x05\x12\x04\xf9\x03\x0b\
    \x11\n\r\n\x05\x04\x08\x02\x01\x01\x12\x04\xf9\x03\x12\x1a\n\r\n\x05\x04\
    \x08\x02\x01\x03\x12\x04\xf9\x03\x1d\x1e\n\xf0\x01\n\x04\x04\x08\x02\x02\
    \x12\x04\xff\x03\x02#\x1a\xe1\x01\x20The\x20direction_id\x20from\x20the\
    \x20GTFS\x20feed\x20trips.txt\x20file,\x20indicating\x20the\n\x20directi\
    on\x20of\x20travel\x20for\x20trips\x20this\x20selector\x20refers\x20to.\
    \x20This\x20field\x20is\n\x20still\x20experimental,\x20and\x20subject\
    \x20to\x20change.\x20It\x20may\x20be\x20formally\x20adopted\x20in\n\x20t\
    he\x20future.\n\n\r\n\x05\x04\x08\x02\x02\x04\x12\x04\xff\x03\x02\n\n\r\
    \n\x05\x04\x08\x02\x02\x05\x12\x04\xff\x03\x0b\x11\n\r\n\x05\x04\x08\x02\
    \x02\x01\x12\x04\xff\x03\x12\x1e\n\r\n\x05\x04\x08\x02\x02\x03\x12\x04\
    \xff\x03!\"\n\xf5\x07\n\x04\x04\x08\x02\x03\x12\x04\x90\x04\x02!\x1a\xe6\
    \x07\x20The\x20initially\x20scheduled\x20start\x20time\x20of\x20this\x20\
    trip\x20instance.\n\x20When\x20the\x20trip_id\x20corresponds\x20to\x20a\
    \x20non-frequency-based\x20trip,\x20this\x20field\n\x20should\x20either\
    \x20be\x20omitted\x20or\x20be\x20equal\x20to\x20the\x20value\x20in\x20th\
    e\x20GTFS\x20feed.\x20When\n\x20the\x20trip_id\x20correponds\x20to\x20a\
    \x20frequency-based\x20trip,\x20the\x20start_time\x20must\x20be\n\x20spe\
    cified\x20for\x20trip\x20updates\x20and\x20vehicle\x20positions.\x20If\
    \x20the\x20trip\x20corresponds\n\x20to\x20exact_times=1\x20GTFS\x20recor\
    d,\x20then\x20start_time\x20must\x20be\x20some\x20multiple\n\x20(includi\
    ng\x20zero)\x20of\x20headway_secs\x20later\x20than\x20frequencies.txt\
    \x20start_time\x20for\n\x20the\x20corresponding\x20time\x20period.\x20If\
    \x20the\x20trip\x20corresponds\x20to\x20exact_times=0,\n\x20then\x20its\
    \x20start_time\x20may\x20be\x20arbitrary,\x20and\x20is\x20initially\x20e\
    xpected\x20to\x20be\x20the\n\x20first\x20departure\x20of\x20the\x20trip.\
    \x20Once\x20established,\x20the\x20start_time\x20of\x20this\n\x20frequen\
    cy-based\x20trip\x20should\x20be\x20considered\x20immutable,\x20even\x20\
    if\x20the\x20first\n\x20departure\x20time\x20changes\x20--\x20that\x20ti\
    me\x20change\x20may\x20instead\x20be\x20reflected\x20in\x20a\n\x20StopTi\
    meUpdate.\n\x20Format\x20and\x20semantics\x20of\x20the\x20field\x20is\
    \x20same\x20as\x20that\x20of\n\x20GTFS/frequencies.txt/start_time,\x20e.\
    g.,\x2011:15:35\x20or\x2025:15:35.\n\n\r\n\x05\x04\x08\x02\x03\x04\x12\
    \x04\x90\x04\x02\n\n\r\n\x05\x04\x08\x02\x03\x05\x12\x04\x90\x04\x0b\x11\
    \n\r\n\x05\x04\x08\x02\x03\x01\x12\x04\x90\x04\x12\x1c\n\r\n\x05\x04\x08\
    \x02\x03\x03\x12\x04\x90\x04\x1f\x20\n\xc7\x04\n\x04\x04\x08\x02\x04\x12\
    \x04\x9b\x04\x02!\x1a\xb8\x04\x20The\x20scheduled\x20start\x20date\x20of\
    \x20this\x20trip\x20instance.\n\x20Must\x20be\x20provided\x20to\x20disam\
    biguate\x20trips\x20that\x20are\x20so\x20late\x20as\x20to\x20collide\x20\
    with\n\x20a\x20scheduled\x20trip\x20on\x20a\x20next\x20day.\x20For\x20ex\
    ample,\x20for\x20a\x20train\x20that\x20departs\x208:00\n\x20and\x2020:00\
    \x20every\x20day,\x20and\x20is\x2012\x20hours\x20late,\x20there\x20would\
    \x20be\x20two\x20distinct\n\x20trips\x20on\x20the\x20same\x20time.\n\x20\
    This\x20field\x20can\x20be\x20provided\x20but\x20is\x20not\x20mandatory\
    \x20for\x20schedules\x20in\x20which\x20such\n\x20collisions\x20are\x20im\
    possible\x20-\x20for\x20example,\x20a\x20service\x20running\x20on\x20hou\
    rly\n\x20schedule\x20where\x20a\x20vehicle\x20that\x20is\x20one\x20hour\
    \x20late\x20is\x20not\x20considered\x20to\x20be\n\x20related\x20to\x20sc\
    hedule\x20anymore.\n\x20In\x20YYYYMMDD\x20format.\n\n\r\n\x05\x04\x08\
    \x02\x04\x04\x12\x04\x9b\x04\x02\n\n\r\n\x05\x04\x08\x02\x04\x05\x12\x04\
    \x9b\x04\x0b\x11\n\r\n\x05\x04\x08\x02\x04\x01\x12\x04\x9b\x04\x12\x1c\n\
    \r\n\x05\x04\x08\x02\x04\x03\x12\x04\x9b\x04\x1f\x20\n\xdb\x01\n\x04\x04\
    \x08\x04\0\x12\x06\xa0\x04\x02\xb0\x04\x03\x1a\xca\x01\x20The\x20relatio\
    n\x20between\x20this\x20trip\x20and\x20the\x20static\x20schedule.\x20If\
    \x20a\x20trip\x20is\x20done\n\x20in\x20accordance\x20with\x20temporary\
    \x20schedule,\x20not\x20reflected\x20in\x20GTFS,\x20then\x20it\n\x20shou\
    ldn't\x20be\x20marked\x20as\x20SCHEDULED,\x20but\x20likely\x20as\x20ADDE\
    D.\n\n\r\n\x05\x04\x08\x04\0\x01\x12\x04\xa0\x04\x07\x1b\n\x91\x01\n\x06\
    \x04\x08\x04\0\x02\0\x12\x04\xa3\x04\x04\x12\x1a\x80\x01\x20Trip\x20that\
    \x20is\x20running\x20in\x20accordance\x20with\x20its\x20GTFS\x20schedule\
    ,\x20or\x20is\x20close\n\x20enough\x20to\x20the\x20scheduled\x20trip\x20\
    to\x20be\x20associated\x20with\x20it.\n\n\x0f\n\x07\x04\x08\x04\0\x02\0\
    \x01\x12\x04\xa3\x04\x04\r\n\x0f\n\x07\x04\x08\x04\0\x02\0\x02\x12\x04\
    \xa3\x04\x10\x11\n\xa5\x01\n\x06\x04\x08\x04\0\x02\x01\x12\x04\xa8\x04\
    \x04\x0e\x1a\x94\x01\x20An\x20extra\x20trip\x20that\x20was\x20added\x20i\
    n\x20addition\x20to\x20a\x20running\x20schedule,\x20for\n\x20example,\
    \x20to\x20replace\x20a\x20broken\x20vehicle\x20or\x20to\x20respond\x20to\
    \x20sudden\x20passenger\n\x20load.\n\n\x0f\n\x07\x04\x08\x04\0\x02\x01\
    \x01\x12\x04\xa8\x04\x04\t\n\x0f\n\x07\x04\x08\x04\0\x02\x01\x02\x12\x04\
    \xa8\x04\x0c\r\ny\n\x06\x04\x08\x04\0\x02\x02\x12\x04\xac\x04\x04\x14\
    \x1ai\x20A\x20trip\x20that\x20is\x20running\x20with\x20no\x20schedule\
    \x20associated\x20to\x20it,\x20for\x20example,\x20if\n\x20there\x20is\
    \x20no\x20schedule\x20at\x20all.\n\n\x0f\n\x07\x04\x08\x04\0\x02\x02\x01\
    \x12\x04\xac\x04\x04\x0f\n\x0f\n\x07\x04\x08\x04\0\x02\x02\x02\x12\x04\
    \xac\x04\x12\x13\nF\n\x06\x04\x08\x04\0\x02\x03\x12\x04\xaf\x04\x04\x11\
    \x1a6\x20A\x20trip\x20that\x20existed\x20in\x20the\x20schedule\x20but\
    \x20was\x20removed.\n\n\x0f\n\x07\x04\x08\x04\0\x02\x03\x01\x12\x04\xaf\
    \x04\x04\x0c\n\x0f\n\x07\x04\x08\x04\0\x02\x03\x02\x12\x04\xaf\x04\x0f\
    \x10\n\x0c\n\x04\x04\x08\x02\x05\x12\x04\xb1\x04\x02:\n\r\n\x05\x04\x08\
    \x02\x05\x04\x12\x04\xb1\x04\x02\n\n\r\n\x05\x04\x08\x02\x05\x06\x12\x04\
    \xb1\x04\x0b\x1f\n\r\n\x05\x04\x08\x02\x05\x01\x12\x04\xb1\x04\x205\n\r\
    \n\x05\x04\x08\x02\x05\x03\x12\x04\xb1\x0489\n\xb9\x01\n\x03\x04\x08\x05\
    \x12\x04\xb6\x04\x02\x1a\x1a\xab\x01\x20The\x20extensions\x20namespace\
    \x20allows\x203rd-party\x20developers\x20to\x20extend\x20the\n\x20GTFS-r\
    ealtime\x20specification\x20in\x20order\x20to\x20add\x20and\x20evaluate\
    \x20new\x20features\x20and\n\x20modifications\x20to\x20the\x20spec.\n\n\
    \x0c\n\x04\x04\x08\x05\0\x12\x04\xb6\x04\r\x19\n\r\n\x05\x04\x08\x05\0\
    \x01\x12\x04\xb6\x04\r\x11\n\r\n\x05\x04\x08\x05\0\x02\x12\x04\xb6\x04\
    \x15\x19\nO\n\x02\x04\t\x12\x06\xba\x04\0\xcb\x04\x01\x1aA\x20Identifica\
    tion\x20information\x20for\x20the\x20vehicle\x20performing\x20the\x20tri\
    p.\n\n\x0b\n\x03\x04\t\x01\x12\x04\xba\x04\x08\x19\n\xab\x01\n\x04\x04\t\
    \x02\0\x12\x04\xbe\x04\x02\x19\x1a\x9c\x01\x20Internal\x20system\x20iden\
    tification\x20of\x20the\x20vehicle.\x20Should\x20be\x20unique\x20per\n\
    \x20vehicle,\x20and\x20can\x20be\x20used\x20for\x20tracking\x20the\x20ve\
    hicle\x20as\x20it\x20proceeds\x20through\n\x20the\x20system.\n\n\r\n\x05\
    \x04\t\x02\0\x04\x12\x04\xbe\x04\x02\n\n\r\n\x05\x04\t\x02\0\x05\x12\x04\
    \xbe\x04\x0b\x11\n\r\n\x05\x04\t\x02\0\x01\x12\x04\xbe\x04\x12\x14\n\r\n\
    \x05\x04\t\x02\0\x03\x12\x04\xbe\x04\x17\x18\n~\n\x04\x04\t\x02\x01\x12\
    \x04\xc2\x04\x02\x1c\x1ap\x20User\x20visible\x20label,\x20i.e.,\x20somet\
    hing\x20that\x20must\x20be\x20shown\x20to\x20the\x20passenger\x20to\n\
    \x20help\x20identify\x20the\x20correct\x20vehicle.\n\n\r\n\x05\x04\t\x02\
    \x01\x04\x12\x04\xc2\x04\x02\n\n\r\n\x05\x04\t\x02\x01\x05\x12\x04\xc2\
    \x04\x0b\x11\n\r\n\x05\x04\t\x02\x01\x01\x12\x04\xc2\x04\x12\x17\n\r\n\
    \x05\x04\t\x02\x01\x03\x12\x04\xc2\x04\x1a\x1b\n1\n\x04\x04\t\x02\x02\
    \x12\x04\xc5\x04\x02$\x1a#\x20The\x20license\x20plate\x20of\x20the\x20ve\
    hicle.\n\n\r\n\x05\x04\t\x02\x02\x04\x12\x04\xc5\x04\x02\n\n\r\n\x05\x04\
    \t\x02\x02\x05\x12\x04\xc5\x04\x0b\x11\n\r\n\x05\x04\t\x02\x02\x01\x12\
    \x04\xc5\x04\x12\x1f\n\r\n\x05\x04\t\x02\x02\x03\x12\x04\xc5\x04\"#\n\
    \xb9\x01\n\x03\x04\t\x05\x12\x04\xca\x04\x02\x1a\x1a\xab\x01\x20The\x20e\
    xtensions\x20namespace\x20allows\x203rd-party\x20developers\x20to\x20ext\
    end\x20the\n\x20GTFS-realtime\x20specification\x20in\x20order\x20to\x20a\
    dd\x20and\x20evaluate\x20new\x20features\x20and\n\x20modifications\x20to\
    \x20the\x20spec.\n\n\x0c\n\x04\x04\t\x05\0\x12\x04\xca\x04\r\x19\n\r\n\
    \x05\x04\t\x05\0\x01\x12\x04\xca\x04\r\x11\n\r\n\x05\x04\t\x05\0\x02\x12\
    \x04\xca\x04\x15\x19\n8\n\x02\x04\n\x12\x06\xce\x04\0\xde\x04\x01\x1a*\
    \x20A\x20selector\x20for\x20an\x20entity\x20in\x20a\x20GTFS\x20feed.\n\n\
    \x0b\n\x03\x04\n\x01\x12\x04\xce\x04\x08\x16\n\xe2\x01\n\x04\x04\n\x02\0\
    \x12\x04\xd3\x04\x02\x20\x1a\xd3\x01\x20The\x20values\x20of\x20the\x20fi\
    elds\x20should\x20correspond\x20to\x20the\x20appropriate\x20fields\x20in\
    \x20the\n\x20GTFS\x20feed.\n\x20At\x20least\x20one\x20specifier\x20must\
    \x20be\x20given.\x20If\x20several\x20are\x20given,\x20then\x20the\n\x20m\
    atching\x20has\x20to\x20apply\x20to\x20all\x20the\x20given\x20specifiers\
    .\n\n\r\n\x05\x04\n\x02\0\x04\x12\x04\xd3\x04\x02\n\n\r\n\x05\x04\n\x02\
    \0\x05\x12\x04\xd3\x04\x0b\x11\n\r\n\x05\x04\n\x02\0\x01\x12\x04\xd3\x04\
    \x12\x1b\n\r\n\x05\x04\n\x02\0\x03\x12\x04\xd3\x04\x1e\x1f\n\x0c\n\x04\
    \x04\n\x02\x01\x12\x04\xd4\x04\x02\x1f\n\r\n\x05\x04\n\x02\x01\x04\x12\
    \x04\xd4\x04\x02\n\n\r\n\x05\x04\n\x02\x01\x05\x12\x04\xd4\x04\x0b\x11\n\
    \r\n\x05\x04\n\x02\x01\x01\x12\x04\xd4\x04\x12\x1a\n\r\n\x05\x04\n\x02\
    \x01\x03\x12\x04\xd4\x04\x1d\x1e\n2\n\x04\x04\n\x02\x02\x12\x04\xd6\x04\
    \x02\x20\x1a$\x20corresponds\x20to\x20route_type\x20in\x20GTFS.\n\n\r\n\
    \x05\x04\n\x02\x02\x04\x12\x04\xd6\x04\x02\n\n\r\n\x05\x04\n\x02\x02\x05\
    \x12\x04\xd6\x04\x0b\x10\n\r\n\x05\x04\n\x02\x02\x01\x12\x04\xd6\x04\x11\
    \x1b\n\r\n\x05\x04\n\x02\x02\x03\x12\x04\xd6\x04\x1e\x1f\n\x0c\n\x04\x04\
    \n\x02\x03\x12\x04\xd7\x04\x02#\n\r\n\x05\x04\n\x02\x03\x04\x12\x04\xd7\
    \x04\x02\n\n\r\n\x05\x04\n\x02\x03\x06\x12\x04\xd7\x04\x0b\x19\n\r\n\x05\
    \x04\n\x02\x03\x01\x12\x04\xd7\x04\x1a\x1e\n\r\n\x05\x04\n\x02\x03\x03\
    \x12\x04\xd7\x04!\"\n\x0c\n\x04\x04\n\x02\x04\x12\x04\xd8\x04\x02\x1e\n\
    \r\n\x05\x04\n\x02\x04\x04\x12\x04\xd8\x04\x02\n\n\r\n\x05\x04\n\x02\x04\
    \x05\x12\x04\xd8\x04\x0b\x11\n\r\n\x05\x04\n\x02\x04\x01\x12\x04\xd8\x04\
    \x12\x19\n\r\n\x05\x04\n\x02\x04\x03\x12\x04\xd8\x04\x1c\x1d\n\xb9\x01\n\
    \x03\x04\n\x05\x12\x04\xdd\x04\x02\x1a\x1a\xab\x01\x20The\x20extensions\
    \x20namespace\x20allows\x203rd-party\x20developers\x20to\x20extend\x20th\
    e\n\x20GTFS-realtime\x20specification\x20in\x20order\x20to\x20add\x20and\
    \x20evaluate\x20new\x20features\x20and\n\x20modifications\x20to\x20the\
    \x20spec.\n\n\x0c\n\x04\x04\n\x05\0\x12\x04\xdd\x04\r\x19\n\r\n\x05\x04\
    \n\x05\0\x01\x12\x04\xdd\x04\r\x11\n\r\n\x05\x04\n\x05\0\x02\x12\x04\xdd\
    \x04\x15\x19\n\x9b\x04\n\x02\x04\x0b\x12\x06\xea\x04\0\xff\x04\x01\x1a\
    \x8c\x04\x20An\x20internationalized\x20message\x20containing\x20per-lang\
    uage\x20versions\x20of\x20a\x20snippet\x20of\n\x20text\x20or\x20a\x20URL\
    .\n\x20One\x20of\x20the\x20strings\x20from\x20a\x20message\x20will\x20be\
    \x20picked\x20up.\x20The\x20resolution\x20proceeds\n\x20as\x20follows:\n\
    \x201.\x20If\x20the\x20UI\x20language\x20matches\x20the\x20language\x20c\
    ode\x20of\x20a\x20translation,\n\x20\x20\x20\x20the\x20first\x20matching\
    \x20translation\x20is\x20picked.\n\x202.\x20If\x20a\x20default\x20UI\x20\
    language\x20(e.g.,\x20English)\x20matches\x20the\x20language\x20code\x20\
    of\x20a\n\x20\x20\x20\x20translation,\x20the\x20first\x20matching\x20tra\
    nslation\x20is\x20picked.\n\x203.\x20If\x20some\x20translation\x20has\
    \x20an\x20unspecified\x20language\x20code,\x20that\x20translation\x20is\
    \n\x20\x20\x20\x20picked.\n\n\x0b\n\x03\x04\x0b\x01\x12\x04\xea\x04\x08\
    \x18\n\x0e\n\x04\x04\x0b\x03\0\x12\x06\xeb\x04\x02\xf7\x04\x03\n\r\n\x05\
    \x04\x0b\x03\0\x01\x12\x04\xeb\x04\n\x15\n8\n\x06\x04\x0b\x03\0\x02\0\
    \x12\x04\xed\x04\x04\x1d\x1a(\x20A\x20UTF-8\x20string\x20containing\x20t\
    he\x20message.\n\n\x0f\n\x07\x04\x0b\x03\0\x02\0\x04\x12\x04\xed\x04\x04\
    \x0c\n\x0f\n\x07\x04\x0b\x03\0\x02\0\x05\x12\x04\xed\x04\r\x13\n\x0f\n\
    \x07\x04\x0b\x03\0\x02\0\x01\x12\x04\xed\x04\x14\x18\n\x0f\n\x07\x04\x0b\
    \x03\0\x02\0\x03\x12\x04\xed\x04\x1b\x1c\n\xc7\x01\n\x06\x04\x0b\x03\0\
    \x02\x01\x12\x04\xf1\x04\x04!\x1a\xb6\x01\x20BCP-47\x20language\x20code.\
    \x20Can\x20be\x20omitted\x20if\x20the\x20language\x20is\x20unknown\x20or\
    \x20if\n\x20no\x20i18n\x20is\x20done\x20at\x20all\x20for\x20the\x20feed.\
    \x20At\x20most\x20one\x20translation\x20is\n\x20allowed\x20to\x20have\
    \x20an\x20unspecified\x20language\x20tag.\n\n\x0f\n\x07\x04\x0b\x03\0\
    \x02\x01\x04\x12\x04\xf1\x04\x04\x0c\n\x0f\n\x07\x04\x0b\x03\0\x02\x01\
    \x05\x12\x04\xf1\x04\r\x13\n\x0f\n\x07\x04\x0b\x03\0\x02\x01\x01\x12\x04\
    \xf1\x04\x14\x1c\n\x0f\n\x07\x04\x0b\x03\0\x02\x01\x03\x12\x04\xf1\x04\
    \x1f\x20\n\xbb\x01\n\x05\x04\x0b\x03\0\x05\x12\x04\xf6\x04\x04\x1c\x1a\
    \xab\x01\x20The\x20extensions\x20namespace\x20allows\x203rd-party\x20dev\
    elopers\x20to\x20extend\x20the\n\x20GTFS-realtime\x20specification\x20in\
    \x20order\x20to\x20add\x20and\x20evaluate\x20new\x20features\x20and\n\
    \x20modifications\x20to\x20the\x20spec.\n\n\x0e\n\x06\x04\x0b\x03\0\x05\
    \0\x12\x04\xf6\x04\x0f\x1b\n\x0f\n\x07\x04\x0b\x03\0\x05\0\x01\x12\x04\
    \xf6\x04\x0f\x13\n\x0f\n\x07\x04\x0b\x03\0\x05\0\x02\x12\x04\xf6\x04\x17\
    \x1b\n:\n\x04\x04\x0b\x02\0\x12\x04\xf9\x04\x02'\x1a,\x20At\x20least\x20\
    one\x20translation\x20must\x20be\x20provided.\n\n\r\n\x05\x04\x0b\x02\0\
    \x04\x12\x04\xf9\x04\x02\n\n\r\n\x05\x04\x0b\x02\0\x06\x12\x04\xf9\x04\
    \x0b\x16\n\r\n\x05\x04\x0b\x02\0\x01\x12\x04\xf9\x04\x17\"\n\r\n\x05\x04\
    \x0b\x02\0\x03\x12\x04\xf9\x04%&\n\xb9\x01\n\x03\x04\x0b\x05\x12\x04\xfe\
    \x04\x02\x1a\x1a\xab\x01\x20The\x20extensions\x20namespace\x20allows\x20\
    3rd-party\x20developers\x20to\x20extend\x20the\n\x20GTFS-realtime\x20spe\
    cification\x20in\x20order\x20to\x20add\x20and\x20evaluate\x20new\x20feat\
    ures\x20and\n\x20modifications\x20to\x20the\x20spec.\n\n\x0c\n\x04\x04\
    \x0b\x05\0\x12\x04\xfe\x04\r\x19\n\r\n\x05\x04\x0b\x05\0\x01\x12\x04\xfe\
    \x04\r\x11\n\r\n\x05\x04\x0b\x05\0\x02\x12\x04\xfe\x04\x15\x19\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
